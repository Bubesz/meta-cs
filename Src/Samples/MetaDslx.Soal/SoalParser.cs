//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\rtfqoasx.jcq\SoalParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Soal {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KException=2, KStruct=3, KInterface=4, KThrows=5, KOneway=6, 
		KBinding=7, KTransport=8, KEncoding=9, KProtocol=10, KEndpoint=11, KAddress=12, 
		KDatabase=13, KEntity=14, KAbstract=15, KComponent=16, KComposite=17, 
		KReference=18, KService=19, KWire=20, KTo=21, KImplementation=22, KNull=23, 
		KTrue=24, KFalse=25, KDateTime=26, KTimeSpan=27, KObject=28, KString=29, 
		KInt=30, KLong=31, KFloat=32, KDouble=33, KByte=34, KBool=35, KAny=36, 
		KVoid=37, TSemicolon=38, TColon=39, TDot=40, TComma=41, TAssign=42, TOpenParen=43, 
		TCloseParen=44, TOpenBracket=45, TCloseBracket=46, TOpenBrace=47, TCloseBrace=48, 
		TLessThan=49, TGreaterThan=50, TQuestion=51, TQuestionQuestion=52, TAmpersand=53, 
		THat=54, TBar=55, TAndAlso=56, TOrElse=57, TPlusPlus=58, TMinusMinus=59, 
		TPlus=60, TMinus=61, TTilde=62, TExclamation=63, TSlash=64, TAsterisk=65, 
		TPercent=66, TLessThanOrEqual=67, TGreaterThanOrEqual=68, TEqual=69, TNotEqual=70, 
		TAsteriskAssign=71, TSlashAssign=72, TPercentAssign=73, TPlusAssign=74, 
		TMinusAssign=75, TLeftShiftAssign=76, TRightShiftAssign=77, TAmpersandAssign=78, 
		THatAssign=79, TBarAssign=80, IdentifierNormal=81, IdentifierVerbatim=82, 
		IntegerLiteral=83, DecimalLiteral=84, ScientificLiteral=85, DateTimeOffsetLiteral=86, 
		DateTimeLiteral=87, DateLiteral=88, TimeLiteral=89, RegularStringLiteral=90, 
		GuidLiteral=91, UTF8BOM=92, WHITESPACE=93, CRLF=94, LINEBREAK=95, LINE_COMMENT=96, 
		COMMENT=97, DoubleQuoteVerbatimStringLiteral=98, SingleQuoteVerbatimStringLiteral=99, 
		DoubleQuoteVerbatimStringLiteralStart=100;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_namespaceDeclaration = 4, RULE_declaration = 5, RULE_structDeclaration = 6, 
		RULE_exceptionDeclaration = 7, RULE_propertyDeclaration = 8, RULE_databaseDeclaration = 9, 
		RULE_entityDeclaration = 10, RULE_interfaceDeclaration = 11, RULE_operationDeclaration = 12, 
		RULE_parameterList = 13, RULE_parameter = 14, RULE_componentDeclaration = 15, 
		RULE_componentElements = 16, RULE_componentElement = 17, RULE_componentService = 18, 
		RULE_componentReference = 19, RULE_componentServiceOrReferenceBody = 20, 
		RULE_componentServiceOrReferenceElement = 21, RULE_componentProperty = 22, 
		RULE_componentImplementation = 23, RULE_compositeDeclaration = 24, RULE_compositeElements = 25, 
		RULE_compositeElement = 26, RULE_compositeComponent = 27, RULE_compositeWire = 28, 
		RULE_wireService = 29, RULE_wireReference = 30, RULE_bindingDeclaration = 31, 
		RULE_bindingLayers = 32, RULE_transportLayer = 33, RULE_transportLayerKind = 34, 
		RULE_encodingLayer = 35, RULE_encodingLayerKind = 36, RULE_protocolLayer = 37, 
		RULE_protocolLayerKind = 38, RULE_endpointDeclaration = 39, RULE_endpointProperties = 40, 
		RULE_endpointProperty = 41, RULE_endpointBindingProperty = 42, RULE_endpointAddressProperty = 43, 
		RULE_returnType = 44, RULE_typeReference = 45, RULE_simpleType = 46, RULE_objectType = 47, 
		RULE_primitiveType = 48, RULE_voidType = 49, RULE_onewayType = 50, RULE_nullableType = 51, 
		RULE_arrayType = 52, RULE_identifier = 53, RULE_literal = 54, RULE_nullLiteral = 55, 
		RULE_booleanLiteral = 56, RULE_integerLiteral = 57, RULE_decimalLiteral = 58, 
		RULE_scientificLiteral = 59, RULE_stringLiteral = 60;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "namespaceDeclaration", 
		"declaration", "structDeclaration", "exceptionDeclaration", "propertyDeclaration", 
		"databaseDeclaration", "entityDeclaration", "interfaceDeclaration", "operationDeclaration", 
		"parameterList", "parameter", "componentDeclaration", "componentElements", 
		"componentElement", "componentService", "componentReference", "componentServiceOrReferenceBody", 
		"componentServiceOrReferenceElement", "componentProperty", "componentImplementation", 
		"compositeDeclaration", "compositeElements", "compositeElement", "compositeComponent", 
		"compositeWire", "wireService", "wireReference", "bindingDeclaration", 
		"bindingLayers", "transportLayer", "transportLayerKind", "encodingLayer", 
		"encodingLayerKind", "protocolLayer", "protocolLayerKind", "endpointDeclaration", 
		"endpointProperties", "endpointProperty", "endpointBindingProperty", "endpointAddressProperty", 
		"returnType", "typeReference", "simpleType", "objectType", "primitiveType", 
		"voidType", "onewayType", "nullableType", "arrayType", "identifier", "literal", 
		"nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'exception'", "'struct'", "'interface'", "'throws'", 
		"'oneway'", "'binding'", "'transport'", "'encoding'", "'protocol'", "'endpoint'", 
		"'address'", "'database'", "'entity'", "'abstract'", "'component'", "'composite'", 
		"'reference'", "'service'", "'wire'", "'to'", "'implementation'", "'null'", 
		"'true'", "'false'", "'DateTime'", "'TimeSpan'", "'object'", "'string'", 
		"'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", "'any'", 
		"'void'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KBinding", "KTransport", "KEncoding", "KProtocol", "KEndpoint", 
		"KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", "KComposite", 
		"KReference", "KService", "KWire", "KTo", "KImplementation", "KNull", 
		"KTrue", "KFalse", "KDateTime", "KTimeSpan", "KObject", "KString", "KInt", 
		"KLong", "KFloat", "KDouble", "KByte", "KBool", "KAny", "KVoid", "TSemicolon", 
		"TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", 
		"TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IdentifierVerbatim", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "RegularStringLiteral", 
		"GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", "LINEBREAK", "LINE_COMMENT", 
		"COMMENT", "DoubleQuoteVerbatimStringLiteral", "SingleQuoteVerbatimStringLiteral", 
		"DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace) {
				{
				{
				State = 122; namespaceDeclaration();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; identifier();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 129; Match(TDot);
				State = 130; identifier();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; identifier();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 137; Match(TComma);
				State = 138; identifier();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; qualifiedName();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 145; Match(TComma);
				State = 146; qualifiedName();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(KNamespace);
			State = 153; qualifiedName();
			State = 154; Match(TOpenBrace);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KException) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite))) != 0)) {
				{
				{
				State = 155; declaration();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 161; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 171;
			switch (TokenStream.La(1)) {
			case KStruct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; structDeclaration();
				}
				break;
			case KException:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; exceptionDeclaration();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; databaseDeclaration();
				}
				break;
			case KInterface:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166; interfaceDeclaration();
				}
				break;
			case KAbstract:
			case KComponent:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; componentDeclaration();
				}
				break;
			case KComposite:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168; compositeDeclaration();
				}
				break;
			case KBinding:
				EnterOuterAlt(_localctx, 7);
				{
				State = 169; bindingDeclaration();
				}
				break;
			case KEndpoint:
				EnterOuterAlt(_localctx, 8);
				{
				State = 170; endpointDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(KStruct);
			State = 174; identifier();
			State = 177;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 175; Match(TColon);
				State = 176; qualifiedName();
				}
			}

			State = 179; Match(TOpenBrace);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (KObject - 28)) | (1L << (KString - 28)) | (1L << (KInt - 28)) | (1L << (KLong - 28)) | (1L << (KFloat - 28)) | (1L << (KDouble - 28)) | (1L << (KByte - 28)) | (1L << (KBool - 28)) | (1L << (IdentifierNormal - 28)) | (1L << (IdentifierVerbatim - 28)))) != 0)) {
				{
				{
				State = 180; propertyDeclaration();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 186; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public ITerminalNode KException() { return GetToken(SoalParser.KException, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_exceptionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(KException);
			State = 189; identifier();
			State = 192;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 190; Match(TColon);
				State = 191; qualifiedName();
				}
			}

			State = 194; Match(TOpenBrace);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (KObject - 28)) | (1L << (KString - 28)) | (1L << (KInt - 28)) | (1L << (KLong - 28)) | (1L << (KFloat - 28)) | (1L << (KDouble - 28)) | (1L << (KByte - 28)) | (1L << (KBool - 28)) | (1L << (IdentifierNormal - 28)) | (1L << (IdentifierVerbatim - 28)))) != 0)) {
				{
				{
				State = 195; propertyDeclaration();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 201; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_propertyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; typeReference();
			State = 204; identifier();
			State = 205; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EntityDeclarationContext[] entityDeclaration() {
			return GetRuleContexts<EntityDeclarationContext>();
		}
		public EntityDeclarationContext entityDeclaration(int i) {
			return GetRuleContext<EntityDeclarationContext>(i);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(KDatabase);
			State = 208; identifier();
			State = 209; Match(TOpenBrace);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KEntity) {
				{
				{
				State = 210; entityDeclaration();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 216; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_entityDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(KEntity);
			State = 219; qualifiedName();
			State = 220; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(KInterface);
			State = 223; identifier();
			State = 224; Match(TOpenBrace);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 225; operationDeclaration();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 231; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KVoid:
			case IdentifierNormal:
			case IdentifierVerbatim:
				{
				State = 233; returnType();
				}
				break;
			case KOneway:
				{
				State = 234; onewayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 237; identifier();
			State = 238; Match(TOpenParen);
			State = 240;
			_la = TokenStream.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (KObject - 28)) | (1L << (KString - 28)) | (1L << (KInt - 28)) | (1L << (KLong - 28)) | (1L << (KFloat - 28)) | (1L << (KDouble - 28)) | (1L << (KByte - 28)) | (1L << (KBool - 28)) | (1L << (IdentifierNormal - 28)) | (1L << (IdentifierVerbatim - 28)))) != 0)) {
				{
				State = 239; parameterList();
				}
			}

			State = 242; Match(TCloseParen);
			State = 245;
			_la = TokenStream.La(1);
			if (_la==KThrows) {
				{
				State = 243; Match(KThrows);
				State = 244; qualifiedNameList();
				}
			}

			State = 247; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; parameter();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 250; Match(TComma);
				State = 251; parameter();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; typeReference();
			State = 258; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 260; Match(KAbstract);
				}
			}

			State = 263; Match(KComponent);
			State = 264; identifier();
			State = 267;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 265; Match(TColon);
				State = 266; qualifiedName();
				}
			}

			State = 269; Match(TOpenBrace);
			State = 271;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 270; componentElements();
				}
			}

			State = 273; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(Context, State);
		EnterRule(_localctx, 32, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 275; componentElement();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_componentElement);
		try {
			State = 284;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283; componentImplementation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(Context, State);
		EnterRule(_localctx, 36, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(KService);
			State = 287; qualifiedName();
			State = 289;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 288; identifier();
				}
			}

			State = 291; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(Context, State);
		EnterRule(_localctx, 38, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(KReference);
			State = 294; qualifiedName();
			State = 296;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 295; identifier();
				}
			}

			State = 298; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 309;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(TOpenBrace);
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KBinding) {
					{
					{
					State = 302; componentServiceOrReferenceElement();
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 308; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(KBinding);
			State = 312; qualifiedName();
			State = 313; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(Context, State);
		EnterRule(_localctx, 44, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; typeReference();
			State = 316; identifier();
			State = 317; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(Context, State);
		EnterRule(_localctx, 46, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(KImplementation);
			State = 320; identifier();
			State = 321; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(KComposite);
			State = 324; identifier();
			State = 327;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 325; Match(TColon);
				State = 326; qualifiedName();
				}
			}

			State = 329; Match(TOpenBrace);
			State = 331;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 330; compositeElements();
				}
			}

			State = 333; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(Context, State);
		EnterRule(_localctx, 50, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 335; compositeElement();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(Context, State);
		EnterRule(_localctx, 52, RULE_compositeElement);
		try {
			State = 345;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 342; componentProperty();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 4);
				{
				State = 343; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 5);
				{
				State = 344; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(Context, State);
		EnterRule(_localctx, 54, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(KComponent);
			State = 348; qualifiedName();
			State = 349; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireServiceContext wireService() {
			return GetRuleContext<WireServiceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireReferenceContext wireReference() {
			return GetRuleContext<WireReferenceContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(Context, State);
		EnterRule(_localctx, 56, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(KWire);
			State = 352; wireService();
			State = 353; Match(KTo);
			State = 354; wireReference();
			State = 355; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireServiceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireServiceContext wireService() {
		WireServiceContext _localctx = new WireServiceContext(Context, State);
		EnterRule(_localctx, 58, RULE_wireService);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireReferenceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireReferenceContext wireReference() {
		WireReferenceContext _localctx = new WireReferenceContext(Context, State);
		EnterRule(_localctx, 60, RULE_wireReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_bindingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(KBinding);
			State = 362; identifier();
			State = 363; Match(TOpenBrace);
			State = 365;
			_la = TokenStream.La(1);
			if (_la==KTransport) {
				{
				State = 364; bindingLayers();
				}
			}

			State = 367; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(Context, State);
		EnterRule(_localctx, 64, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; transportLayer();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 370; encodingLayer();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KEncoding );
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 375; protocolLayer();
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public TransportLayerKindContext transportLayerKind() {
			return GetRuleContext<TransportLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(Context, State);
		EnterRule(_localctx, 66, RULE_transportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(KTransport);
			State = 382; transportLayerKind();
			State = 383; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TransportLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerKindContext transportLayerKind() {
		TransportLayerKindContext _localctx = new TransportLayerKindContext(Context, State);
		EnterRule(_localctx, 68, RULE_transportLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public EncodingLayerKindContext encodingLayerKind() {
			return GetRuleContext<EncodingLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(Context, State);
		EnterRule(_localctx, 70, RULE_encodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(KEncoding);
			State = 388; encodingLayerKind();
			State = 389; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EncodingLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerKindContext encodingLayerKind() {
		EncodingLayerKindContext _localctx = new EncodingLayerKindContext(Context, State);
		EnterRule(_localctx, 72, RULE_encodingLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(Context, State);
		EnterRule(_localctx, 74, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(KProtocol);
			State = 394; protocolLayerKind();
			State = 395; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(Context, State);
		EnterRule(_localctx, 76, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_endpointDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(KEndpoint);
			State = 400; identifier();
			State = 401; Match(TColon);
			State = 402; qualifiedName();
			State = 403; Match(TOpenBrace);
			State = 405;
			_la = TokenStream.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 404; endpointProperties();
				}
			}

			State = 407; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(Context, State);
		EnterRule(_localctx, 80, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 409; endpointProperty();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(Context, State);
		EnterRule(_localctx, 82, RULE_endpointProperty);
		try {
			State = 416;
			switch (TokenStream.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(Context, State);
		EnterRule(_localctx, 84, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(KBinding);
			State = 419; qualifiedName();
			State = 420; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(Context, State);
		EnterRule(_localctx, 86, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(KAddress);
			State = 423; stringLiteral();
			State = 424; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_returnType);
		try {
			State = 428;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeReference);
		try {
			State = 432;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_simpleType);
		try {
			State = 438;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; primitiveType();
			State = 449; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; simpleType();
			State = 452; Match(TOpenBracket);
			State = 453; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 106, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_la = TokenStream.La(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_literal);
		try {
			State = 463;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 459; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 460; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 461; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 462; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SoalParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(SoalParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(SoalParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(SoalParser.RegularStringLiteral, 0); }
		public ITerminalNode SingleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.SingleQuoteVerbatimStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			_la = TokenStream.La(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (RegularStringLiteral - 90)) | (1L << (DoubleQuoteVerbatimStringLiteral - 90)) | (1L << (SingleQuoteVerbatimStringLiteral - 90)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x66\x1E0\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x3\x2\a"+
		"\x2~\n\x2\f\x2\xE\x2\x81\v\x2\x3\x3\x3\x3\x3\x3\a\x3\x86\n\x3\f\x3\xE"+
		"\x3\x89\v\x3\x3\x4\x3\x4\x3\x4\a\x4\x8E\n\x4\f\x4\xE\x4\x91\v\x4\x3\x5"+
		"\x3\x5\x3\x5\a\x5\x96\n\x5\f\x5\xE\x5\x99\v\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\a\x6\x9F\n\x6\f\x6\xE\x6\xA2\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x5\a\xAE\n\a\x3\b\x3\b\x3\b\x3\b\x5\b\xB4\n\b\x3\b\x3"+
		"\b\a\b\xB8\n\b\f\b\xE\b\xBB\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x5\t\xC3"+
		"\n\t\x3\t\x3\t\a\t\xC7\n\t\f\t\xE\t\xCA\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\a\v\xD6\n\v\f\v\xE\v\xD9\v\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\xE5\n\r\f\r\xE\r\xE8\v\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x5\xE\xEE\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\xF3\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\xF8\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xFF\n\xF\f"+
		"\xF\xE\xF\x102\v\xF\x3\x10\x3\x10\x3\x10\x3\x11\x5\x11\x108\n\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x10E\n\x11\x3\x11\x3\x11\x5\x11\x112\n\x11"+
		"\x3\x11\x3\x11\x3\x12\x6\x12\x117\n\x12\r\x12\xE\x12\x118\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x11F\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\x124\n\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x12B\n\x15\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\a\x16\x132\n\x16\f\x16\xE\x16\x135\v\x16\x3\x16\x5"+
		"\x16\x138\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x14A\n"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x14E\n\x1A\x3\x1A\x3\x1A\x3\x1B\x6\x1B\x153"+
		"\n\x1B\r\x1B\xE\x1B\x154\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x15C"+
		"\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x5!\x170\n!\x3!\x3!\x3\""+
		"\x3\"\x6\"\x176\n\"\r\"\xE\"\x177\x3\"\a\"\x17B\n\"\f\"\xE\"\x17E\v\""+
		"\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3"+
		"(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x198\n)\x3)\x3)\x3*\x6*\x19D\n*\r*\xE"+
		"*\x19E\x3+\x3+\x5+\x1A3\n+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x5"+
		".\x1AF\n.\x3/\x3/\x5/\x1B3\n/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1B9"+
		"\n\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35"+
		"\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x1D2\n\x38\x3\x39\x3\x39\x3:\x3:\x3"+
		";\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3>\x2\x2?\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvxz\x2\a\x3\x2\x1E\x1F\x3\x2 %\x3\x2ST\x3"+
		"\x2\x1A\x1B\x4\x2\\\\\x64\x65\x1DA\x2\x7F\x3\x2\x2\x2\x4\x82\x3\x2\x2"+
		"\x2\x6\x8A\x3\x2\x2\x2\b\x92\x3\x2\x2\x2\n\x9A\x3\x2\x2\x2\f\xAD\x3\x2"+
		"\x2\x2\xE\xAF\x3\x2\x2\x2\x10\xBE\x3\x2\x2\x2\x12\xCD\x3\x2\x2\x2\x14"+
		"\xD1\x3\x2\x2\x2\x16\xDC\x3\x2\x2\x2\x18\xE0\x3\x2\x2\x2\x1A\xED\x3\x2"+
		"\x2\x2\x1C\xFB\x3\x2\x2\x2\x1E\x103\x3\x2\x2\x2 \x107\x3\x2\x2\x2\"\x116"+
		"\x3\x2\x2\x2$\x11E\x3\x2\x2\x2&\x120\x3\x2\x2\x2(\x127\x3\x2\x2\x2*\x137"+
		"\x3\x2\x2\x2,\x139\x3\x2\x2\x2.\x13D\x3\x2\x2\x2\x30\x141\x3\x2\x2\x2"+
		"\x32\x145\x3\x2\x2\x2\x34\x152\x3\x2\x2\x2\x36\x15B\x3\x2\x2\x2\x38\x15D"+
		"\x3\x2\x2\x2:\x161\x3\x2\x2\x2<\x167\x3\x2\x2\x2>\x169\x3\x2\x2\x2@\x16B"+
		"\x3\x2\x2\x2\x42\x173\x3\x2\x2\x2\x44\x17F\x3\x2\x2\x2\x46\x183\x3\x2"+
		"\x2\x2H\x185\x3\x2\x2\x2J\x189\x3\x2\x2\x2L\x18B\x3\x2\x2\x2N\x18F\x3"+
		"\x2\x2\x2P\x191\x3\x2\x2\x2R\x19C\x3\x2\x2\x2T\x1A2\x3\x2\x2\x2V\x1A4"+
		"\x3\x2\x2\x2X\x1A8\x3\x2\x2\x2Z\x1AE\x3\x2\x2\x2\\\x1B2\x3\x2\x2\x2^\x1B8"+
		"\x3\x2\x2\x2`\x1BA\x3\x2\x2\x2\x62\x1BC\x3\x2\x2\x2\x64\x1BE\x3\x2\x2"+
		"\x2\x66\x1C0\x3\x2\x2\x2h\x1C2\x3\x2\x2\x2j\x1C5\x3\x2\x2\x2l\x1C9\x3"+
		"\x2\x2\x2n\x1D1\x3\x2\x2\x2p\x1D3\x3\x2\x2\x2r\x1D5\x3\x2\x2\x2t\x1D7"+
		"\x3\x2\x2\x2v\x1D9\x3\x2\x2\x2x\x1DB\x3\x2\x2\x2z\x1DD\x3\x2\x2\x2|~\x5"+
		"\n\x6\x2}|\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F\x80\x3\x2"+
		"\x2\x2\x80\x3\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x87\x5l\x37\x2\x83\x84"+
		"\a*\x2\x2\x84\x86\x5l\x37\x2\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87"+
		"\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x5\x3\x2\x2\x2\x89\x87\x3\x2"+
		"\x2\x2\x8A\x8F\x5l\x37\x2\x8B\x8C\a+\x2\x2\x8C\x8E\x5l\x37\x2\x8D\x8B"+
		"\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2"+
		"\x2\x90\a\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x97\x5\x4\x3\x2\x93\x94"+
		"\a+\x2\x2\x94\x96\x5\x4\x3\x2\x95\x93\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2"+
		"\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\t\x3\x2\x2\x2\x99\x97\x3"+
		"\x2\x2\x2\x9A\x9B\a\x3\x2\x2\x9B\x9C\x5\x4\x3\x2\x9C\xA0\a\x31\x2\x2\x9D"+
		"\x9F\x5\f\a\x2\x9E\x9D\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2"+
		"\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA4"+
		"\a\x32\x2\x2\xA4\v\x3\x2\x2\x2\xA5\xAE\x5\xE\b\x2\xA6\xAE\x5\x10\t\x2"+
		"\xA7\xAE\x5\x14\v\x2\xA8\xAE\x5\x18\r\x2\xA9\xAE\x5 \x11\x2\xAA\xAE\x5"+
		"\x32\x1A\x2\xAB\xAE\x5@!\x2\xAC\xAE\x5P)\x2\xAD\xA5\x3\x2\x2\x2\xAD\xA6"+
		"\x3\x2\x2\x2\xAD\xA7\x3\x2\x2\x2\xAD\xA8\x3\x2\x2\x2\xAD\xA9\x3\x2\x2"+
		"\x2\xAD\xAA\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\r"+
		"\x3\x2\x2\x2\xAF\xB0\a\x5\x2\x2\xB0\xB3\x5l\x37\x2\xB1\xB2\a)\x2\x2\xB2"+
		"\xB4\x5\x4\x3\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2"+
		"\x2\x2\xB5\xB9\a\x31\x2\x2\xB6\xB8\x5\x12\n\x2\xB7\xB6\x3\x2\x2\x2\xB8"+
		"\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2"+
		"\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\a\x32\x2\x2\xBD\xF\x3\x2\x2\x2\xBE"+
		"\xBF\a\x4\x2\x2\xBF\xC2\x5l\x37\x2\xC0\xC1\a)\x2\x2\xC1\xC3\x5\x4\x3\x2"+
		"\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC8\a"+
		"\x31\x2\x2\xC5\xC7\x5\x12\n\x2\xC6\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2"+
		"\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3"+
		"\x2\x2\x2\xCB\xCC\a\x32\x2\x2\xCC\x11\x3\x2\x2\x2\xCD\xCE\x5\\/\x2\xCE"+
		"\xCF\x5l\x37\x2\xCF\xD0\a(\x2\x2\xD0\x13\x3\x2\x2\x2\xD1\xD2\a\xF\x2\x2"+
		"\xD2\xD3\x5l\x37\x2\xD3\xD7\a\x31\x2\x2\xD4\xD6\x5\x16\f\x2\xD5\xD4\x3"+
		"\x2\x2\x2\xD6\xD9\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2"+
		"\xD8\xDA\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA\xDB\a\x32\x2\x2\xDB\x15\x3"+
		"\x2\x2\x2\xDC\xDD\a\x10\x2\x2\xDD\xDE\x5\x4\x3\x2\xDE\xDF\a(\x2\x2\xDF"+
		"\x17\x3\x2\x2\x2\xE0\xE1\a\x6\x2\x2\xE1\xE2\x5l\x37\x2\xE2\xE6\a\x31\x2"+
		"\x2\xE3\xE5\x5\x1A\xE\x2\xE4\xE3\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6\xE4"+
		"\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xE6\x3\x2\x2"+
		"\x2\xE9\xEA\a\x32\x2\x2\xEA\x19\x3\x2\x2\x2\xEB\xEE\x5Z.\x2\xEC\xEE\x5"+
		"\x66\x34\x2\xED\xEB\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2"+
		"\xEF\xF0\x5l\x37\x2\xF0\xF2\a-\x2\x2\xF1\xF3\x5\x1C\xF\x2\xF2\xF1\x3\x2"+
		"\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF7\a.\x2\x2\xF5\xF6"+
		"\a\a\x2\x2\xF6\xF8\x5\b\x5\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\xFA\a(\x2\x2\xFA\x1B\x3\x2\x2\x2\xFB\x100\x5"+
		"\x1E\x10\x2\xFC\xFD\a+\x2\x2\xFD\xFF\x5\x1E\x10\x2\xFE\xFC\x3\x2\x2\x2"+
		"\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101"+
		"\x1D\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x104\x5\\/\x2\x104\x105\x5"+
		"l\x37\x2\x105\x1F\x3\x2\x2\x2\x106\x108\a\x11\x2\x2\x107\x106\x3\x2\x2"+
		"\x2\x107\x108\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\a\x12\x2\x2"+
		"\x10A\x10D\x5l\x37\x2\x10B\x10C\a)\x2\x2\x10C\x10E\x5\x4\x3\x2\x10D\x10B"+
		"\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\a\x31"+
		"\x2\x2\x110\x112\x5\"\x12\x2\x111\x110\x3\x2\x2\x2\x111\x112\x3\x2\x2"+
		"\x2\x112\x113\x3\x2\x2\x2\x113\x114\a\x32\x2\x2\x114!\x3\x2\x2\x2\x115"+
		"\x117\x5$\x13\x2\x116\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x116"+
		"\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119#\x3\x2\x2\x2\x11A\x11F\x5&\x14"+
		"\x2\x11B\x11F\x5(\x15\x2\x11C\x11F\x5.\x18\x2\x11D\x11F\x5\x30\x19\x2"+
		"\x11E\x11A\x3\x2\x2\x2\x11E\x11B\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11E"+
		"\x11D\x3\x2\x2\x2\x11F%\x3\x2\x2\x2\x120\x121\a\x15\x2\x2\x121\x123\x5"+
		"\x4\x3\x2\x122\x124\x5l\x37\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2\x2"+
		"\x2\x124\x125\x3\x2\x2\x2\x125\x126\x5*\x16\x2\x126\'\x3\x2\x2\x2\x127"+
		"\x128\a\x14\x2\x2\x128\x12A\x5\x4\x3\x2\x129\x12B\x5l\x37\x2\x12A\x129"+
		"\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x5"+
		"*\x16\x2\x12D)\x3\x2\x2\x2\x12E\x138\a(\x2\x2\x12F\x133\a\x31\x2\x2\x130"+
		"\x132\x5,\x17\x2\x131\x130\x3\x2\x2\x2\x132\x135\x3\x2\x2\x2\x133\x131"+
		"\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x136\x3\x2\x2\x2\x135\x133\x3"+
		"\x2\x2\x2\x136\x138\a\x32\x2\x2\x137\x12E\x3\x2\x2\x2\x137\x12F\x3\x2"+
		"\x2\x2\x138+\x3\x2\x2\x2\x139\x13A\a\t\x2\x2\x13A\x13B\x5\x4\x3\x2\x13B"+
		"\x13C\a(\x2\x2\x13C-\x3\x2\x2\x2\x13D\x13E\x5\\/\x2\x13E\x13F\x5l\x37"+
		"\x2\x13F\x140\a(\x2\x2\x140/\x3\x2\x2\x2\x141\x142\a\x18\x2\x2\x142\x143"+
		"\x5l\x37\x2\x143\x144\a(\x2\x2\x144\x31\x3\x2\x2\x2\x145\x146\a\x13\x2"+
		"\x2\x146\x149\x5l\x37\x2\x147\x148\a)\x2\x2\x148\x14A\x5\x4\x3\x2\x149"+
		"\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14D"+
		"\a\x31\x2\x2\x14C\x14E\x5\x34\x1B\x2\x14D\x14C\x3\x2\x2\x2\x14D\x14E\x3"+
		"\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\a\x32\x2\x2\x150\x33\x3\x2\x2"+
		"\x2\x151\x153\x5\x36\x1C\x2\x152\x151\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2"+
		"\x154\x152\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x35\x3\x2\x2\x2\x156"+
		"\x15C\x5&\x14\x2\x157\x15C\x5(\x15\x2\x158\x15C\x5.\x18\x2\x159\x15C\x5"+
		"\x38\x1D\x2\x15A\x15C\x5:\x1E\x2\x15B\x156\x3\x2\x2\x2\x15B\x157\x3\x2"+
		"\x2\x2\x15B\x158\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15B\x15A\x3\x2\x2"+
		"\x2\x15C\x37\x3\x2\x2\x2\x15D\x15E\a\x12\x2\x2\x15E\x15F\x5\x4\x3\x2\x15F"+
		"\x160\a(\x2\x2\x160\x39\x3\x2\x2\x2\x161\x162\a\x16\x2\x2\x162\x163\x5"+
		"<\x1F\x2\x163\x164\a\x17\x2\x2\x164\x165\x5> \x2\x165\x166\a(\x2\x2\x166"+
		";\x3\x2\x2\x2\x167\x168\x5\x4\x3\x2\x168=\x3\x2\x2\x2\x169\x16A\x5\x4"+
		"\x3\x2\x16A?\x3\x2\x2\x2\x16B\x16C\a\t\x2\x2\x16C\x16D\x5l\x37\x2\x16D"+
		"\x16F\a\x31\x2\x2\x16E\x170\x5\x42\"\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170"+
		"\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\a\x32\x2\x2\x172\x41\x3\x2"+
		"\x2\x2\x173\x175\x5\x44#\x2\x174\x176\x5H%\x2\x175\x174\x3\x2\x2\x2\x176"+
		"\x177\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17C"+
		"\x3\x2\x2\x2\x179\x17B\x5L\'\x2\x17A\x179\x3\x2\x2\x2\x17B\x17E\x3\x2"+
		"\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x43\x3\x2\x2\x2"+
		"\x17E\x17C\x3\x2\x2\x2\x17F\x180\a\n\x2\x2\x180\x181\x5\x46$\x2\x181\x182"+
		"\a(\x2\x2\x182\x45\x3\x2\x2\x2\x183\x184\x5l\x37\x2\x184G\x3\x2\x2\x2"+
		"\x185\x186\a\v\x2\x2\x186\x187\x5J&\x2\x187\x188\a(\x2\x2\x188I\x3\x2"+
		"\x2\x2\x189\x18A\x5l\x37\x2\x18AK\x3\x2\x2\x2\x18B\x18C\a\f\x2\x2\x18C"+
		"\x18D\x5N(\x2\x18D\x18E\a(\x2\x2\x18EM\x3\x2\x2\x2\x18F\x190\x5l\x37\x2"+
		"\x190O\x3\x2\x2\x2\x191\x192\a\r\x2\x2\x192\x193\x5l\x37\x2\x193\x194"+
		"\a)\x2\x2\x194\x195\x5\x4\x3\x2\x195\x197\a\x31\x2\x2\x196\x198\x5R*\x2"+
		"\x197\x196\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199"+
		"\x19A\a\x32\x2\x2\x19AQ\x3\x2\x2\x2\x19B\x19D\x5T+\x2\x19C\x19B\x3\x2"+
		"\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2"+
		"\x2\x19FS\x3\x2\x2\x2\x1A0\x1A3\x5V,\x2\x1A1\x1A3\x5X-\x2\x1A2\x1A0\x3"+
		"\x2\x2\x2\x1A2\x1A1\x3\x2\x2\x2\x1A3U\x3\x2\x2\x2\x1A4\x1A5\a\t\x2\x2"+
		"\x1A5\x1A6\x5\x4\x3\x2\x1A6\x1A7\a(\x2\x2\x1A7W\x3\x2\x2\x2\x1A8\x1A9"+
		"\a\xE\x2\x2\x1A9\x1AA\x5z>\x2\x1AA\x1AB\a(\x2\x2\x1ABY\x3\x2\x2\x2\x1AC"+
		"\x1AF\x5\\/\x2\x1AD\x1AF\x5\x64\x33\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD"+
		"\x3\x2\x2\x2\x1AF[\x3\x2\x2\x2\x1B0\x1B3\x5j\x36\x2\x1B1\x1B3\x5^\x30"+
		"\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3]\x3\x2\x2\x2\x1B4"+
		"\x1B9\x5\x62\x32\x2\x1B5\x1B9\x5`\x31\x2\x1B6\x1B9\x5h\x35\x2\x1B7\x1B9"+
		"\x5\x4\x3\x2\x1B8\x1B4\x3\x2\x2\x2\x1B8\x1B5\x3\x2\x2\x2\x1B8\x1B6\x3"+
		"\x2\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9_\x3\x2\x2\x2\x1BA\x1BB\t\x2\x2\x2"+
		"\x1BB\x61\x3\x2\x2\x2\x1BC\x1BD\t\x3\x2\x2\x1BD\x63\x3\x2\x2\x2\x1BE\x1BF"+
		"\a\'\x2\x2\x1BF\x65\x3\x2\x2\x2\x1C0\x1C1\a\b\x2\x2\x1C1g\x3\x2\x2\x2"+
		"\x1C2\x1C3\x5\x62\x32\x2\x1C3\x1C4\a\x35\x2\x2\x1C4i\x3\x2\x2\x2\x1C5"+
		"\x1C6\x5^\x30\x2\x1C6\x1C7\a/\x2\x2\x1C7\x1C8\a\x30\x2\x2\x1C8k\x3\x2"+
		"\x2\x2\x1C9\x1CA\t\x4\x2\x2\x1CAm\x3\x2\x2\x2\x1CB\x1D2\x5p\x39\x2\x1CC"+
		"\x1D2\x5r:\x2\x1CD\x1D2\x5t;\x2\x1CE\x1D2\x5v<\x2\x1CF\x1D2\x5x=\x2\x1D0"+
		"\x1D2\x5z>\x2\x1D1\x1CB\x3\x2\x2\x2\x1D1\x1CC\x3\x2\x2\x2\x1D1\x1CD\x3"+
		"\x2\x2\x2\x1D1\x1CE\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D0\x3\x2"+
		"\x2\x2\x1D2o\x3\x2\x2\x2\x1D3\x1D4\a\x19\x2\x2\x1D4q\x3\x2\x2\x2\x1D5"+
		"\x1D6\t\x5\x2\x2\x1D6s\x3\x2\x2\x2\x1D7\x1D8\aU\x2\x2\x1D8u\x3\x2\x2\x2"+
		"\x1D9\x1DA\aV\x2\x2\x1DAw\x3\x2\x2\x2\x1DB\x1DC\aW\x2\x2\x1DCy\x3\x2\x2"+
		"\x2\x1DD\x1DE\t\x6\x2\x2\x1DE{\x3\x2\x2\x2)\x7F\x87\x8F\x97\xA0\xAD\xB3"+
		"\xB9\xC2\xC8\xD7\xE6\xED\xF2\xF7\x100\x107\x10D\x111\x118\x11E\x123\x12A"+
		"\x133\x137\x149\x14D\x154\x15B\x16F\x177\x17C\x197\x19E\x1A2\x1AE\x1B2"+
		"\x1B8\x1D1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Soal
