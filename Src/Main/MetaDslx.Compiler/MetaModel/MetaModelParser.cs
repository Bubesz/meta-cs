//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaModelParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {

using MetaDslx.Core;

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class MetaModelParser : Parser {
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KEnum=8, KAssociation=9, KContainment=10, KWith=11, KNew=12, 
		KNull=13, KTrue=14, KFalse=15, KVoid=16, KObject=17, KString=18, KInt=19, 
		KLong=20, KFloat=21, KDouble=22, KByte=23, KBool=24, KList=25, KAny=26, 
		KNone=27, KError=28, KSet=29, KMultiList=30, KMultiSet=31, KThis=32, KTypeof=33, 
		KAs=34, KIs=35, KBase=36, KConst=37, KRedefines=38, KSubsets=39, KReadonly=40, 
		KLazy=41, KSynthetized=42, KInherited=43, KDerived=44, KStatic=45, TSemicolon=46, 
		TColon=47, TDot=48, TComma=49, TAssign=50, TOpenParen=51, TCloseParen=52, 
		TOpenBracket=53, TCloseBracket=54, TOpenBrace=55, TCloseBrace=56, TLessThan=57, 
		TGreaterThan=58, TQuestion=59, TQuestionQuestion=60, TAmpersand=61, THat=62, 
		TBar=63, TAndAlso=64, TOrElse=65, TPlusPlus=66, TMinusMinus=67, TPlus=68, 
		TMinus=69, TTilde=70, TExclamation=71, TSlash=72, TAsterisk=73, TPercent=74, 
		TLessThanOrEqual=75, TGreaterThanOrEqual=76, TEqual=77, TNotEqual=78, 
		TAsteriskAssign=79, TSlashAssign=80, TPercentAssign=81, TPlusAssign=82, 
		TMinusAssign=83, TLeftShiftAssign=84, TRightShiftAssign=85, TAmpersandAssign=86, 
		THatAssign=87, TBarAssign=88, IdentifierNormal=89, IntegerLiteral=90, 
		DecimalLiteral=91, ScientificLiteral=92, DateTimeOffsetLiteral=93, DateTimeLiteral=94, 
		DateLiteral=95, TimeLiteral=96, RegularStringLiteral=97, GuidLiteral=98, 
		UTF8BOM=99, WHITESPACE=100, CRLF=101, LINEBREAK=102, LINE_COMMENT=103, 
		COMMENT=104;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_annotation = 4, RULE_annotationParams = 5, RULE_annotationParamList = 6, 
		RULE_annotationParam = 7, RULE_namespaceDeclaration = 8, RULE_metamodelDeclaration = 9, 
		RULE_declaration = 10, RULE_enumDeclaration = 11, RULE_enumValues = 12, 
		RULE_enumValue = 13, RULE_enumMemberDeclaration = 14, RULE_classDeclaration = 15, 
		RULE_classAncestors = 16, RULE_classAncestor = 17, RULE_classMemberDeclaration = 18, 
		RULE_fieldDeclaration = 19, RULE_fieldModifier = 20, RULE_redefinitions = 21, 
		RULE_subsettings = 22, RULE_nameUseList = 23, RULE_constDeclaration = 24, 
		RULE_functionDeclaration = 25, RULE_returnType = 26, RULE_typeOfReference = 27, 
		RULE_typeReference = 28, RULE_simpleType = 29, RULE_classType = 30, RULE_objectType = 31, 
		RULE_primitiveType = 32, RULE_voidType = 33, RULE_invisibleType = 34, 
		RULE_nullableType = 35, RULE_collectionType = 36, RULE_collectionKind = 37, 
		RULE_operationDeclaration = 38, RULE_parameterList = 39, RULE_parameter = 40, 
		RULE_constructorDeclaration = 41, RULE_initializerDeclaration = 42, RULE_synthetizedPropertyInitializer = 43, 
		RULE_inheritedPropertyInitializer = 44, RULE_expressionList = 45, RULE_expressionOrNewExpressionList = 46, 
		RULE_expressionOrNewExpression = 47, RULE_expression = 48, RULE_newExpression = 49, 
		RULE_newPropertyInitList = 50, RULE_newPropertyInit = 51, RULE_postOperator = 52, 
		RULE_preOperator = 53, RULE_unaryOperator = 54, RULE_multiplicativeOperator = 55, 
		RULE_additiveOperator = 56, RULE_shiftOperator = 57, RULE_comparisonOperator = 58, 
		RULE_equalityOperator = 59, RULE_assignmentOperator = 60, RULE_associationDeclaration = 61, 
		RULE_identifier = 62, RULE_literal = 63, RULE_nullLiteral = 64, RULE_booleanLiteral = 65, 
		RULE_integerLiteral = 66, RULE_decimalLiteral = 67, RULE_scientificLiteral = 68, 
		RULE_stringLiteral = 69;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "annotation", 
		"annotationParams", "annotationParamList", "annotationParam", "namespaceDeclaration", 
		"metamodelDeclaration", "declaration", "enumDeclaration", "enumValues", 
		"enumValue", "enumMemberDeclaration", "classDeclaration", "classAncestors", 
		"classAncestor", "classMemberDeclaration", "fieldDeclaration", "fieldModifier", 
		"redefinitions", "subsettings", "nameUseList", "constDeclaration", "functionDeclaration", 
		"returnType", "typeOfReference", "typeReference", "simpleType", "classType", 
		"objectType", "primitiveType", "voidType", "invisibleType", "nullableType", 
		"collectionType", "collectionKind", "operationDeclaration", "parameterList", 
		"parameter", "constructorDeclaration", "initializerDeclaration", "synthetizedPropertyInitializer", 
		"inheritedPropertyInitializer", "expressionList", "expressionOrNewExpressionList", 
		"expressionOrNewExpression", "expression", "newExpression", "newPropertyInitList", 
		"newPropertyInit", "postOperator", "preOperator", "unaryOperator", "multiplicativeOperator", 
		"additiveOperator", "shiftOperator", "comparisonOperator", "equalityOperator", 
		"assignmentOperator", "associationDeclaration", "identifier", "literal", 
		"nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'enum'", "'association'", "'containment'", "'with'", 
		"'new'", "'null'", "'true'", "'false'", "'void'", "'object'", "'string'", 
		"'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", "'list'", 
		"'any'", "'none'", "'error'", "'set'", "'multi_list'", "'multi_set'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'redefines'", 
		"'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", "'derived'", 
		"'static'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KEnum", "KAssociation", "KContainment", "KWith", "KNew", "KNull", 
		"KTrue", "KFalse", "KVoid", "KObject", "KString", "KInt", "KLong", "KFloat", 
		"KDouble", "KByte", "KBool", "KList", "KAny", "KNone", "KError", "KSet", 
		"KMultiList", "KMultiSet", "KThis", "KTypeof", "KAs", "KIs", "KBase", 
		"KConst", "KRedefines", "KSubsets", "KReadonly", "KLazy", "KSynthetized", 
		"KInherited", "KDerived", "KStatic", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IntegerLiteral", 
		"DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", "DateTimeLiteral", 
		"DateLiteral", "TimeLiteral", "RegularStringLiteral", "GuidLiteral", "UTF8BOM", 
		"WHITESPACE", "CRLF", "LINEBREAK", "LINE_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaModelParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaModelParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace || _la==TOpenBracket) {
				{
				{
				State = 140; namespaceDeclaration();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaModelParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaModelParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; identifier();
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 147; Match(TDot);
					State = 148; identifier();
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; identifier();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 155; Match(TComma);
				State = 156; identifier();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; qualifiedName();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 163; Match(TComma);
				State = 164; qualifiedName();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public AnnotationParamsContext annotationParams() {
			return GetRuleContext<AnnotationParamsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(TOpenBracket);
			State = 171; identifier();
			State = 173;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 172; annotationParams();
				}
			}

			State = 175; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamsContext : ParserRuleContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public AnnotationParamListContext annotationParamList() {
			return GetRuleContext<AnnotationParamListContext>(0);
		}
		public AnnotationParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamsContext annotationParams() {
		AnnotationParamsContext _localctx = new AnnotationParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_annotationParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(TOpenParen);
			State = 179;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal) {
				{
				State = 178; annotationParamList();
				}
			}

			State = 181; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamListContext : ParserRuleContext {
		public AnnotationParamContext[] annotationParam() {
			return GetRuleContexts<AnnotationParamContext>();
		}
		public AnnotationParamContext annotationParam(int i) {
			return GetRuleContext<AnnotationParamContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public AnnotationParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamListContext annotationParamList() {
		AnnotationParamListContext _localctx = new AnnotationParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotationParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; annotationParam();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 184; Match(TComma);
				State = 185; annotationParam();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamContext annotationParam() {
		AnnotationParamContext _localctx = new AnnotationParamContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotationParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; identifier();
			State = 192; Match(TAssign);
			State = 193; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaModelParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MetamodelDeclarationContext[] metamodelDeclaration() {
			return GetRuleContexts<MetamodelDeclarationContext>();
		}
		public MetamodelDeclarationContext metamodelDeclaration(int i) {
			return GetRuleContext<MetamodelDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 195; annotation();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 201; Match(KNamespace);
			State = 202; qualifiedName();
			State = 203; Match(TAssign);
			State = 204; stringLiteral();
			State = 205; Match(TOpenBrace);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KMetamodel || _la==TOpenBracket) {
				{
				{
				State = 206; metamodelDeclaration();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 212; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaModelParser.KMetamodel, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 214; annotation();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 220; Match(KMetamodel);
			State = 221; identifier();
			State = 222; Match(TOpenBrace);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KExtern) | (1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 223; declaration();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 229; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_declaration);
		try {
			State = 236;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233; associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234; constDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 235; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaModelParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 238; annotation();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 244; Match(KEnum);
			State = 245; identifier();
			State = 246; Match(TOpenBrace);
			State = 247; enumValues();
			State = 255;
			_la = TokenStream.La(1);
			if (_la==TSemicolon) {
				{
				State = 248; Match(TSemicolon);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 249; enumMemberDeclaration();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 257; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; enumValue();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 260; Match(TComma);
				State = 261; enumValue();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 267; annotation();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 273; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaModelParser.KClass, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaModelParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(MetaModelParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 277; annotation();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 284;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 283; Match(KAbstract);
				}
			}

			State = 286; Match(KClass);
			State = 287; identifier();
			State = 290;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 288; Match(TColon);
				State = 289; classAncestors();
				}
			}

			State = 292; Match(TOpenBrace);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 293; classMemberDeclaration();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 299; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 32, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; classAncestor();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 302; Match(TComma);
				State = 303; classAncestor();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 34, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_classMemberDeclaration);
		try {
			State = 314;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; operationDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 313; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 316; annotation();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 323;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived))) != 0)) {
				{
				State = 322; fieldModifier();
				}
			}

			State = 325; typeReference();
			State = 326; identifier();
			State = 329;
			switch (TokenStream.La(1)) {
			case KRedefines:
				{
				State = 327; redefinitions();
				}
				break;
			case KSubsets:
				{
				State = 328; subsettings();
				}
				break;
			case TSemicolon:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 331; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaModelParser.KContainment, 0); }
		public ITerminalNode KReadonly() { return GetToken(MetaModelParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaModelParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaModelParser.KDerived, 0); }
		public ITerminalNode KSynthetized() { return GetToken(MetaModelParser.KSynthetized, 0); }
		public ITerminalNode KInherited() { return GetToken(MetaModelParser.KInherited, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaModelParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterRedefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitRedefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 42, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(KRedefines);
			State = 337;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal) {
				{
				State = 336; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaModelParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 44, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(KSubsets);
			State = 341;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal) {
				{
				State = 340; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNameUseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNameUseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 46, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; qualifiedName();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 344; Match(TComma);
				State = 345; qualifiedName();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaModelParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(KConst);
			State = 352; typeReference();
			State = 353; identifier();
			State = 356;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 354; Match(TAssign);
				State = 355; expressionOrNewExpression();
				}
			}

			State = 358; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaModelParser.KExtern, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 360; annotation();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 366; Match(KExtern);
			State = 367; returnType();
			State = 368; identifier();
			State = 369; Match(TOpenParen);
			State = 371;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal) {
				{
				State = 370; parameterList();
				}
			}

			State = 373; Match(TCloseParen);
			State = 374; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_returnType);
		try {
			State = 378;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public InvisibleTypeContext invisibleType() {
			return GetRuleContext<InvisibleTypeContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeOfReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeOfReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeOfReference);
		try {
			State = 382;
			switch (TokenStream.La(1)) {
			case KAny:
			case KNone:
			case KError:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380; invisibleType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; typeReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeReference);
		try {
			State = 386;
			switch (TokenStream.La(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; collectionType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_simpleType);
		try {
			State = 392;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaModelParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(MetaModelParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaModelParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaModelParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaModelParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaModelParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaModelParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaModelParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaModelParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvisibleTypeContext : ParserRuleContext {
		public ITerminalNode KAny() { return GetToken(MetaModelParser.KAny, 0); }
		public ITerminalNode KNone() { return GetToken(MetaModelParser.KNone, 0); }
		public ITerminalNode KError() { return GetToken(MetaModelParser.KError, 0); }
		public InvisibleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invisibleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInvisibleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInvisibleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvisibleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvisibleTypeContext invisibleType() {
		InvisibleTypeContext _localctx = new InvisibleTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_invisibleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAny) | (1L << KNone) | (1L << KError))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaModelParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; primitiveType();
			State = 405; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaModelParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaModelParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; collectionKind();
			State = 408; Match(TLessThan);
			State = 409; simpleType();
			State = 410; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaModelParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaModelParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaModelParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaModelParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 74, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KStatic() { return GetToken(MetaModelParser.KStatic, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 414; annotation();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 421;
			_la = TokenStream.La(1);
			if (_la==KStatic) {
				{
				State = 420; Match(KStatic);
				}
			}

			State = 423; returnType();
			State = 424; identifier();
			State = 425; Match(TOpenParen);
			State = 427;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal) {
				{
				State = 426; parameterList();
				}
			}

			State = 429; Match(TCloseParen);
			State = 430; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 78, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; parameter();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 433; Match(TComma);
				State = 434; parameter();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 80, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 440; annotation();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 446; typeReference();
			State = 447; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public InitializerDeclarationContext[] initializerDeclaration() {
			return GetRuleContexts<InitializerDeclarationContext>();
		}
		public InitializerDeclarationContext initializerDeclaration(int i) {
			return GetRuleContext<InitializerDeclarationContext>(i);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 449; annotation();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 455; identifier();
			State = 456; Match(TOpenParen);
			State = 457; Match(TCloseParen);
			State = 458; Match(TOpenBrace);
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (KThis - 32)) | (1L << (TOpenBracket - 32)) | (1L << (IdentifierNormal - 32)))) != 0)) {
				{
				{
				State = 459; initializerDeclaration();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 465; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		public SynthetizedPropertyInitializerContext synthetizedPropertyInitializer() {
			return GetRuleContext<SynthetizedPropertyInitializerContext>(0);
		}
		public InheritedPropertyInitializerContext inheritedPropertyInitializer() {
			return GetRuleContext<InheritedPropertyInitializerContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_initializerDeclaration);
		try {
			State = 469;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; synthetizedPropertyInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; inheritedPropertyInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynthetizedPropertyInitializerContext : ParserRuleContext {
		public IdentifierContext property;
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ITerminalNode TDot() { return GetToken(MetaModelParser.TDot, 0); }
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public SynthetizedPropertyInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synthetizedPropertyInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSynthetizedPropertyInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSynthetizedPropertyInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynthetizedPropertyInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynthetizedPropertyInitializerContext synthetizedPropertyInitializer() {
		SynthetizedPropertyInitializerContext _localctx = new SynthetizedPropertyInitializerContext(Context, State);
		EnterRule(_localctx, 86, RULE_synthetizedPropertyInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			_la = TokenStream.La(1);
			if (_la==KThis) {
				{
				State = 471; Match(KThis);
				State = 472; Match(TDot);
				}
			}

			State = 479;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 475; Match(TOpenBracket);
				State = 476; qualifiedName();
				State = 477; Match(TCloseBracket);
				}
			}

			State = 481; _localctx.property = identifier();
			State = 482; Match(TAssign);
			State = 483; expression(0);
			State = 484; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritedPropertyInitializerContext : ParserRuleContext {
		public IdentifierContext @object;
		public IdentifierContext property;
		public ITerminalNode[] TDot() { return GetTokens(MetaModelParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaModelParser.TDot, i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public InheritedPropertyInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritedPropertyInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInheritedPropertyInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInheritedPropertyInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritedPropertyInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritedPropertyInitializerContext inheritedPropertyInitializer() {
		InheritedPropertyInitializerContext _localctx = new InheritedPropertyInitializerContext(Context, State);
		EnterRule(_localctx, 88, RULE_inheritedPropertyInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			_la = TokenStream.La(1);
			if (_la==KThis) {
				{
				State = 486; Match(KThis);
				State = 487; Match(TDot);
				}
			}

			State = 490; _localctx.@object = identifier();
			State = 491; Match(TDot);
			State = 496;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 492; Match(TOpenBracket);
				State = 493; qualifiedName();
				State = 494; Match(TCloseBracket);
				}
			}

			State = 498; _localctx.property = identifier();
			State = 499; Match(TAssign);
			State = 500; expression(0);
			State = 501; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 90, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; expression(0);
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 504; Match(TComma);
				State = 505; expression(0);
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrNewExpressionListContext : ParserRuleContext {
		public ExpressionOrNewExpressionContext[] expressionOrNewExpression() {
			return GetRuleContexts<ExpressionOrNewExpressionContext>();
		}
		public ExpressionOrNewExpressionContext expressionOrNewExpression(int i) {
			return GetRuleContext<ExpressionOrNewExpressionContext>(i);
		}
		public ExpressionOrNewExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrNewExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrNewExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrNewExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrNewExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrNewExpressionListContext expressionOrNewExpressionList() {
		ExpressionOrNewExpressionListContext _localctx = new ExpressionOrNewExpressionListContext(Context, State);
		EnterRule(_localctx, 92, RULE_expressionOrNewExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; expressionOrNewExpression();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 512; Match(TComma);
				State = 513; expressionOrNewExpression();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrNewExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ExpressionOrNewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrNewExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrNewExpressionContext expressionOrNewExpression() {
		ExpressionOrNewExpressionContext _localctx = new ExpressionOrNewExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_expressionOrNewExpression);
		try {
			State = 521;
			switch (TokenStream.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case KThis:
			case KTypeof:
			case TOpenParen:
			case TPlusPlus:
			case TMinusMinus:
			case TPlus:
			case TMinus:
			case TTilde:
			case TExclamation:
			case IdentifierNormal:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519; expression(0);
				}
				break;
			case KNew:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520; newExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexerExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public IndexerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIndexerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIndexerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public AdditiveOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveOperatorContext additiveOperator() {
			return GetRuleContext<AdditiveOperatorContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparisonOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public PostOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostOperatorContext postOperator() {
			return GetRuleContext<PostOperatorContext>(0);
		}
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public BracketExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAmpersand() { return GetToken(MetaModelParser.TAmpersand, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAndAlso() { return GetToken(MetaModelParser.TAndAlso, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public IdentifierContext name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaModelParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConversionExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KAs() { return GetToken(MetaModelParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeConversionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeConversionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConversionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public UnaryOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode THat() { return GetToken(MetaModelParser.THat, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public LiteralContext value;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ShiftOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ITerminalNode TQuestion() { return GetToken(MetaModelParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaModelParser.TColon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public AssignmentOperatorContext @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public MultiplicativeOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeOperatorContext multiplicativeOperator() {
			return GetRuleContext<MultiplicativeOperatorContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TOrElse() { return GetToken(MetaModelParser.TOrElse, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreExpressionContext : ExpressionContext {
		public PreOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreOperatorContext preOperator() {
			return GetRuleContext<PreOperatorContext>(0);
		}
		public PreExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPreExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TBar() { return GetToken(MetaModelParser.TBar, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaModelParser.KTypeof, 0); }
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public TypeOfReferenceContext typeOfReference() {
			return GetRuleContext<TypeOfReferenceContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public TypeofExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaModelParser.KIs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public EqualityOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityOperatorContext equalityOperator() {
			return GetRuleContext<EqualityOperatorContext>(0);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TQuestionQuestion() { return GetToken(MetaModelParser.TQuestionQuestion, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NullCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullCoalescingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullCoalescingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 524; Match(TOpenParen);
				State = 525; typeReference();
				State = 526; Match(TCloseParen);
				State = 527; expression(27);
				}
				break;
			case 2:
				{
				_localctx = new PreExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 529; ((PreExpressionContext)_localctx).kind = preOperator();
				State = 530; expression(17);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 532; ((UnaryExpressionContext)_localctx).kind = unaryOperator();
				State = 533; expression(16);
				}
				break;
			case 4:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 535; Match(KTypeof);
				State = 536; Match(TOpenParen);
				State = 537; typeOfReference();
				State = 538; Match(TCloseParen);
				}
				break;
			case 5:
				{
				_localctx = new BracketExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 540; Match(TOpenParen);
				State = 541; expression(0);
				State = 542; Match(TCloseParen);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 544; Match(KThis);
				}
				break;
			case 7:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 545; ((ConstantExpressionContext)_localctx).value = literal();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 546; ((IdentifierExpressionContext)_localctx).name = identifier();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 619;
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 549;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 550; ((MultiplicativeExpressionContext)_localctx).kind = multiplicativeOperator();
						State = 551; ((MultiplicativeExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 553;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 554; ((AdditiveExpressionContext)_localctx).kind = additiveOperator();
						State = 555; ((AdditiveExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 557;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 558; ((ShiftExpressionContext)_localctx).kind = shiftOperator();
						State = 559; ((ShiftExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 562; ((ComparisonExpressionContext)_localctx).kind = comparisonOperator();
						State = 563; ((ComparisonExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 565;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 566; ((EqualityExpressionContext)_localctx).kind = equalityOperator();
						State = 567; ((EqualityExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 569;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 570; Match(TAmpersand);
						State = 571; ((BitwiseAndExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 572;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 573; Match(THat);
						State = 574; ((BitwiseXorExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 575;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 576; Match(TBar);
						State = 577; ((BitwiseOrExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 578;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 579; Match(TAndAlso);
						State = 580; ((LogicalAndExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 581;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 582; Match(TOrElse);
						State = 583; ((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new NullCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NullCoalescingExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 584;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 585; Match(TQuestionQuestion);
						State = 586; ((NullCoalescingExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 587;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 588; Match(TQuestion);
						State = 589; ((ConditionalExpressionContext)_localctx).then = expression(0);
						State = 590; Match(TColon);
						State = 591; ((ConditionalExpressionContext)_localctx).@else = expression(3);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 593;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 594; ((AssignmentExpressionContext)_localctx).@operator = assignmentOperator();
						State = 595; ((AssignmentExpressionContext)_localctx).right = expression(2);
						}
						break;
					case 14:
						{
						_localctx = new IndexerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 597;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 598; Match(TOpenBracket);
						State = 599; expressionList();
						State = 600; Match(TCloseBracket);
						}
						break;
					case 15:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 602;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 603; Match(TOpenParen);
						State = 605;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KThis) | (1L << KTypeof) | (1L << TOpenParen))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (TPlusPlus - 66)) | (1L << (TMinusMinus - 66)) | (1L << (TPlus - 66)) | (1L << (TMinus - 66)) | (1L << (TTilde - 66)) | (1L << (TExclamation - 66)) | (1L << (IdentifierNormal - 66)) | (1L << (IntegerLiteral - 66)) | (1L << (DecimalLiteral - 66)) | (1L << (ScientificLiteral - 66)) | (1L << (RegularStringLiteral - 66)))) != 0)) {
							{
							State = 604; expressionList();
							}
						}

						State = 607; Match(TCloseParen);
						}
						break;
					case 16:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 608;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 609; Match(TDot);
						State = 610; ((MemberAccessExpressionContext)_localctx).name = identifier();
						}
						break;
					case 17:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 611;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 612; ((PostExpressionContext)_localctx).kind = postOperator();
						}
						break;
					case 18:
						{
						_localctx = new TypeConversionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 613;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 614; Match(KAs);
						State = 615; typeReference();
						}
						break;
					case 19:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 616;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 617; Match(KIs);
						State = 618; typeReference();
						}
						break;
					}
					} 
				}
				State = 623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
	 
		public NewExpressionContext() { }
		public virtual void CopyFrom(NewExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewObjectExpressionContext : NewExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaModelParser.KNew, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public NewPropertyInitListContext newPropertyInitList() {
			return GetRuleContext<NewPropertyInitListContext>(0);
		}
		public NewObjectExpressionContext(NewExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewCollectionExpressionContext : NewExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaModelParser.KNew, 0); }
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public NewCollectionExpressionContext(NewExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_newExpression);
		int _la;
		try {
			State = 646;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new NewObjectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; Match(KNew);
				State = 625; classType();
				State = 626; Match(TOpenParen);
				State = 627; Match(TCloseParen);
				State = 633;
				_la = TokenStream.La(1);
				if (_la==TOpenBrace) {
					{
					State = 628; Match(TOpenBrace);
					State = 630;
					_la = TokenStream.La(1);
					if (_la==IdentifierNormal) {
						{
						State = 629; newPropertyInitList();
						}
					}

					State = 632; Match(TCloseBrace);
					}
				}

				}
				break;
			case 2:
				_localctx = new NewCollectionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; Match(KNew);
				State = 636; collectionType();
				State = 637; Match(TOpenParen);
				State = 638; Match(TCloseParen);
				State = 644;
				_la = TokenStream.La(1);
				if (_la==TOpenBrace) {
					{
					State = 639; Match(TOpenBrace);
					State = 641;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KThis) | (1L << KTypeof) | (1L << TOpenParen))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (TPlusPlus - 66)) | (1L << (TMinusMinus - 66)) | (1L << (TPlus - 66)) | (1L << (TMinus - 66)) | (1L << (TTilde - 66)) | (1L << (TExclamation - 66)) | (1L << (IdentifierNormal - 66)) | (1L << (IntegerLiteral - 66)) | (1L << (DecimalLiteral - 66)) | (1L << (ScientificLiteral - 66)) | (1L << (RegularStringLiteral - 66)))) != 0)) {
						{
						State = 640; expressionOrNewExpression();
						}
					}

					State = 643; Match(TCloseBrace);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPropertyInitListContext : ParserRuleContext {
		public NewPropertyInitContext[] newPropertyInit() {
			return GetRuleContexts<NewPropertyInitContext>();
		}
		public NewPropertyInitContext newPropertyInit(int i) {
			return GetRuleContext<NewPropertyInitContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public NewPropertyInitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPropertyInitList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewPropertyInitList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewPropertyInitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPropertyInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPropertyInitListContext newPropertyInitList() {
		NewPropertyInitListContext _localctx = new NewPropertyInitListContext(Context, State);
		EnterRule(_localctx, 100, RULE_newPropertyInitList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; newPropertyInit();
			State = 653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 649; Match(TComma);
					State = 650; newPropertyInit();
					}
					} 
				}
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 657;
			_la = TokenStream.La(1);
			if (_la==TComma) {
				{
				State = 656; Match(TComma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPropertyInitContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public NewPropertyInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPropertyInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewPropertyInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewPropertyInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPropertyInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPropertyInitContext newPropertyInit() {
		NewPropertyInitContext _localctx = new NewPropertyInitContext(Context, State);
		EnterRule(_localctx, 102, RULE_newPropertyInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; identifier();
			State = 660; Match(TAssign);
			State = 661; expressionOrNewExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostOperatorContext : ParserRuleContext {
		public ITerminalNode TPlusPlus() { return GetToken(MetaModelParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaModelParser.TMinusMinus, 0); }
		public PostOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPostOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPostOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOperatorContext postOperator() {
		PostOperatorContext _localctx = new PostOperatorContext(Context, State);
		EnterRule(_localctx, 104, RULE_postOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			_la = TokenStream.La(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOperatorContext : ParserRuleContext {
		public ITerminalNode TPlusPlus() { return GetToken(MetaModelParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaModelParser.TMinusMinus, 0); }
		public PreOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPreOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPreOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOperatorContext preOperator() {
		PreOperatorContext _localctx = new PreOperatorContext(Context, State);
		EnterRule(_localctx, 106, RULE_preOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			_la = TokenStream.La(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode TPlus() { return GetToken(MetaModelParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaModelParser.TMinus, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaModelParser.TTilde, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaModelParser.TExclamation, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 108, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			_la = TokenStream.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TTilde - 68)) | (1L << (TExclamation - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		public ITerminalNode TAsterisk() { return GetToken(MetaModelParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaModelParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaModelParser.TPercent, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			_la = TokenStream.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (TSlash - 72)) | (1L << (TAsterisk - 72)) | (1L << (TPercent - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		public ITerminalNode TPlus() { return GetToken(MetaModelParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaModelParser.TMinus, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAdditiveOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAdditiveOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 112, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_la = TokenStream.La(1);
			if ( !(_la==TPlus || _la==TMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		public ITerminalNode[] TLessThan() { return GetTokens(MetaModelParser.TLessThan); }
		public ITerminalNode TLessThan(int i) {
			return GetToken(MetaModelParser.TLessThan, i);
		}
		public ITerminalNode[] TGreaterThan() { return GetTokens(MetaModelParser.TGreaterThan); }
		public ITerminalNode TGreaterThan(int i) {
			return GetToken(MetaModelParser.TGreaterThan, i);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_shiftOperator);
		try {
			State = 677;
			switch (TokenStream.La(1)) {
			case TLessThan:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; Match(TLessThan);
				State = 674; Match(TLessThan);
				}
				break;
			case TGreaterThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675; Match(TGreaterThan);
				State = 676; Match(TGreaterThan);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaModelParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaModelParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEqual() { return GetToken(MetaModelParser.TLessThanOrEqual, 0); }
		public ITerminalNode TGreaterThanOrEqual() { return GetToken(MetaModelParser.TGreaterThanOrEqual, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 116, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = TokenStream.La(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TLessThan - 57)) | (1L << (TGreaterThan - 57)) | (1L << (TLessThanOrEqual - 57)) | (1L << (TGreaterThanOrEqual - 57)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperatorContext : ParserRuleContext {
		public ITerminalNode TEqual() { return GetToken(MetaModelParser.TEqual, 0); }
		public ITerminalNode TNotEqual() { return GetToken(MetaModelParser.TNotEqual, 0); }
		public EqualityOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEqualityOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEqualityOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperatorContext equalityOperator() {
		EqualityOperatorContext _localctx = new EqualityOperatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_equalityOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.La(1);
			if ( !(_la==TEqual || _la==TNotEqual) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ITerminalNode TAsteriskAssign() { return GetToken(MetaModelParser.TAsteriskAssign, 0); }
		public ITerminalNode TSlashAssign() { return GetToken(MetaModelParser.TSlashAssign, 0); }
		public ITerminalNode TPercentAssign() { return GetToken(MetaModelParser.TPercentAssign, 0); }
		public ITerminalNode TPlusAssign() { return GetToken(MetaModelParser.TPlusAssign, 0); }
		public ITerminalNode TMinusAssign() { return GetToken(MetaModelParser.TMinusAssign, 0); }
		public ITerminalNode TLeftShiftAssign() { return GetToken(MetaModelParser.TLeftShiftAssign, 0); }
		public ITerminalNode TRightShiftAssign() { return GetToken(MetaModelParser.TRightShiftAssign, 0); }
		public ITerminalNode TAmpersandAssign() { return GetToken(MetaModelParser.TAmpersandAssign, 0); }
		public ITerminalNode THatAssign() { return GetToken(MetaModelParser.THatAssign, 0); }
		public ITerminalNode TBarAssign() { return GetToken(MetaModelParser.TBarAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.La(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (TAssign - 50)) | (1L << (TAsteriskAssign - 50)) | (1L << (TSlashAssign - 50)) | (1L << (TPercentAssign - 50)) | (1L << (TPlusAssign - 50)) | (1L << (TMinusAssign - 50)) | (1L << (TLeftShiftAssign - 50)) | (1L << (TRightShiftAssign - 50)) | (1L << (TAmpersandAssign - 50)) | (1L << (THatAssign - 50)) | (1L << (TBarAssign - 50)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifiedNameContext source;
		public QualifiedNameContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaModelParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaModelParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssociationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssociationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 685; annotation();
				}
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 691; Match(KAssociation);
			State = 692; _localctx.source = qualifiedName();
			State = 693; Match(KWith);
			State = 694; _localctx.target = qualifiedName();
			State = 695; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaModelParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_literal);
		try {
			State = 705;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 699; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 700; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 701; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 702; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 703; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 704; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaModelParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaModelParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaModelParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaModelParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaModelParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaModelParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaModelParser.RegularStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(RegularStringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 19);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3j\x2D2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x3\x2\a\x2\x90\n\x2\f\x2\xE\x2\x93\v\x2\x3\x3\x3"+
		"\x3\x3\x3\a\x3\x98\n\x3\f\x3\xE\x3\x9B\v\x3\x3\x4\x3\x4\x3\x4\a\x4\xA0"+
		"\n\x4\f\x4\xE\x4\xA3\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xA8\n\x5\f\x5\xE\x5\xAB"+
		"\v\x5\x3\x6\x3\x6\x3\x6\x5\x6\xB0\n\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a\xB6"+
		"\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\a\b\xBD\n\b\f\b\xE\b\xC0\v\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\n\a\n\xC7\n\n\f\n\xE\n\xCA\v\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\a\n\xD2\n\n\f\n\xE\n\xD5\v\n\x3\n\x3\n\x3\v\a\v\xDA\n\v\f\v\xE\v\xDD"+
		"\v\v\x3\v\x3\v\x3\v\x3\v\a\v\xE3\n\v\f\v\xE\v\xE6\v\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\xEF\n\f\x3\r\a\r\xF2\n\r\f\r\xE\r\xF5\v\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xFD\n\r\f\r\xE\r\x100\v\r\x5\r\x102\n\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x109\n\xE\f\xE\xE\xE\x10C\v\xE\x3\xF"+
		"\a\xF\x10F\n\xF\f\xF\xE\xF\x112\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\a\x11\x119\n\x11\f\x11\xE\x11\x11C\v\x11\x3\x11\x5\x11\x11F\n\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x5\x11\x125\n\x11\x3\x11\x3\x11\a\x11\x129\n"+
		"\x11\f\x11\xE\x11\x12C\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12"+
		"\x133\n\x12\f\x12\xE\x12\x136\v\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x13D\n\x14\x3\x15\a\x15\x140\n\x15\f\x15\xE\x15\x143\v\x15\x3"+
		"\x15\x5\x15\x146\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x14C\n\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x154\n\x17\x3\x18\x3\x18"+
		"\x5\x18\x158\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x15D\n\x19\f\x19\xE\x19"+
		"\x160\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x167\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\a\x1B\x16C\n\x1B\f\x1B\xE\x1B\x16F\v\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x176\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3"+
		"\x1C\x5\x1C\x17D\n\x1C\x3\x1D\x3\x1D\x5\x1D\x181\n\x1D\x3\x1E\x3\x1E\x5"+
		"\x1E\x185\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x18B\n\x1F\x3 \x3 "+
		"\x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3"+
		"\'\x3\'\x3(\a(\x1A2\n(\f(\xE(\x1A5\v(\x3(\x5(\x1A8\n(\x3(\x3(\x3(\x3("+
		"\x5(\x1AE\n(\x3(\x3(\x3(\x3)\x3)\x3)\a)\x1B6\n)\f)\xE)\x1B9\v)\x3*\a*"+
		"\x1BC\n*\f*\xE*\x1BF\v*\x3*\x3*\x3*\x3+\a+\x1C5\n+\f+\xE+\x1C8\v+\x3+"+
		"\x3+\x3+\x3+\x3+\a+\x1CF\n+\f+\xE+\x1D2\v+\x3+\x3+\x3,\x3,\x5,\x1D8\n"+
		",\x3-\x3-\x5-\x1DC\n-\x3-\x3-\x3-\x3-\x5-\x1E2\n-\x3-\x3-\x3-\x3-\x3-"+
		"\x3.\x3.\x5.\x1EB\n.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x1F3\n.\x3.\x3.\x3.\x3"+
		".\x3.\x3/\x3/\x3/\a/\x1FD\n/\f/\xE/\x200\v/\x3\x30\x3\x30\x3\x30\a\x30"+
		"\x205\n\x30\f\x30\xE\x30\x208\v\x30\x3\x31\x3\x31\x5\x31\x20C\n\x31\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x5\x32\x226\n\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x5\x32\x260\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x26E\n\x32\f\x32"+
		"\xE\x32\x271\v\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x279"+
		"\n\x33\x3\x33\x5\x33\x27C\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x5\x33\x284\n\x33\x3\x33\x5\x33\x287\n\x33\x5\x33\x289\n\x33\x3\x34"+
		"\x3\x34\x3\x34\a\x34\x28E\n\x34\f\x34\xE\x34\x291\v\x34\x3\x34\x5\x34"+
		"\x294\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3"+
		"\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3;\x3;\x5;\x2A8\n;\x3<\x3<"+
		"\x3=\x3=\x3>\x3>\x3?\a?\x2B1\n?\f?\xE?\x2B4\v?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C4\n\x41"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3G\x3G\x3G\x2\x3\x62H\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64"+
		"\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x2\xF\x4\x2\f\f*.\x3\x2\x13"+
		"\x14\x3\x2\x15\x1A\x3\x2\x1C\x1E\x4\x2\x1B\x1B\x1F!\x3\x2\x44\x45\x3\x2"+
		"\x46I\x3\x2JL\x3\x2\x46G\x4\x2;<MN\x3\x2OP\x4\x2\x34\x34QZ\x3\x2\x10\x11"+
		"\x2EE\x2\x91\x3\x2\x2\x2\x4\x94\x3\x2\x2\x2\x6\x9C\x3\x2\x2\x2\b\xA4\x3"+
		"\x2\x2\x2\n\xAC\x3\x2\x2\x2\f\xB3\x3\x2\x2\x2\xE\xB9\x3\x2\x2\x2\x10\xC1"+
		"\x3\x2\x2\x2\x12\xC8\x3\x2\x2\x2\x14\xDB\x3\x2\x2\x2\x16\xEE\x3\x2\x2"+
		"\x2\x18\xF3\x3\x2\x2\x2\x1A\x105\x3\x2\x2\x2\x1C\x110\x3\x2\x2\x2\x1E"+
		"\x115\x3\x2\x2\x2 \x11A\x3\x2\x2\x2\"\x12F\x3\x2\x2\x2$\x137\x3\x2\x2"+
		"\x2&\x13C\x3\x2\x2\x2(\x141\x3\x2\x2\x2*\x14F\x3\x2\x2\x2,\x151\x3\x2"+
		"\x2\x2.\x155\x3\x2\x2\x2\x30\x159\x3\x2\x2\x2\x32\x161\x3\x2\x2\x2\x34"+
		"\x16D\x3\x2\x2\x2\x36\x17C\x3\x2\x2\x2\x38\x180\x3\x2\x2\x2:\x184\x3\x2"+
		"\x2\x2<\x18A\x3\x2\x2\x2>\x18C\x3\x2\x2\x2@\x18E\x3\x2\x2\x2\x42\x190"+
		"\x3\x2\x2\x2\x44\x192\x3\x2\x2\x2\x46\x194\x3\x2\x2\x2H\x196\x3\x2\x2"+
		"\x2J\x199\x3\x2\x2\x2L\x19E\x3\x2\x2\x2N\x1A3\x3\x2\x2\x2P\x1B2\x3\x2"+
		"\x2\x2R\x1BD\x3\x2\x2\x2T\x1C6\x3\x2\x2\x2V\x1D7\x3\x2\x2\x2X\x1DB\x3"+
		"\x2\x2\x2Z\x1EA\x3\x2\x2\x2\\\x1F9\x3\x2\x2\x2^\x201\x3\x2\x2\x2`\x20B"+
		"\x3\x2\x2\x2\x62\x225\x3\x2\x2\x2\x64\x288\x3\x2\x2\x2\x66\x28A\x3\x2"+
		"\x2\x2h\x295\x3\x2\x2\x2j\x299\x3\x2\x2\x2l\x29B\x3\x2\x2\x2n\x29D\x3"+
		"\x2\x2\x2p\x29F\x3\x2\x2\x2r\x2A1\x3\x2\x2\x2t\x2A7\x3\x2\x2\x2v\x2A9"+
		"\x3\x2\x2\x2x\x2AB\x3\x2\x2\x2z\x2AD\x3\x2\x2\x2|\x2B2\x3\x2\x2\x2~\x2BB"+
		"\x3\x2\x2\x2\x80\x2C3\x3\x2\x2\x2\x82\x2C5\x3\x2\x2\x2\x84\x2C7\x3\x2"+
		"\x2\x2\x86\x2C9\x3\x2\x2\x2\x88\x2CB\x3\x2\x2\x2\x8A\x2CD\x3\x2\x2\x2"+
		"\x8C\x2CF\x3\x2\x2\x2\x8E\x90\x5\x12\n\x2\x8F\x8E\x3\x2\x2\x2\x90\x93"+
		"\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x3\x3\x2\x2\x2"+
		"\x93\x91\x3\x2\x2\x2\x94\x99\x5~@\x2\x95\x96\a\x32\x2\x2\x96\x98\x5~@"+
		"\x2\x97\x95\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A"+
		"\x3\x2\x2\x2\x9A\x5\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9C\xA1\x5~@\x2\x9D"+
		"\x9E\a\x33\x2\x2\x9E\xA0\x5~@\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA3\x3\x2\x2"+
		"\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\a\x3\x2\x2\x2\xA3\xA1"+
		"\x3\x2\x2\x2\xA4\xA9\x5\x4\x3\x2\xA5\xA6\a\x33\x2\x2\xA6\xA8\x5\x4\x3"+
		"\x2\xA7\xA5\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA"+
		"\x3\x2\x2\x2\xAA\t\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\a\x37\x2\x2"+
		"\xAD\xAF\x5~@\x2\xAE\xB0\x5\f\a\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2"+
		"\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\a\x38\x2\x2\xB2\v\x3\x2\x2\x2\xB3\xB5"+
		"\a\x35\x2\x2\xB4\xB6\x5\xE\b\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2"+
		"\xB6\xB7\x3\x2\x2\x2\xB7\xB8\a\x36\x2\x2\xB8\r\x3\x2\x2\x2\xB9\xBE\x5"+
		"\x10\t\x2\xBA\xBB\a\x33\x2\x2\xBB\xBD\x5\x10\t\x2\xBC\xBA\x3\x2\x2\x2"+
		"\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xF\x3"+
		"\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\x5~@\x2\xC2\xC3\a\x34\x2\x2\xC3"+
		"\xC4\x5\x62\x32\x2\xC4\x11\x3\x2\x2\x2\xC5\xC7\x5\n\x6\x2\xC6\xC5\x3\x2"+
		"\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9"+
		"\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a\x3\x2\x2\xCC\xCD\x5\x4"+
		"\x3\x2\xCD\xCE\a\x34\x2\x2\xCE\xCF\x5\x8CG\x2\xCF\xD3\a\x39\x2\x2\xD0"+
		"\xD2\x5\x14\v\x2\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2"+
		"\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6"+
		"\xD7\a:\x2\x2\xD7\x13\x3\x2\x2\x2\xD8\xDA\x5\n\x6\x2\xD9\xD8\x3\x2\x2"+
		"\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE"+
		"\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xDF\a\x5\x2\x2\xDF\xE0\x5~@\x2\xE0"+
		"\xE4\a\x39\x2\x2\xE1\xE3\x5\x16\f\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2"+
		"\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6"+
		"\xE4\x3\x2\x2\x2\xE7\xE8\a:\x2\x2\xE8\x15\x3\x2\x2\x2\xE9\xEF\x5\x18\r"+
		"\x2\xEA\xEF\x5 \x11\x2\xEB\xEF\x5|?\x2\xEC\xEF\x5\x32\x1A\x2\xED\xEF\x5"+
		"\x34\x1B\x2\xEE\xE9\x3\x2\x2\x2\xEE\xEA\x3\x2\x2\x2\xEE\xEB\x3\x2\x2\x2"+
		"\xEE\xEC\x3\x2\x2\x2\xEE\xED\x3\x2\x2\x2\xEF\x17\x3\x2\x2\x2\xF0\xF2\x5"+
		"\n\x6\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3"+
		"\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF7\a\n\x2"+
		"\x2\xF7\xF8\x5~@\x2\xF8\xF9\a\x39\x2\x2\xF9\x101\x5\x1A\xE\x2\xFA\xFE"+
		"\a\x30\x2\x2\xFB\xFD\x5\x1E\x10\x2\xFC\xFB\x3\x2\x2\x2\xFD\x100\x3\x2"+
		"\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100"+
		"\xFE\x3\x2\x2\x2\x101\xFA\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103"+
		"\x3\x2\x2\x2\x103\x104\a:\x2\x2\x104\x19\x3\x2\x2\x2\x105\x10A\x5\x1C"+
		"\xF\x2\x106\x107\a\x33\x2\x2\x107\x109\x5\x1C\xF\x2\x108\x106\x3\x2\x2"+
		"\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2"+
		"\x10B\x1B\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10F\x5\n\x6\x2\x10E"+
		"\x10D\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111\x113\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113\x114\x5"+
		"~@\x2\x114\x1D\x3\x2\x2\x2\x115\x116\x5N(\x2\x116\x1F\x3\x2\x2\x2\x117"+
		"\x119\x5\n\x6\x2\x118\x117\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118"+
		"\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11E\x3\x2\x2\x2\x11C\x11A\x3"+
		"\x2\x2\x2\x11D\x11F\a\b\x2\x2\x11E\x11D\x3\x2\x2\x2\x11E\x11F\x3\x2\x2"+
		"\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a\t\x2\x2\x121\x124\x5~@\x2\x122\x123"+
		"\a\x31\x2\x2\x123\x125\x5\"\x12\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3"+
		"\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x12A\a\x39\x2\x2\x127\x129\x5&\x14"+
		"\x2\x128\x127\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D"+
		"\x12E\a:\x2\x2\x12E!\x3\x2\x2\x2\x12F\x134\x5$\x13\x2\x130\x131\a\x33"+
		"\x2\x2\x131\x133\x5$\x13\x2\x132\x130\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2"+
		"\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135#\x3\x2\x2\x2\x136\x134"+
		"\x3\x2\x2\x2\x137\x138\x5\x4\x3\x2\x138%\x3\x2\x2\x2\x139\x13D\x5(\x15"+
		"\x2\x13A\x13D\x5N(\x2\x13B\x13D\x5T+\x2\x13C\x139\x3\x2\x2\x2\x13C\x13A"+
		"\x3\x2\x2\x2\x13C\x13B\x3\x2\x2\x2\x13D\'\x3\x2\x2\x2\x13E\x140\x5\n\x6"+
		"\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2"+
		"\x141\x142\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x144"+
		"\x146\x5*\x16\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x147"+
		"\x3\x2\x2\x2\x147\x148\x5:\x1E\x2\x148\x14B\x5~@\x2\x149\x14C\x5,\x17"+
		"\x2\x14A\x14C\x5.\x18\x2\x14B\x149\x3\x2\x2\x2\x14B\x14A\x3\x2\x2\x2\x14B"+
		"\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\a\x30\x2\x2\x14E)\x3"+
		"\x2\x2\x2\x14F\x150\t\x2\x2\x2\x150+\x3\x2\x2\x2\x151\x153\a(\x2\x2\x152"+
		"\x154\x5\x30\x19\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154-"+
		"\x3\x2\x2\x2\x155\x157\a)\x2\x2\x156\x158\x5\x30\x19\x2\x157\x156\x3\x2"+
		"\x2\x2\x157\x158\x3\x2\x2\x2\x158/\x3\x2\x2\x2\x159\x15E\x5\x4\x3\x2\x15A"+
		"\x15B\a\x33\x2\x2\x15B\x15D\x5\x4\x3\x2\x15C\x15A\x3\x2\x2\x2\x15D\x160"+
		"\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x31\x3\x2"+
		"\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x162\a\'\x2\x2\x162\x163\x5:\x1E\x2"+
		"\x163\x166\x5~@\x2\x164\x165\a\x34\x2\x2\x165\x167\x5`\x31\x2\x166\x164"+
		"\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\a\x30"+
		"\x2\x2\x169\x33\x3\x2\x2\x2\x16A\x16C\x5\n\x6\x2\x16B\x16A\x3\x2\x2\x2"+
		"\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E"+
		"\x170\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x170\x171\a\x6\x2\x2\x171\x172"+
		"\x5\x36\x1C\x2\x172\x173\x5~@\x2\x173\x175\a\x35\x2\x2\x174\x176\x5P)"+
		"\x2\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2"+
		"\x177\x178\a\x36\x2\x2\x178\x179\a\x30\x2\x2\x179\x35\x3\x2\x2\x2\x17A"+
		"\x17D\x5:\x1E\x2\x17B\x17D\x5\x44#\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17B"+
		"\x3\x2\x2\x2\x17D\x37\x3\x2\x2\x2\x17E\x181\x5\x46$\x2\x17F\x181\x5:\x1E"+
		"\x2\x180\x17E\x3\x2\x2\x2\x180\x17F\x3\x2\x2\x2\x181\x39\x3\x2\x2\x2\x182"+
		"\x185\x5J&\x2\x183\x185\x5<\x1F\x2\x184\x182\x3\x2\x2\x2\x184\x183\x3"+
		"\x2\x2\x2\x185;\x3\x2\x2\x2\x186\x18B\x5\x42\"\x2\x187\x18B\x5@!\x2\x188"+
		"\x18B\x5H%\x2\x189\x18B\x5\x4\x3\x2\x18A\x186\x3\x2\x2\x2\x18A\x187\x3"+
		"\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x189\x3\x2\x2\x2\x18B=\x3\x2\x2\x2"+
		"\x18C\x18D\x5\x4\x3\x2\x18D?\x3\x2\x2\x2\x18E\x18F\t\x3\x2\x2\x18F\x41"+
		"\x3\x2\x2\x2\x190\x191\t\x4\x2\x2\x191\x43\x3\x2\x2\x2\x192\x193\a\x12"+
		"\x2\x2\x193\x45\x3\x2\x2\x2\x194\x195\t\x5\x2\x2\x195G\x3\x2\x2\x2\x196"+
		"\x197\x5\x42\"\x2\x197\x198\a=\x2\x2\x198I\x3\x2\x2\x2\x199\x19A\x5L\'"+
		"\x2\x19A\x19B\a;\x2\x2\x19B\x19C\x5<\x1F\x2\x19C\x19D\a<\x2\x2\x19DK\x3"+
		"\x2\x2\x2\x19E\x19F\t\x6\x2\x2\x19FM\x3\x2\x2\x2\x1A0\x1A2\x5\n\x6\x2"+
		"\x1A1\x1A0\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3"+
		"\x1A4\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A6\x1A8"+
		"\a/\x2\x2\x1A7\x1A6\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A9\x3\x2"+
		"\x2\x2\x1A9\x1AA\x5\x36\x1C\x2\x1AA\x1AB\x5~@\x2\x1AB\x1AD\a\x35\x2\x2"+
		"\x1AC\x1AE\x5P)\x2\x1AD\x1AC\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1AF"+
		"\x3\x2\x2\x2\x1AF\x1B0\a\x36\x2\x2\x1B0\x1B1\a\x30\x2\x2\x1B1O\x3\x2\x2"+
		"\x2\x1B2\x1B7\x5R*\x2\x1B3\x1B4\a\x33\x2\x2\x1B4\x1B6\x5R*\x2\x1B5\x1B3"+
		"\x3\x2\x2\x2\x1B6\x1B9\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3"+
		"\x2\x2\x2\x1B8Q\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1BC\x5\n\x6\x2"+
		"\x1BB\x1BA\x3\x2\x2\x2\x1BC\x1BF\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD"+
		"\x1BE\x3\x2\x2\x2\x1BE\x1C0\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1C1"+
		"\x5:\x1E\x2\x1C1\x1C2\x5~@\x2\x1C2S\x3\x2\x2\x2\x1C3\x1C5\x5\n\x6\x2\x1C4"+
		"\x1C3\x3\x2\x2\x2\x1C5\x1C8\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C6\x1C7"+
		"\x3\x2\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CA\x5"+
		"~@\x2\x1CA\x1CB\a\x35\x2\x2\x1CB\x1CC\a\x36\x2\x2\x1CC\x1D0\a\x39\x2\x2"+
		"\x1CD\x1CF\x5V,\x2\x1CE\x1CD\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE"+
		"\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D3\x3\x2\x2\x2\x1D2\x1D0\x3"+
		"\x2\x2\x2\x1D3\x1D4\a:\x2\x2\x1D4U\x3\x2\x2\x2\x1D5\x1D8\x5X-\x2\x1D6"+
		"\x1D8\x5Z.\x2\x1D7\x1D5\x3\x2\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8W\x3\x2"+
		"\x2\x2\x1D9\x1DA\a\"\x2\x2\x1DA\x1DC\a\x32\x2\x2\x1DB\x1D9\x3\x2\x2\x2"+
		"\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1E1\x3\x2\x2\x2\x1DD\x1DE\a\x37\x2\x2\x1DE"+
		"\x1DF\x5\x4\x3\x2\x1DF\x1E0\a\x38\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1DD"+
		"\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\x5"+
		"~@\x2\x1E4\x1E5\a\x34\x2\x2\x1E5\x1E6\x5\x62\x32\x2\x1E6\x1E7\a\x30\x2"+
		"\x2\x1E7Y\x3\x2\x2\x2\x1E8\x1E9\a\"\x2\x2\x1E9\x1EB\a\x32\x2\x2\x1EA\x1E8"+
		"\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1ED\x5"+
		"~@\x2\x1ED\x1F2\a\x32\x2\x2\x1EE\x1EF\a\x37\x2\x2\x1EF\x1F0\x5\x4\x3\x2"+
		"\x1F0\x1F1\a\x38\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1EE\x3\x2\x2\x2\x1F2"+
		"\x1F3\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x5~@\x2\x1F5\x1F6\a"+
		"\x34\x2\x2\x1F6\x1F7\x5\x62\x32\x2\x1F7\x1F8\a\x30\x2\x2\x1F8[\x3\x2\x2"+
		"\x2\x1F9\x1FE\x5\x62\x32\x2\x1FA\x1FB\a\x33\x2\x2\x1FB\x1FD\x5\x62\x32"+
		"\x2\x1FC\x1FA\x3\x2\x2\x2\x1FD\x200\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2"+
		"\x1FE\x1FF\x3\x2\x2\x2\x1FF]\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x201\x206"+
		"\x5`\x31\x2\x202\x203\a\x33\x2\x2\x203\x205\x5`\x31\x2\x204\x202\x3\x2"+
		"\x2\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2"+
		"\x2\x207_\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20C\x5\x62\x32\x2\x20A"+
		"\x20C\x5\x64\x33\x2\x20B\x209\x3\x2\x2\x2\x20B\x20A\x3\x2\x2\x2\x20C\x61"+
		"\x3\x2\x2\x2\x20D\x20E\b\x32\x1\x2\x20E\x20F\a\x35\x2\x2\x20F\x210\x5"+
		":\x1E\x2\x210\x211\a\x36\x2\x2\x211\x212\x5\x62\x32\x1D\x212\x226\x3\x2"+
		"\x2\x2\x213\x214\x5l\x37\x2\x214\x215\x5\x62\x32\x13\x215\x226\x3\x2\x2"+
		"\x2\x216\x217\x5n\x38\x2\x217\x218\x5\x62\x32\x12\x218\x226\x3\x2\x2\x2"+
		"\x219\x21A\a#\x2\x2\x21A\x21B\a\x35\x2\x2\x21B\x21C\x5\x38\x1D\x2\x21C"+
		"\x21D\a\x36\x2\x2\x21D\x226\x3\x2\x2\x2\x21E\x21F\a\x35\x2\x2\x21F\x220"+
		"\x5\x62\x32\x2\x220\x221\a\x36\x2\x2\x221\x226\x3\x2\x2\x2\x222\x226\a"+
		"\"\x2\x2\x223\x226\x5\x80\x41\x2\x224\x226\x5~@\x2\x225\x20D\x3\x2\x2"+
		"\x2\x225\x213\x3\x2\x2\x2\x225\x216\x3\x2\x2\x2\x225\x219\x3\x2\x2\x2"+
		"\x225\x21E\x3\x2\x2\x2\x225\x222\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225"+
		"\x224\x3\x2\x2\x2\x226\x26F\x3\x2\x2\x2\x227\x228\f\xF\x2\x2\x228\x229"+
		"\x5p\x39\x2\x229\x22A\x5\x62\x32\x10\x22A\x26E\x3\x2\x2\x2\x22B\x22C\f"+
		"\xE\x2\x2\x22C\x22D\x5r:\x2\x22D\x22E\x5\x62\x32\xF\x22E\x26E\x3\x2\x2"+
		"\x2\x22F\x230\f\r\x2\x2\x230\x231\x5t;\x2\x231\x232\x5\x62\x32\xE\x232"+
		"\x26E\x3\x2\x2\x2\x233\x234\f\f\x2\x2\x234\x235\x5v<\x2\x235\x236\x5\x62"+
		"\x32\r\x236\x26E\x3\x2\x2\x2\x237\x238\f\v\x2\x2\x238\x239\x5x=\x2\x239"+
		"\x23A\x5\x62\x32\f\x23A\x26E\x3\x2\x2\x2\x23B\x23C\f\n\x2\x2\x23C\x23D"+
		"\a?\x2\x2\x23D\x26E\x5\x62\x32\v\x23E\x23F\f\t\x2\x2\x23F\x240\a@\x2\x2"+
		"\x240\x26E\x5\x62\x32\n\x241\x242\f\b\x2\x2\x242\x243\a\x41\x2\x2\x243"+
		"\x26E\x5\x62\x32\t\x244\x245\f\a\x2\x2\x245\x246\a\x42\x2\x2\x246\x26E"+
		"\x5\x62\x32\b\x247\x248\f\x6\x2\x2\x248\x249\a\x43\x2\x2\x249\x26E\x5"+
		"\x62\x32\a\x24A\x24B\f\x5\x2\x2\x24B\x24C\a>\x2\x2\x24C\x26E\x5\x62\x32"+
		"\x6\x24D\x24E\f\x4\x2\x2\x24E\x24F\a=\x2\x2\x24F\x250\x5\x62\x32\x2\x250"+
		"\x251\a\x31\x2\x2\x251\x252\x5\x62\x32\x5\x252\x26E\x3\x2\x2\x2\x253\x254"+
		"\f\x3\x2\x2\x254\x255\x5z>\x2\x255\x256\x5\x62\x32\x4\x256\x26E\x3\x2"+
		"\x2\x2\x257\x258\f\x17\x2\x2\x258\x259\a\x37\x2\x2\x259\x25A\x5\\/\x2"+
		"\x25A\x25B\a\x38\x2\x2\x25B\x26E\x3\x2\x2\x2\x25C\x25D\f\x16\x2\x2\x25D"+
		"\x25F\a\x35\x2\x2\x25E\x260\x5\\/\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3"+
		"\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x26E\a\x36\x2\x2\x262\x263\f\x15"+
		"\x2\x2\x263\x264\a\x32\x2\x2\x264\x26E\x5~@\x2\x265\x266\f\x14\x2\x2\x266"+
		"\x26E\x5j\x36\x2\x267\x268\f\x11\x2\x2\x268\x269\a$\x2\x2\x269\x26E\x5"+
		":\x1E\x2\x26A\x26B\f\x10\x2\x2\x26B\x26C\a%\x2\x2\x26C\x26E\x5:\x1E\x2"+
		"\x26D\x227\x3\x2\x2\x2\x26D\x22B\x3\x2\x2\x2\x26D\x22F\x3\x2\x2\x2\x26D"+
		"\x233\x3\x2\x2\x2\x26D\x237\x3\x2\x2\x2\x26D\x23B\x3\x2\x2\x2\x26D\x23E"+
		"\x3\x2\x2\x2\x26D\x241\x3\x2\x2\x2\x26D\x244\x3\x2\x2\x2\x26D\x247\x3"+
		"\x2\x2\x2\x26D\x24A\x3\x2\x2\x2\x26D\x24D\x3\x2\x2\x2\x26D\x253\x3\x2"+
		"\x2\x2\x26D\x257\x3\x2\x2\x2\x26D\x25C\x3\x2\x2\x2\x26D\x262\x3\x2\x2"+
		"\x2\x26D\x265\x3\x2\x2\x2\x26D\x267\x3\x2\x2\x2\x26D\x26A\x3\x2\x2\x2"+
		"\x26E\x271\x3\x2\x2\x2\x26F\x26D\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270"+
		"\x63\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2\x272\x273\a\xE\x2\x2\x273\x274"+
		"\x5> \x2\x274\x275\a\x35\x2\x2\x275\x27B\a\x36\x2\x2\x276\x278\a\x39\x2"+
		"\x2\x277\x279\x5\x66\x34\x2\x278\x277\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2"+
		"\x279\x27A\x3\x2\x2\x2\x27A\x27C\a:\x2\x2\x27B\x276\x3\x2\x2\x2\x27B\x27C"+
		"\x3\x2\x2\x2\x27C\x289\x3\x2\x2\x2\x27D\x27E\a\xE\x2\x2\x27E\x27F\x5J"+
		"&\x2\x27F\x280\a\x35\x2\x2\x280\x286\a\x36\x2\x2\x281\x283\a\x39\x2\x2"+
		"\x282\x284\x5`\x31\x2\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284"+
		"\x285\x3\x2\x2\x2\x285\x287\a:\x2\x2\x286\x281\x3\x2\x2\x2\x286\x287\x3"+
		"\x2\x2\x2\x287\x289\x3\x2\x2\x2\x288\x272\x3\x2\x2\x2\x288\x27D\x3\x2"+
		"\x2\x2\x289\x65\x3\x2\x2\x2\x28A\x28F\x5h\x35\x2\x28B\x28C\a\x33\x2\x2"+
		"\x28C\x28E\x5h\x35\x2\x28D\x28B\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2\x28F"+
		"\x28D\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x293\x3\x2\x2\x2\x291\x28F"+
		"\x3\x2\x2\x2\x292\x294\a\x33\x2\x2\x293\x292\x3\x2\x2\x2\x293\x294\x3"+
		"\x2\x2\x2\x294g\x3\x2\x2\x2\x295\x296\x5~@\x2\x296\x297\a\x34\x2\x2\x297"+
		"\x298\x5`\x31\x2\x298i\x3\x2\x2\x2\x299\x29A\t\a\x2\x2\x29Ak\x3\x2\x2"+
		"\x2\x29B\x29C\t\a\x2\x2\x29Cm\x3\x2\x2\x2\x29D\x29E\t\b\x2\x2\x29Eo\x3"+
		"\x2\x2\x2\x29F\x2A0\t\t\x2\x2\x2A0q\x3\x2\x2\x2\x2A1\x2A2\t\n\x2\x2\x2A2"+
		"s\x3\x2\x2\x2\x2A3\x2A4\a;\x2\x2\x2A4\x2A8\a;\x2\x2\x2A5\x2A6\a<\x2\x2"+
		"\x2A6\x2A8\a<\x2\x2\x2A7\x2A3\x3\x2\x2\x2\x2A7\x2A5\x3\x2\x2\x2\x2A8u"+
		"\x3\x2\x2\x2\x2A9\x2AA\t\v\x2\x2\x2AAw\x3\x2\x2\x2\x2AB\x2AC\t\f\x2\x2"+
		"\x2ACy\x3\x2\x2\x2\x2AD\x2AE\t\r\x2\x2\x2AE{\x3\x2\x2\x2\x2AF\x2B1\x5"+
		"\n\x6\x2\x2B0\x2AF\x3\x2\x2\x2\x2B1\x2B4\x3\x2\x2\x2\x2B2\x2B0\x3\x2\x2"+
		"\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B5\x3\x2\x2\x2\x2B4\x2B2\x3\x2\x2\x2"+
		"\x2B5\x2B6\a\v\x2\x2\x2B6\x2B7\x5\x4\x3\x2\x2B7\x2B8\a\r\x2\x2\x2B8\x2B9"+
		"\x5\x4\x3\x2\x2B9\x2BA\a\x30\x2\x2\x2BA}\x3\x2\x2\x2\x2BB\x2BC\a[\x2\x2"+
		"\x2BC\x7F\x3\x2\x2\x2\x2BD\x2C4\x5\x82\x42\x2\x2BE\x2C4\x5\x84\x43\x2"+
		"\x2BF\x2C4\x5\x86\x44\x2\x2C0\x2C4\x5\x88\x45\x2\x2C1\x2C4\x5\x8A\x46"+
		"\x2\x2C2\x2C4\x5\x8CG\x2\x2C3\x2BD\x3\x2\x2\x2\x2C3\x2BE\x3\x2\x2\x2\x2C3"+
		"\x2BF\x3\x2\x2\x2\x2C3\x2C0\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C2"+
		"\x3\x2\x2\x2\x2C4\x81\x3\x2\x2\x2\x2C5\x2C6\a\xF\x2\x2\x2C6\x83\x3\x2"+
		"\x2\x2\x2C7\x2C8\t\xE\x2\x2\x2C8\x85\x3\x2\x2\x2\x2C9\x2CA\a\\\x2\x2\x2CA"+
		"\x87\x3\x2\x2\x2\x2CB\x2CC\a]\x2\x2\x2CC\x89\x3\x2\x2\x2\x2CD\x2CE\a^"+
		"\x2\x2\x2CE\x8B\x3\x2\x2\x2\x2CF\x2D0\a\x63\x2\x2\x2D0\x8D\x3\x2\x2\x2"+
		"\x43\x91\x99\xA1\xA9\xAF\xB5\xBE\xC8\xD3\xDB\xE4\xEE\xF3\xFE\x101\x10A"+
		"\x110\x11A\x11E\x124\x12A\x134\x13C\x141\x145\x14B\x153\x157\x15E\x166"+
		"\x16D\x175\x17C\x180\x184\x18A\x1A3\x1A7\x1AD\x1B7\x1BD\x1C6\x1D0\x1D7"+
		"\x1DB\x1E1\x1EA\x1F2\x1FE\x206\x20B\x225\x25F\x26D\x26F\x278\x27B\x283"+
		"\x286\x288\x28F\x293\x2A7\x2B2\x2C3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
