parser grammar MetaModelParser;

options
{
    tokenVocab = MetaModelLexer; 
}

main: namespaceDeclaration*;

@QualifiedName
qualifiedName : identifier (TDot identifier)*;
identifierList : identifier (TComma identifier)*;
qualifiedNameList : qualifiedName (TComma qualifiedName)*;

@Scope 
namespaceDeclaration: KNamespace @NameDef(kind=NameKind.Namespace) qualifiedName TEquals stringLiteral TOpenBrace metamodelDeclaration* TCloseBrace;

@TypeDef
metamodelDeclaration: KMetamodel @NameDef(kind=NameKind.Metamodel) identifier TOpenBrace declaration* TCloseBrace;

declaration : enumDeclaration | classDeclaration | associationDeclaration | constDeclaration;

@TypeDef
enumDeclaration : KEnum @NameDef(kind=NameKind.Enum) identifier TOpenBrace enumValues (TSemicolon enumMemberDeclaration*)? TCloseBrace;
enumValues :  @NameDef(kind=NameKind.EnumValue) identifierList;
enumMemberDeclaration : operationDeclaration;

@TypeDef
classDeclaration : KAbstract? KClass @NameDef(kind=NameKind.Class) identifier (TColon classAncestors)? TOpenBrace classMemberDeclaration* TCloseBrace;
classAncestors : classAncestor (TComma classAncestor)*;
classAncestor : @TypeUse(kind=NameKind.Class) qualifiedName;
classMemberDeclaration : fieldDeclaration | operationDeclaration;

fieldDeclaration : (KContainment | KReadonly | KLazy | KDerived)? typeReference @NameDef(kind=NameKind.Property) identifier TSemicolon;

constDeclaration : KConst typeReference @NameDef(kind=NameKind.Const) identifier (TEquals expression)? TSemicolon;

@TypeUse
typeReference : collectionType | simpleType;
simpleType : objectType | nullableType | qualifiedName;
nullableType : primitiveType TQuestion?;
objectType : KObject | KString;
primitiveType : KInt | KLong | KFloat | KDouble | KByte | KBool;
collectionType : (KSet | KList) TLessThan simpleType TGreaterThan;
voidType : KVoid;
@TypeUse
returnType : typeReference | voidType;

@Scope
operationDeclaration : KStatic? returnType @NameDef(kind=NameKind.Operation) identifier TOpenBracket parameterList? TCloseBracket TSemicolon;
parameterList : parameter (TComma parameter)*;
parameter : typeReference @NameDef(kind=NameKind.Parameter) identifier (TEquals expression)?;

expression : literal | qualifiedName;

associationDeclaration : KAssociation @NameUse(kind=NameKind.Property) source=qualifiedName KWith @NameUse(kind=NameKind.Property) target=qualifiedName TSemicolon;


// Additional rules for lexer:

// Identifiers
@Identifier
identifier : IdentifierNormal /*| IdentifierVerbatim*/;
//identifier : IdentifierGeneral | IdentifierVerbatim;

// Literals
literal 
    : nullLiteral | booleanLiteral | numberLiteral | dateOrTimeLiteral  
    | stringLiteral | guidLiteral;

// Null literal
nullLiteral : KNull;

// Boolean literals
booleanLiteral : KTrue | KFalse;

// Number literals
numberLiteral : integerLiteral | decimalLiteral | scientificLiteral;
integerLiteral : IntegerLiteral;
decimalLiteral : DecimalLiteral;
scientificLiteral : ScientificLiteral;

// Date and time literals  
dateOrTimeLiteral 
    : dateTimeLiteral | dateTimeOffsetLiteral | dateLiteral | timeLiteral;
dateTimeOffsetLiteral : DateTimeOffsetLiteral;
dateTimeLiteral : DateTimeLiteral;
dateLiteral : DateLiteral;
timeLiteral : TimeLiteral;

// String literals
stringLiteral : RegularStringLiteral /*| DoubleQuoteVerbatimStringLiteral | SingleQuoteVerbatimStringLiteral*/;

// Guid literal
guidLiteral : GuidLiteral;

