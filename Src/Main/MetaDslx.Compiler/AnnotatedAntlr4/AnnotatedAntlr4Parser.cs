//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnnotatedAntlr4Parser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class AnnotatedAntlr4Parser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, BEGIN_ARG_ACTION=5, 
		OPTIONS=6, TOKENS=7, IMPORT=8, FRAGMENT=9, LEXER=10, PARSER=11, GRAMMAR=12, 
		PROTECTED=13, PUBLIC=14, PRIVATE=15, RETURNS=16, LOCALS=17, THROWS=18, 
		CATCH=19, FINALLY=20, MODE=21, TRUE=22, FALSE=23, NULL=24, COLON=25, COLONCOLON=26, 
		COMMA=27, SEMI=28, LPAREN=29, RPAREN=30, RARROW=31, LT=32, GT=33, ASSIGN=34, 
		QUESTION=35, STAR=36, PLUS=37, PLUS_ASSIGN=38, OR=39, DOLLAR=40, DOT=41, 
		RANGE=42, AT=43, POUND=44, NOT=45, LBRACE=46, RBRACE=47, LBRACKET=48, 
		RBRACKET=49, ID=50, INTEGER_LITERAL=51, DECIMAL_LITERAL=52, SCIENTIFIC_LITERAL=53, 
		STRING_LITERAL=54, UNTERMINATED_STRING_LITERAL=55, WS=56, ACTION=57, ERRCHAR=58, 
		ARG_ACTION=59, UNTERMINATED_ARG_ACTION=60, UNTERMINATED_CHAR_SET=61, DOC_COMMENT=62, 
		BLOCK_COMMENT=63;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_action = 9, RULE_actionScopeName = 10, 
		RULE_modeSpec = 11, RULE_rules = 12, RULE_ruleSpec = 13, RULE_parserRuleSpec = 14, 
		RULE_exceptionGroup = 15, RULE_exceptionHandler = 16, RULE_finallyClause = 17, 
		RULE_rulePrequel = 18, RULE_ruleReturns = 19, RULE_throwsSpec = 20, RULE_localsSpec = 21, 
		RULE_ruleAction = 22, RULE_ruleModifiers = 23, RULE_ruleModifier = 24, 
		RULE_ruleBlock = 25, RULE_ruleAltList = 26, RULE_labeledAlt = 27, RULE_attributesBlock = 28, 
		RULE_attributeAssignment = 29, RULE_expressionList = 30, RULE_expression = 31, 
		RULE_literal = 32, RULE_lexerRule = 33, RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35, 
		RULE_lexerAlt = 36, RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_labeledLexerElement = 39, 
		RULE_lexerBlock = 40, RULE_lexerCommands = 41, RULE_lexerCommand = 42, 
		RULE_lexerCommandName = 43, RULE_lexerCommandExpr = 44, RULE_altList = 45, 
		RULE_alternative = 46, RULE_annotatedElement = 47, RULE_element = 48, 
		RULE_labeledElement = 49, RULE_ebnf = 50, RULE_blockSuffix = 51, RULE_ebnfSuffix = 52, 
		RULE_lexerAtom = 53, RULE_atom = 54, RULE_notSet = 55, RULE_blockSet = 56, 
		RULE_setElement = 57, RULE_block = 58, RULE_ruleref = 59, RULE_range = 60, 
		RULE_terminal = 61, RULE_elementOptions = 62, RULE_elementOption = 63, 
		RULE_id = 64, RULE_annotation = 65, RULE_annotationBody = 66, RULE_annotationAttributeList = 67, 
		RULE_annotationAttribute = 68, RULE_expressionValueList = 69, RULE_qualifiedName = 70, 
		RULE_identifier = 71, RULE_boolean = 72, RULE_null = 73;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "action", 
		"actionScopeName", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", 
		"exceptionGroup", "exceptionHandler", "finallyClause", "rulePrequel", 
		"ruleReturns", "throwsSpec", "localsSpec", "ruleAction", "ruleModifiers", 
		"ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", "attributesBlock", 
		"attributeAssignment", "expressionList", "expression", "literal", "lexerRule", 
		"lexerRuleBlock", "lexerAltList", "lexerAlt", "lexerElements", "lexerElement", 
		"labeledLexerElement", "lexerBlock", "lexerCommands", "lexerCommand", 
		"lexerCommandName", "lexerCommandExpr", "altList", "alternative", "annotatedElement", 
		"element", "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", "lexerAtom", 
		"atom", "notSet", "blockSet", "setElement", "block", "ruleref", "range", 
		"terminal", "elementOptions", "elementOption", "id", "annotation", "annotationBody", 
		"annotationAttributeList", "annotationAttribute", "expressionValueList", 
		"qualifiedName", "identifier", "boolean", "null"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'import'", "'fragment'", 
		"'lexer'", "'parser'", "'grammar'", "'protected'", "'public'", "'private'", 
		"'returns'", "'locals'", "'throws'", "'catch'", "'finally'", "'mode'", 
		"'true'", "'false'", "'null'", "':'", "'::'", "','", "';'", "'('", "')'", 
		"'->'", "'<'", "'>'", "'='", "'?'", null, "'+'", "'+='", "'|'", "'$'", 
		"'.'", "'..'", "'@'", "'#'", "'~'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "BEGIN_ARG_ACTION", 
		"OPTIONS", "TOKENS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", "GRAMMAR", 
		"PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", "CATCH", 
		"FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", "COMMA", 
		"SEMI", "LPAREN", "RPAREN", "RARROW", "LT", "GT", "ASSIGN", "QUESTION", 
		"STAR", "PLUS", "PLUS_ASSIGN", "OR", "DOLLAR", "DOT", "RANGE", "AT", "POUND", 
		"NOT", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "ID", "INTEGER_LITERAL", 
		"DECIMAL_LITERAL", "SCIENTIFIC_LITERAL", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"WS", "ACTION", "ERRCHAR", "ARG_ACTION", "UNTERMINATED_ARG_ACTION", "UNTERMINATED_CHAR_SET", 
		"DOC_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnnotatedAntlr4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnnotatedAntlr4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AnnotatedAntlr4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 148; Match(DOC_COMMENT);
				}
			}

			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 151; annotation();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 157; grammarType();
			State = 158; id();
			State = 159; Match(SEMI);
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 160; prequelConstruct();
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 166; rules();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==AT) {
				{
				{
				State = 167; modeSpec();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 173; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(AnnotatedAntlr4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 175; Match(LEXER);
				State = 176; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 177; Match(PARSER);
				State = 178; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 179; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 186;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; tokensSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(AnnotatedAntlr4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(AnnotatedAntlr4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(AnnotatedAntlr4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(OPTIONS);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 189; option();
				State = 190; Match(SEMI);
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 197; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; id();
			State = 200; Match(ASSIGN);
			State = 201; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 214;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; id();
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 204; Match(DOT);
					State = 205; id();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212; Match(ACTION);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(AnnotatedAntlr4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(IMPORT);
			State = 217; delegateGrammar();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 218; Match(COMMA);
				State = 219; delegateGrammar();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 225; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 232;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; id();
				State = 228; Match(ASSIGN);
				State = 229; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(AnnotatedAntlr4Parser.TOKENS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(TOKENS);
			State = 235; id();
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 236; Match(COMMA);
					State = 237; id();
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 244;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 243; Match(COMMA);
				}
			}

			State = 246; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(AnnotatedAntlr4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 18, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(AT);
			State = 252;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 249; actionScopeName();
				State = 250; Match(COLONCOLON);
				}
				break;
			}
			State = 254; id();
			State = 255; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_actionScopeName);
		try {
			State = 260;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleContext[] lexerRule() {
			return GetRuleContexts<LexerRuleContext>();
		}
		public LexerRuleContext lexerRule(int i) {
			return GetRuleContext<LexerRuleContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 262; annotation();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 268; Match(MODE);
			State = 269; id();
			State = 270; Match(SEMI);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 271; lexerRule();
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 24, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 277; ruleSpec();
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_ruleSpec);
		try {
			State = 285;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; lexerRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 287; Match(DOC_COMMENT);
				}
			}

			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 290; annotation();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 297;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 296; ruleModifiers();
				}
			}

			State = 299; Match(RULE_REF);
			State = 301;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 300; Match(ARG_ACTION);
				}
			}

			State = 304;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 303; ruleReturns();
				}
			}

			State = 307;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 306; throwsSpec();
				}
			}

			State = 310;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 309; localsSpec();
				}
			}

			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 312; rulePrequel();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 318; Match(COLON);
			State = 319; ruleBlock();
			State = 320; Match(SEMI);
			State = 321; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 323; exceptionHandler();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 330;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 329; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(AnnotatedAntlr4Parser.CATCH, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 32, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(CATCH);
			State = 333; Match(ARG_ACTION);
			State = 334; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(AnnotatedAntlr4Parser.FINALLY, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(FINALLY);
			State = 337; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 36, RULE_rulePrequel);
		try {
			State = 341;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(AnnotatedAntlr4Parser.RETURNS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 38, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(RETURNS);
			State = 344; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(AnnotatedAntlr4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 40, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(THROWS);
			State = 347; id();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 348; Match(COMMA);
				State = 349; id();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(AnnotatedAntlr4Parser.LOCALS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(LOCALS);
			State = 356; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 44, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(AT);
			State = 359; id();
			State = 360; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 362; ruleModifier();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(AnnotatedAntlr4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AnnotatedAntlr4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(AnnotatedAntlr4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; labeledAlt();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 372; Match(OR);
				State = 373; labeledAlt();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(AnnotatedAntlr4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AttributesBlockContext attributesBlock() {
			return GetRuleContext<AttributesBlockContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 54, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; alternative();
			State = 388;
			_la = TokenStream.La(1);
			if (_la==POUND) {
				{
				State = 380; Match(POUND);
				State = 381; id();
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 382; annotation();
					}
					}
					State = 387;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 391;
			_la = TokenStream.La(1);
			if (_la==LBRACE) {
				{
				State = 390; attributesBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesBlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(AnnotatedAntlr4Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public AttributeAssignmentContext[] attributeAssignment() {
			return GetRuleContexts<AttributeAssignmentContext>();
		}
		public AttributeAssignmentContext attributeAssignment(int i) {
			return GetRuleContext<AttributeAssignmentContext>(i);
		}
		public AttributesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAttributesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAttributesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesBlockContext attributesBlock() {
		AttributesBlockContext _localctx = new AttributesBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_attributesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(LBRACE);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 394; attributeAssignment();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 400; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeAssignmentContext : ParserRuleContext {
		public IdContext ruleElement;
		public IdContext property;
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public AttributeAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAttributeAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAttributeAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeAssignmentContext attributeAssignment() {
		AttributeAssignmentContext _localctx = new AttributeAssignmentContext(Context, State);
		EnterRule(_localctx, 58, RULE_attributeAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 402; _localctx.ruleElement = id();
				State = 403; Match(DOT);
				}
				break;
			}
			State = 407; _localctx.property = id();
			State = 408; Match(ASSIGN);
			State = 409; expression();
			State = 410; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 60, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; expression();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 413; Match(COMMA);
				State = 414; expression();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_expression);
		int _la;
		try {
			State = 429;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 420; literal();
				}
				break;
			case 2:
				_localctx = new FunctionCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; qualifiedName();
				State = 422; Match(LPAREN);
				State = 424;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ID) | (1L << INTEGER_LITERAL) | (1L << SCIENTIFIC_LITERAL) | (1L << STRING_LITERAL))) != 0)) {
					{
					State = 423; expressionList();
					}
				}

				State = 426; Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullContext @null() {
			return GetRuleContext<NullContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public ITerminalNode SCIENTIFIC_LITERAL() { return GetToken(AnnotatedAntlr4Parser.SCIENTIFIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_literal);
		try {
			State = 436;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; @null();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; boolean();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433; Match(INTEGER_LITERAL);
				}
				break;
			case SCIENTIFIC_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434; Match(SCIENTIFIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 435; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 438; Match(DOC_COMMENT);
				}
			}

			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 441; annotation();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 448;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 447; Match(FRAGMENT);
				}
			}

			State = 450; Match(TOKEN_REF);
			State = 451; Match(COLON);
			State = 452; lexerRuleBlock();
			State = 453; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; lexerAlt();
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 458; Match(OR);
				State = 459; lexerAlt();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerAlt);
		int _la;
		try {
			State = 470;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case LPAREN:
			case DOT:
			case NOT:
			case STRING_LITERAL:
			case ACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; lexerElements();
				State = 467;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 466; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 472; lexerElement();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerElement);
		int _la;
		try {
			State = 493;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; labeledLexerElement();
				State = 479;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 478; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; lexerAtom();
				State = 483;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 482; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 485; lexerBlock();
				State = 487;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 486; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 489; Match(ACTION);
				State = 491;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 490; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 78, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; id();
			State = 496;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 499;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 497; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 498; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(LPAREN);
			State = 502; lexerAltList();
			State = 503; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(RARROW);
			State = 506; lexerCommand();
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 507; Match(COMMA);
				State = 508; lexerCommand();
				}
				}
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommand);
		try {
			State = 520;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514; lexerCommandName();
				State = 515; Match(LPAREN);
				State = 516; lexerCommandExpr();
				State = 517; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommandName);
		try {
			State = 524;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_lexerCommandExpr);
		try {
			State = 528;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; id();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 90, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; alternative();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 531; Match(OR);
				State = 532; alternative();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AnnotatedElementContext[] annotatedElement() {
			return GetRuleContexts<AnnotatedElementContext>();
		}
		public AnnotatedElementContext annotatedElement(int i) {
			return GetRuleContext<AnnotatedElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 92, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 538; elementOptions();
				}
			}

			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LPAREN) | (1L << DOT) | (1L << AT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0)) {
				{
				{
				State = 541; annotatedElement();
				}
				}
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedElementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedElementContext annotatedElement() {
		AnnotatedElementContext _localctx = new AnnotatedElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_annotatedElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 547; annotation();
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 553; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_element);
		int _la;
		try {
			State = 570;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555; labeledElement();
				State = 558;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 556; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case AT:
				case POUND:
				case NOT:
				case LBRACE:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560; atom();
				State = 563;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 561; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case AT:
				case POUND:
				case NOT:
				case LBRACE:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 565; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 566; Match(ACTION);
				State = 568;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 567; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 98, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; id();
			State = 573;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 576;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 574; atom();
				}
				break;
			case LPAREN:
				{
				State = 575; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 100, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; block();
			State = 580;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 579; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(AnnotatedAntlr4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(AnnotatedAntlr4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(AnnotatedAntlr4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(AnnotatedAntlr4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 104, RULE_ebnfSuffix);
		int _la;
		try {
			State = 596;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584; Match(QUESTION);
				State = 586;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 585; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588; Match(STAR);
				State = 590;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 589; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592; Match(PLUS);
				State = 594;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 593; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_lexerAtom);
		int _la;
		try {
			State = 607;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 599; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 600; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 601; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 602; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 603; Match(DOT);
				State = 605;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 604; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 108, RULE_atom);
		int _la;
		try {
			State = 617;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 612; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 613; Match(DOT);
				State = 615;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 614; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(AnnotatedAntlr4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 110, RULE_notSet);
		try {
			State = 623;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619; Match(NOT);
				State = 620; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621; Match(NOT);
				State = 622; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 112, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(LPAREN);
			State = 626; setElement();
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 627; Match(OR);
				State = 628; setElement();
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 634; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 114, RULE_setElement);
		int _la;
		try {
			State = 646;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 636; Match(TOKEN_REF);
				State = 638;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 637; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 640; Match(STRING_LITERAL);
				State = 642;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 641; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 644; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 645; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 116, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; Match(LPAREN);
			State = 659;
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 650;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 649; optionsSpec();
					}
				}

				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 652; ruleAction();
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 658; Match(COLON);
				}
				break;
			}
			State = 661; altList();
			State = 662; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 118, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(RULE_REF);
			State = 666;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 665; Match(ARG_ACTION);
				}
			}

			State = 669;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 668; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(AnnotatedAntlr4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(AnnotatedAntlr4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 120, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(STRING_LITERAL);
			State = 672; Match(RANGE);
			State = 673; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 122, RULE_terminal);
		int _la;
		try {
			State = 683;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675; Match(TOKEN_REF);
				State = 677;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 676; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 679; Match(STRING_LITERAL);
				State = 681;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 680; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(AnnotatedAntlr4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(AnnotatedAntlr4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 124, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(LT);
			State = 686; elementOption();
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 687; Match(COMMA);
				State = 688; elementOption();
				}
				}
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 694; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 126, RULE_elementOption);
		try {
			State = 703;
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697; id();
				State = 698; Match(ASSIGN);
				State = 701;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 699; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 700; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 128, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; Match(AT);
			State = 708; qualifiedName();
			State = 710;
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 709; annotationBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionValueListContext expressionValueList() {
			return GetRuleContext<ExpressionValueListContext>(0);
		}
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(LPAREN);
			State = 716;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 713; expression();
				}
				break;
			case 2:
				{
				State = 714; expressionValueList();
				}
				break;
			case 3:
				{
				State = 715; annotationAttributeList();
				}
				break;
			}
			State = 718; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 134, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; annotationAttribute();
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 721; Match(COMMA);
				State = 722; annotationAttribute();
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionValueListContext expressionValueList() {
			return GetRuleContext<ExpressionValueListContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 136, RULE_annotationAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; identifier();
			State = 729; Match(ASSIGN);
			State = 732;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case TRUE:
			case FALSE:
			case NULL:
			case ID:
			case INTEGER_LITERAL:
			case SCIENTIFIC_LITERAL:
			case STRING_LITERAL:
				{
				State = 730; expression();
				}
				break;
			case LBRACE:
				{
				State = 731; expressionValueList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionValueListContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(AnnotatedAntlr4Parser.LBRACE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ExpressionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpressionValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpressionValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionValueListContext expressionValueList() {
		ExpressionValueListContext _localctx = new ExpressionValueListContext(Context, State);
		EnterRule(_localctx, 138, RULE_expressionValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(LBRACE);
			State = 735; expression();
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 736; Match(COMMA);
				State = 737; expression();
				}
				}
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 743; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; identifier();
			State = 750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 746; Match(DOT);
					State = 747; identifier();
					}
					} 
				}
				State = 752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ID() { return GetToken(AnnotatedAntlr4Parser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_identifier);
		try {
			State = 755;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 753; id();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 754; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(AnnotatedAntlr4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AnnotatedAntlr4Parser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 144, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(AnnotatedAntlr4Parser.NULL, 0); }
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(Context, State);
		EnterRule(_localctx, 146, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x41\x2FC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x3\x2\x5\x2\x98\n\x2"+
		"\x3\x2\a\x2\x9B\n\x2\f\x2\xE\x2\x9E\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2"+
		"\xA4\n\x2\f\x2\xE\x2\xA7\v\x2\x3\x2\x3\x2\a\x2\xAB\n\x2\f\x2\xE\x2\xAE"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xB7\n\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x5\x4\xBD\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\xC3\n\x5\f"+
		"\x5\xE\x5\xC6\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\a\a\xD1\n\a\f\a\xE\a\xD4\v\a\x3\a\x3\a\x3\a\x5\a\xD9\n\a\x3\b\x3\b\x3"+
		"\b\x3\b\a\b\xDF\n\b\f\b\xE\b\xE2\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x5\t\xEB\n\t\x3\n\x3\n\x3\n\x3\n\a\n\xF1\n\n\f\n\xE\n\xF4\v\n\x3\n"+
		"\x5\n\xF7\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\v\xFF\n\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x5\f\x107\n\f\x3\r\a\r\x10A\n\r\f\r\xE\r\x10D\v\r\x3"+
		"\r\x3\r\x3\r\x3\r\a\r\x113\n\r\f\r\xE\r\x116\v\r\x3\xE\a\xE\x119\n\xE"+
		"\f\xE\xE\xE\x11C\v\xE\x3\xF\x3\xF\x5\xF\x120\n\xF\x3\x10\x5\x10\x123\n"+
		"\x10\x3\x10\a\x10\x126\n\x10\f\x10\xE\x10\x129\v\x10\x3\x10\x5\x10\x12C"+
		"\n\x10\x3\x10\x3\x10\x5\x10\x130\n\x10\x3\x10\x5\x10\x133\n\x10\x3\x10"+
		"\x5\x10\x136\n\x10\x3\x10\x5\x10\x139\n\x10\x3\x10\a\x10\x13C\n\x10\f"+
		"\x10\xE\x10\x13F\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\a\x11"+
		"\x147\n\x11\f\x11\xE\x11\x14A\v\x11\x3\x11\x5\x11\x14D\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x158\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x161\n\x16\f\x16"+
		"\xE\x16\x164\v\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x6\x19\x16E\n\x19\r\x19\xE\x19\x16F\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\a\x1C\x179\n\x1C\f\x1C\xE\x1C\x17C\v\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\a\x1D\x182\n\x1D\f\x1D\xE\x1D\x185\v\x1D\x5\x1D\x187"+
		"\n\x1D\x3\x1D\x5\x1D\x18A\n\x1D\x3\x1E\x3\x1E\a\x1E\x18E\n\x1E\f\x1E\xE"+
		"\x1E\x191\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x198\n\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \a \x1A2\n \f \xE \x1A5\v"+
		" \x3!\x3!\x3!\x3!\x5!\x1AB\n!\x3!\x3!\x3!\x5!\x1B0\n!\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x5\"\x1B7\n\"\x3#\x5#\x1BA\n#\x3#\a#\x1BD\n#\f#\xE#\x1C0\v#\x3"+
		"#\x5#\x1C3\n#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\a%\x1CF\n%\f%\xE"+
		"%\x1D2\v%\x3&\x3&\x5&\x1D6\n&\x3&\x5&\x1D9\n&\x3\'\x6\'\x1DC\n\'\r\'\xE"+
		"\'\x1DD\x3(\x3(\x5(\x1E2\n(\x3(\x3(\x5(\x1E6\n(\x3(\x3(\x5(\x1EA\n(\x3"+
		"(\x3(\x5(\x1EE\n(\x5(\x1F0\n(\x3)\x3)\x3)\x3)\x5)\x1F6\n)\x3*\x3*\x3*"+
		"\x3*\x3+\x3+\x3+\x3+\a+\x200\n+\f+\xE+\x203\v+\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x5,\x20B\n,\x3-\x3-\x5-\x20F\n-\x3.\x3.\x5.\x213\n.\x3/\x3/\x3/\a/\x218"+
		"\n/\f/\xE/\x21B\v/\x3\x30\x5\x30\x21E\n\x30\x3\x30\a\x30\x221\n\x30\f"+
		"\x30\xE\x30\x224\v\x30\x3\x31\a\x31\x227\n\x31\f\x31\xE\x31\x22A\v\x31"+
		"\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x5\x32\x231\n\x32\x3\x32\x3\x32\x3"+
		"\x32\x5\x32\x236\n\x32\x3\x32\x3\x32\x3\x32\x5\x32\x23B\n\x32\x5\x32\x23D"+
		"\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x243\n\x33\x3\x34\x3\x34\x5"+
		"\x34\x247\n\x34\x3\x35\x3\x35\x3\x36\x3\x36\x5\x36\x24D\n\x36\x3\x36\x3"+
		"\x36\x5\x36\x251\n\x36\x3\x36\x3\x36\x5\x36\x255\n\x36\x5\x36\x257\n\x36"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x260\n\x37\x5"+
		"\x37\x262\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x26A"+
		"\n\x38\x5\x38\x26C\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x272\n\x39"+
		"\x3:\x3:\x3:\x3:\a:\x278\n:\f:\xE:\x27B\v:\x3:\x3:\x3;\x3;\x5;\x281\n"+
		";\x3;\x3;\x5;\x285\n;\x3;\x3;\x5;\x289\n;\x3<\x3<\x5<\x28D\n<\x3<\a<\x290"+
		"\n<\f<\xE<\x293\v<\x3<\x5<\x296\n<\x3<\x3<\x3<\x3=\x3=\x5=\x29D\n=\x3"+
		"=\x5=\x2A0\n=\x3>\x3>\x3>\x3>\x3?\x3?\x5?\x2A8\n?\x3?\x3?\x5?\x2AC\n?"+
		"\x5?\x2AE\n?\x3@\x3@\x3@\x3@\a@\x2B4\n@\f@\xE@\x2B7\v@\x3@\x3@\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C0\n\x41\x5\x41\x2C2\n\x41\x3\x42"+
		"\x3\x42\x3\x43\x3\x43\x3\x43\x5\x43\x2C9\n\x43\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x5\x44\x2CF\n\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\a\x45\x2D6\n"+
		"\x45\f\x45\xE\x45\x2D9\v\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2DF\n"+
		"\x46\x3G\x3G\x3G\x3G\aG\x2E5\nG\fG\xEG\x2E8\vG\x3G\x3G\x3H\x3H\x3H\aH"+
		"\x2EF\nH\fH\xEH\x2F2\vH\x3I\x3I\x5I\x2F6\nI\x3J\x3J\x3K\x3K\x3K\x2\x2"+
		"L\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34"+
		"\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82"+
		"\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x2\x6\x4\x2\v\v\xF\x11\x4\x2$$(("+
		"\x3\x2\x3\x4\x3\x2\x18\x19\x32E\x2\x97\x3\x2\x2\x2\x4\xB6\x3\x2\x2\x2"+
		"\x6\xBC\x3\x2\x2\x2\b\xBE\x3\x2\x2\x2\n\xC9\x3\x2\x2\x2\f\xD8\x3\x2\x2"+
		"\x2\xE\xDA\x3\x2\x2\x2\x10\xEA\x3\x2\x2\x2\x12\xEC\x3\x2\x2\x2\x14\xFA"+
		"\x3\x2\x2\x2\x16\x106\x3\x2\x2\x2\x18\x10B\x3\x2\x2\x2\x1A\x11A\x3\x2"+
		"\x2\x2\x1C\x11F\x3\x2\x2\x2\x1E\x122\x3\x2\x2\x2 \x148\x3\x2\x2\x2\"\x14E"+
		"\x3\x2\x2\x2$\x152\x3\x2\x2\x2&\x157\x3\x2\x2\x2(\x159\x3\x2\x2\x2*\x15C"+
		"\x3\x2\x2\x2,\x165\x3\x2\x2\x2.\x168\x3\x2\x2\x2\x30\x16D\x3\x2\x2\x2"+
		"\x32\x171\x3\x2\x2\x2\x34\x173\x3\x2\x2\x2\x36\x175\x3\x2\x2\x2\x38\x17D"+
		"\x3\x2\x2\x2:\x18B\x3\x2\x2\x2<\x197\x3\x2\x2\x2>\x19E\x3\x2\x2\x2@\x1AF"+
		"\x3\x2\x2\x2\x42\x1B6\x3\x2\x2\x2\x44\x1B9\x3\x2\x2\x2\x46\x1C9\x3\x2"+
		"\x2\x2H\x1CB\x3\x2\x2\x2J\x1D8\x3\x2\x2\x2L\x1DB\x3\x2\x2\x2N\x1EF\x3"+
		"\x2\x2\x2P\x1F1\x3\x2\x2\x2R\x1F7\x3\x2\x2\x2T\x1FB\x3\x2\x2\x2V\x20A"+
		"\x3\x2\x2\x2X\x20E\x3\x2\x2\x2Z\x212\x3\x2\x2\x2\\\x214\x3\x2\x2\x2^\x21D"+
		"\x3\x2\x2\x2`\x228\x3\x2\x2\x2\x62\x23C\x3\x2\x2\x2\x64\x23E\x3\x2\x2"+
		"\x2\x66\x244\x3\x2\x2\x2h\x248\x3\x2\x2\x2j\x256\x3\x2\x2\x2l\x261\x3"+
		"\x2\x2\x2n\x26B\x3\x2\x2\x2p\x271\x3\x2\x2\x2r\x273\x3\x2\x2\x2t\x288"+
		"\x3\x2\x2\x2v\x28A\x3\x2\x2\x2x\x29A\x3\x2\x2\x2z\x2A1\x3\x2\x2\x2|\x2AD"+
		"\x3\x2\x2\x2~\x2AF\x3\x2\x2\x2\x80\x2C1\x3\x2\x2\x2\x82\x2C3\x3\x2\x2"+
		"\x2\x84\x2C5\x3\x2\x2\x2\x86\x2CA\x3\x2\x2\x2\x88\x2D2\x3\x2\x2\x2\x8A"+
		"\x2DA\x3\x2\x2\x2\x8C\x2E0\x3\x2\x2\x2\x8E\x2EB\x3\x2\x2\x2\x90\x2F5\x3"+
		"\x2\x2\x2\x92\x2F7\x3\x2\x2\x2\x94\x2F9\x3\x2\x2\x2\x96\x98\a@\x2\x2\x97"+
		"\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9C\x3\x2\x2\x2\x99\x9B\x5\x84"+
		"\x43\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C"+
		"\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA0\x5\x4"+
		"\x3\x2\xA0\xA1\x5\x82\x42\x2\xA1\xA5\a\x1E\x2\x2\xA2\xA4\x5\x6\x4\x2\xA3"+
		"\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2"+
		"\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xAC\x5\x1A\xE\x2\xA9"+
		"\xAB\x5\x18\r\x2\xAA\xA9\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2"+
		"\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF"+
		"\xB0\a\x2\x2\x3\xB0\x3\x3\x2\x2\x2\xB1\xB2\a\f\x2\x2\xB2\xB7\a\xE\x2\x2"+
		"\xB3\xB4\a\r\x2\x2\xB4\xB7\a\xE\x2\x2\xB5\xB7\a\xE\x2\x2\xB6\xB1\x3\x2"+
		"\x2\x2\xB6\xB3\x3\x2\x2\x2\xB6\xB5\x3\x2\x2\x2\xB7\x5\x3\x2\x2\x2\xB8"+
		"\xBD\x5\b\x5\x2\xB9\xBD\x5\xE\b\x2\xBA\xBD\x5\x12\n\x2\xBB\xBD\x5\x14"+
		"\v\x2\xBC\xB8\x3\x2\x2\x2\xBC\xB9\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC"+
		"\xBB\x3\x2\x2\x2\xBD\a\x3\x2\x2\x2\xBE\xC4\a\b\x2\x2\xBF\xC0\x5\n\x6\x2"+
		"\xC0\xC1\a\x1E\x2\x2\xC1\xC3\x3\x2\x2\x2\xC2\xBF\x3\x2\x2\x2\xC3\xC6\x3"+
		"\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7\x3\x2\x2\x2"+
		"\xC6\xC4\x3\x2\x2\x2\xC7\xC8\a\x31\x2\x2\xC8\t\x3\x2\x2\x2\xC9\xCA\x5"+
		"\x82\x42\x2\xCA\xCB\a$\x2\x2\xCB\xCC\x5\f\a\x2\xCC\v\x3\x2\x2\x2\xCD\xD2"+
		"\x5\x82\x42\x2\xCE\xCF\a+\x2\x2\xCF\xD1\x5\x82\x42\x2\xD0\xCE\x3\x2\x2"+
		"\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD9"+
		"\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD9\a\x38\x2\x2\xD6\xD9\a;\x2\x2"+
		"\xD7\xD9\a\x35\x2\x2\xD8\xCD\x3\x2\x2\x2\xD8\xD5\x3\x2\x2\x2\xD8\xD6\x3"+
		"\x2\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\r\x3\x2\x2\x2\xDA\xDB\a\n\x2\x2\xDB"+
		"\xE0\x5\x10\t\x2\xDC\xDD\a\x1D\x2\x2\xDD\xDF\x5\x10\t\x2\xDE\xDC\x3\x2"+
		"\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1"+
		"\xE3\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE4\a\x1E\x2\x2\xE4\xF\x3\x2"+
		"\x2\x2\xE5\xE6\x5\x82\x42\x2\xE6\xE7\a$\x2\x2\xE7\xE8\x5\x82\x42\x2\xE8"+
		"\xEB\x3\x2\x2\x2\xE9\xEB\x5\x82\x42\x2\xEA\xE5\x3\x2\x2\x2\xEA\xE9\x3"+
		"\x2\x2\x2\xEB\x11\x3\x2\x2\x2\xEC\xED\a\t\x2\x2\xED\xF2\x5\x82\x42\x2"+
		"\xEE\xEF\a\x1D\x2\x2\xEF\xF1\x5\x82\x42\x2\xF0\xEE\x3\x2\x2\x2\xF1\xF4"+
		"\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF6\x3\x2\x2"+
		"\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF7\a\x1D\x2\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7"+
		"\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\a\x31\x2\x2\xF9\x13\x3\x2\x2"+
		"\x2\xFA\xFE\a-\x2\x2\xFB\xFC\x5\x16\f\x2\xFC\xFD\a\x1C\x2\x2\xFD\xFF\x3"+
		"\x2\x2\x2\xFE\xFB\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2"+
		"\x100\x101\x5\x82\x42\x2\x101\x102\a;\x2\x2\x102\x15\x3\x2\x2\x2\x103"+
		"\x107\x5\x82\x42\x2\x104\x107\a\f\x2\x2\x105\x107\a\r\x2\x2\x106\x103"+
		"\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x105\x3\x2\x2\x2\x107\x17\x3\x2"+
		"\x2\x2\x108\x10A\x5\x84\x43\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3\x2\x2"+
		"\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2"+
		"\x10D\x10B\x3\x2\x2\x2\x10E\x10F\a\x17\x2\x2\x10F\x110\x5\x82\x42\x2\x110"+
		"\x114\a\x1E\x2\x2\x111\x113\x5\x44#\x2\x112\x111\x3\x2\x2\x2\x113\x116"+
		"\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x19\x3\x2"+
		"\x2\x2\x116\x114\x3\x2\x2\x2\x117\x119\x5\x1C\xF\x2\x118\x117\x3\x2\x2"+
		"\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2"+
		"\x11B\x1B\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x120\x5\x1E\x10\x2\x11E"+
		"\x120\x5\x44#\x2\x11F\x11D\x3\x2\x2\x2\x11F\x11E\x3\x2\x2\x2\x120\x1D"+
		"\x3\x2\x2\x2\x121\x123\a@\x2\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2"+
		"\x2\x2\x123\x127\x3\x2\x2\x2\x124\x126\x5\x84\x43\x2\x125\x124\x3\x2\x2"+
		"\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2"+
		"\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A\x12C\x5\x30\x19\x2\x12B"+
		"\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12F"+
		"\a\x4\x2\x2\x12E\x130\a=\x2\x2\x12F\x12E\x3\x2\x2\x2\x12F\x130\x3\x2\x2"+
		"\x2\x130\x132\x3\x2\x2\x2\x131\x133\x5(\x15\x2\x132\x131\x3\x2\x2\x2\x132"+
		"\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x136\x5*\x16\x2\x135\x134"+
		"\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x139\x5"+
		",\x17\x2\x138\x137\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13D\x3\x2\x2"+
		"\x2\x13A\x13C\x5&\x14\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D"+
		"\x13B\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x140\x3\x2\x2\x2\x13F\x13D"+
		"\x3\x2\x2\x2\x140\x141\a\x1B\x2\x2\x141\x142\x5\x34\x1B\x2\x142\x143\a"+
		"\x1E\x2\x2\x143\x144\x5 \x11\x2\x144\x1F\x3\x2\x2\x2\x145\x147\x5\"\x12"+
		"\x2\x146\x145\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2"+
		"\x148\x149\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B"+
		"\x14D\x5$\x13\x2\x14C\x14B\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D!\x3"+
		"\x2\x2\x2\x14E\x14F\a\x15\x2\x2\x14F\x150\a=\x2\x2\x150\x151\a;\x2\x2"+
		"\x151#\x3\x2\x2\x2\x152\x153\a\x16\x2\x2\x153\x154\a;\x2\x2\x154%\x3\x2"+
		"\x2\x2\x155\x158\x5\b\x5\x2\x156\x158\x5.\x18\x2\x157\x155\x3\x2\x2\x2"+
		"\x157\x156\x3\x2\x2\x2\x158\'\x3\x2\x2\x2\x159\x15A\a\x12\x2\x2\x15A\x15B"+
		"\a=\x2\x2\x15B)\x3\x2\x2\x2\x15C\x15D\a\x14\x2\x2\x15D\x162\x5\x82\x42"+
		"\x2\x15E\x15F\a\x1D\x2\x2\x15F\x161\x5\x82\x42\x2\x160\x15E\x3\x2\x2\x2"+
		"\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163"+
		"+\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x165\x166\a\x13\x2\x2\x166\x167\a"+
		"=\x2\x2\x167-\x3\x2\x2\x2\x168\x169\a-\x2\x2\x169\x16A\x5\x82\x42\x2\x16A"+
		"\x16B\a;\x2\x2\x16B/\x3\x2\x2\x2\x16C\x16E\x5\x32\x1A\x2\x16D\x16C\x3"+
		"\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2"+
		"\x2\x2\x170\x31\x3\x2\x2\x2\x171\x172\t\x2\x2\x2\x172\x33\x3\x2\x2\x2"+
		"\x173\x174\x5\x36\x1C\x2\x174\x35\x3\x2\x2\x2\x175\x17A\x5\x38\x1D\x2"+
		"\x176\x177\a)\x2\x2\x177\x179\x5\x38\x1D\x2\x178\x176\x3\x2\x2\x2\x179"+
		"\x17C\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x37"+
		"\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D\x186\x5^\x30\x2\x17E\x17F\a.\x2"+
		"\x2\x17F\x183\x5\x82\x42\x2\x180\x182\x5\x84\x43\x2\x181\x180\x3\x2\x2"+
		"\x2\x182\x185\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2"+
		"\x184\x187\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x186\x17E\x3\x2\x2\x2\x186"+
		"\x187\x3\x2\x2\x2\x187\x189\x3\x2\x2\x2\x188\x18A\x5:\x1E\x2\x189\x188"+
		"\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x39\x3\x2\x2\x2\x18B\x18F\a\x30"+
		"\x2\x2\x18C\x18E\x5<\x1F\x2\x18D\x18C\x3\x2\x2\x2\x18E\x191\x3\x2\x2\x2"+
		"\x18F\x18D\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x192\x3\x2\x2\x2\x191"+
		"\x18F\x3\x2\x2\x2\x192\x193\a\x31\x2\x2\x193;\x3\x2\x2\x2\x194\x195\x5"+
		"\x82\x42\x2\x195\x196\a+\x2\x2\x196\x198\x3\x2\x2\x2\x197\x194\x3\x2\x2"+
		"\x2\x197\x198\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19A\x5\x82\x42\x2"+
		"\x19A\x19B\a$\x2\x2\x19B\x19C\x5@!\x2\x19C\x19D\a\x1E\x2\x2\x19D=\x3\x2"+
		"\x2\x2\x19E\x1A3\x5@!\x2\x19F\x1A0\a\x1D\x2\x2\x1A0\x1A2\x5@!\x2\x1A1"+
		"\x19F\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4"+
		"\x3\x2\x2\x2\x1A4?\x3\x2\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A6\x1B0\x5\x42"+
		"\"\x2\x1A7\x1A8\x5\x8EH\x2\x1A8\x1AA\a\x1F\x2\x2\x1A9\x1AB\x5> \x2\x1AA"+
		"\x1A9\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AD"+
		"\a \x2\x2\x1AD\x1B0\x3\x2\x2\x2\x1AE\x1B0\x5\x8EH\x2\x1AF\x1A6\x3\x2\x2"+
		"\x2\x1AF\x1A7\x3\x2\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1B0\x41\x3\x2\x2\x2\x1B1"+
		"\x1B7\x5\x94K\x2\x1B2\x1B7\x5\x92J\x2\x1B3\x1B7\a\x35\x2\x2\x1B4\x1B7"+
		"\a\x37\x2\x2\x1B5\x1B7\a\x38\x2\x2\x1B6\x1B1\x3\x2\x2\x2\x1B6\x1B2\x3"+
		"\x2\x2\x2\x1B6\x1B3\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B5\x3\x2"+
		"\x2\x2\x1B7\x43\x3\x2\x2\x2\x1B8\x1BA\a@\x2\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BA\x1BE\x3\x2\x2\x2\x1BB\x1BD\x5\x84\x43\x2\x1BC\x1BB"+
		"\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BF\x3"+
		"\x2\x2\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C1\x1C3\a\v\x2"+
		"\x2\x1C2\x1C1\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2"+
		"\x1C4\x1C5\a\x3\x2\x2\x1C5\x1C6\a\x1B\x2\x2\x1C6\x1C7\x5\x46$\x2\x1C7"+
		"\x1C8\a\x1E\x2\x2\x1C8\x45\x3\x2\x2\x2\x1C9\x1CA\x5H%\x2\x1CAG\x3\x2\x2"+
		"\x2\x1CB\x1D0\x5J&\x2\x1CC\x1CD\a)\x2\x2\x1CD\x1CF\x5J&\x2\x1CE\x1CC\x3"+
		"\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2"+
		"\x2\x2\x1D1I\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D5\x5L\'\x2\x1D4"+
		"\x1D6\x5T+\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D9\x3"+
		"\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D3\x3\x2\x2\x2\x1D8\x1D7\x3\x2"+
		"\x2\x2\x1D9K\x3\x2\x2\x2\x1DA\x1DC\x5N(\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC"+
		"\x1DD\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DEM\x3"+
		"\x2\x2\x2\x1DF\x1E1\x5P)\x2\x1E0\x1E2\x5j\x36\x2\x1E1\x1E0\x3\x2\x2\x2"+
		"\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1F0\x3\x2\x2\x2\x1E3\x1E5\x5l\x37\x2\x1E4"+
		"\x1E6\x5j\x36\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1F0"+
		"\x3\x2\x2\x2\x1E7\x1E9\x5R*\x2\x1E8\x1EA\x5j\x36\x2\x1E9\x1E8\x3\x2\x2"+
		"\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1F0\x3\x2\x2\x2\x1EB\x1ED\a;\x2\x2\x1EC"+
		"\x1EE\a%\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1F0\x3"+
		"\x2\x2\x2\x1EF\x1DF\x3\x2\x2\x2\x1EF\x1E3\x3\x2\x2\x2\x1EF\x1E7\x3\x2"+
		"\x2\x2\x1EF\x1EB\x3\x2\x2\x2\x1F0O\x3\x2\x2\x2\x1F1\x1F2\x5\x82\x42\x2"+
		"\x1F2\x1F5\t\x3\x2\x2\x1F3\x1F6\x5l\x37\x2\x1F4\x1F6\x5v<\x2\x1F5\x1F3"+
		"\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6Q\x3\x2\x2\x2\x1F7\x1F8\a\x1F\x2"+
		"\x2\x1F8\x1F9\x5H%\x2\x1F9\x1FA\a \x2\x2\x1FAS\x3\x2\x2\x2\x1FB\x1FC\a"+
		"!\x2\x2\x1FC\x201\x5V,\x2\x1FD\x1FE\a\x1D\x2\x2\x1FE\x200\x5V,\x2\x1FF"+
		"\x1FD\x3\x2\x2\x2\x200\x203\x3\x2\x2\x2\x201\x1FF\x3\x2\x2\x2\x201\x202"+
		"\x3\x2\x2\x2\x202U\x3\x2\x2\x2\x203\x201\x3\x2\x2\x2\x204\x205\x5X-\x2"+
		"\x205\x206\a\x1F\x2\x2\x206\x207\x5Z.\x2\x207\x208\a \x2\x2\x208\x20B"+
		"\x3\x2\x2\x2\x209\x20B\x5X-\x2\x20A\x204\x3\x2\x2\x2\x20A\x209\x3\x2\x2"+
		"\x2\x20BW\x3\x2\x2\x2\x20C\x20F\x5\x82\x42\x2\x20D\x20F\a\x17\x2\x2\x20E"+
		"\x20C\x3\x2\x2\x2\x20E\x20D\x3\x2\x2\x2\x20FY\x3\x2\x2\x2\x210\x213\x5"+
		"\x82\x42\x2\x211\x213\a\x35\x2\x2\x212\x210\x3\x2\x2\x2\x212\x211\x3\x2"+
		"\x2\x2\x213[\x3\x2\x2\x2\x214\x219\x5^\x30\x2\x215\x216\a)\x2\x2\x216"+
		"\x218\x5^\x30\x2\x217\x215\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2\x219\x217"+
		"\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A]\x3\x2\x2\x2\x21B\x219\x3\x2\x2"+
		"\x2\x21C\x21E\x5~@\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E"+
		"\x222\x3\x2\x2\x2\x21F\x221\x5`\x31\x2\x220\x21F\x3\x2\x2\x2\x221\x224"+
		"\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223_\x3\x2\x2"+
		"\x2\x224\x222\x3\x2\x2\x2\x225\x227\x5\x84\x43\x2\x226\x225\x3\x2\x2\x2"+
		"\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229"+
		"\x22B\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x22C\x5\x62\x32\x2\x22C\x61"+
		"\x3\x2\x2\x2\x22D\x230\x5\x64\x33\x2\x22E\x231\x5j\x36\x2\x22F\x231\x3"+
		"\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x230\x22F\x3\x2\x2\x2\x231\x23D\x3\x2"+
		"\x2\x2\x232\x235\x5n\x38\x2\x233\x236\x5j\x36\x2\x234\x236\x3\x2\x2\x2"+
		"\x235\x233\x3\x2\x2\x2\x235\x234\x3\x2\x2\x2\x236\x23D\x3\x2\x2\x2\x237"+
		"\x23D\x5\x66\x34\x2\x238\x23A\a;\x2\x2\x239\x23B\a%\x2\x2\x23A\x239\x3"+
		"\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23D\x3\x2\x2\x2\x23C\x22D\x3\x2"+
		"\x2\x2\x23C\x232\x3\x2\x2\x2\x23C\x237\x3\x2\x2\x2\x23C\x238\x3\x2\x2"+
		"\x2\x23D\x63\x3\x2\x2\x2\x23E\x23F\x5\x82\x42\x2\x23F\x242\t\x3\x2\x2"+
		"\x240\x243\x5n\x38\x2\x241\x243\x5v<\x2\x242\x240\x3\x2\x2\x2\x242\x241"+
		"\x3\x2\x2\x2\x243\x65\x3\x2\x2\x2\x244\x246\x5v<\x2\x245\x247\x5h\x35"+
		"\x2\x246\x245\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247g\x3\x2\x2\x2\x248"+
		"\x249\x5j\x36\x2\x249i\x3\x2\x2\x2\x24A\x24C\a%\x2\x2\x24B\x24D\a%\x2"+
		"\x2\x24C\x24B\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x257\x3\x2\x2\x2"+
		"\x24E\x250\a&\x2\x2\x24F\x251\a%\x2\x2\x250\x24F\x3\x2\x2\x2\x250\x251"+
		"\x3\x2\x2\x2\x251\x257\x3\x2\x2\x2\x252\x254\a\'\x2\x2\x253\x255\a%\x2"+
		"\x2\x254\x253\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255\x257\x3\x2\x2\x2"+
		"\x256\x24A\x3\x2\x2\x2\x256\x24E\x3\x2\x2\x2\x256\x252\x3\x2\x2\x2\x257"+
		"k\x3\x2\x2\x2\x258\x262\x5z>\x2\x259\x262\x5|?\x2\x25A\x262\a\x4\x2\x2"+
		"\x25B\x262\x5p\x39\x2\x25C\x262\a\x5\x2\x2\x25D\x25F\a+\x2\x2\x25E\x260"+
		"\x5~@\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x262\x3\x2\x2"+
		"\x2\x261\x258\x3\x2\x2\x2\x261\x259\x3\x2\x2\x2\x261\x25A\x3\x2\x2\x2"+
		"\x261\x25B\x3\x2\x2\x2\x261\x25C\x3\x2\x2\x2\x261\x25D\x3\x2\x2\x2\x262"+
		"m\x3\x2\x2\x2\x263\x26C\x5z>\x2\x264\x26C\x5|?\x2\x265\x26C\x5x=\x2\x266"+
		"\x26C\x5p\x39\x2\x267\x269\a+\x2\x2\x268\x26A\x5~@\x2\x269\x268\x3\x2"+
		"\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26C\x3\x2\x2\x2\x26B\x263\x3\x2\x2"+
		"\x2\x26B\x264\x3\x2\x2\x2\x26B\x265\x3\x2\x2\x2\x26B\x266\x3\x2\x2\x2"+
		"\x26B\x267\x3\x2\x2\x2\x26Co\x3\x2\x2\x2\x26D\x26E\a/\x2\x2\x26E\x272"+
		"\x5t;\x2\x26F\x270\a/\x2\x2\x270\x272\x5r:\x2\x271\x26D\x3\x2\x2\x2\x271"+
		"\x26F\x3\x2\x2\x2\x272q\x3\x2\x2\x2\x273\x274\a\x1F\x2\x2\x274\x279\x5"+
		"t;\x2\x275\x276\a)\x2\x2\x276\x278\x5t;\x2\x277\x275\x3\x2\x2\x2\x278"+
		"\x27B\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27C"+
		"\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27C\x27D\a \x2\x2\x27Ds\x3\x2\x2\x2"+
		"\x27E\x280\a\x3\x2\x2\x27F\x281\x5~@\x2\x280\x27F\x3\x2\x2\x2\x280\x281"+
		"\x3\x2\x2\x2\x281\x289\x3\x2\x2\x2\x282\x284\a\x38\x2\x2\x283\x285\x5"+
		"~@\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x289\x3\x2\x2\x2"+
		"\x286\x289\x5z>\x2\x287\x289\a\x5\x2\x2\x288\x27E\x3\x2\x2\x2\x288\x282"+
		"\x3\x2\x2\x2\x288\x286\x3\x2\x2\x2\x288\x287\x3\x2\x2\x2\x289u\x3\x2\x2"+
		"\x2\x28A\x295\a\x1F\x2\x2\x28B\x28D\x5\b\x5\x2\x28C\x28B\x3\x2\x2\x2\x28C"+
		"\x28D\x3\x2\x2\x2\x28D\x291\x3\x2\x2\x2\x28E\x290\x5.\x18\x2\x28F\x28E"+
		"\x3\x2\x2\x2\x290\x293\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x291\x292\x3"+
		"\x2\x2\x2\x292\x294\x3\x2\x2\x2\x293\x291\x3\x2\x2\x2\x294\x296\a\x1B"+
		"\x2\x2\x295\x28C\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x297\x3\x2\x2"+
		"\x2\x297\x298\x5\\/\x2\x298\x299\a \x2\x2\x299w\x3\x2\x2\x2\x29A\x29C"+
		"\a\x4\x2\x2\x29B\x29D\a=\x2\x2\x29C\x29B\x3\x2\x2\x2\x29C\x29D\x3\x2\x2"+
		"\x2\x29D\x29F\x3\x2\x2\x2\x29E\x2A0\x5~@\x2\x29F\x29E\x3\x2\x2\x2\x29F"+
		"\x2A0\x3\x2\x2\x2\x2A0y\x3\x2\x2\x2\x2A1\x2A2\a\x38\x2\x2\x2A2\x2A3\a"+
		",\x2\x2\x2A3\x2A4\a\x38\x2\x2\x2A4{\x3\x2\x2\x2\x2A5\x2A7\a\x3\x2\x2\x2A6"+
		"\x2A8\x5~@\x2\x2A7\x2A6\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AE\x3"+
		"\x2\x2\x2\x2A9\x2AB\a\x38\x2\x2\x2AA\x2AC\x5~@\x2\x2AB\x2AA\x3\x2\x2\x2"+
		"\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AE\x3\x2\x2\x2\x2AD\x2A5\x3\x2\x2\x2\x2AD"+
		"\x2A9\x3\x2\x2\x2\x2AE}\x3\x2\x2\x2\x2AF\x2B0\a\"\x2\x2\x2B0\x2B5\x5\x80"+
		"\x41\x2\x2B1\x2B2\a\x1D\x2\x2\x2B2\x2B4\x5\x80\x41\x2\x2B3\x2B1\x3\x2"+
		"\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B3\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2"+
		"\x2\x2B6\x2B8\x3\x2\x2\x2\x2B7\x2B5\x3\x2\x2\x2\x2B8\x2B9\a#\x2\x2\x2B9"+
		"\x7F\x3\x2\x2\x2\x2BA\x2C2\x5\x82\x42\x2\x2BB\x2BC\x5\x82\x42\x2\x2BC"+
		"\x2BF\a$\x2\x2\x2BD\x2C0\x5\x82\x42\x2\x2BE\x2C0\a\x38\x2\x2\x2BF\x2BD"+
		"\x3\x2\x2\x2\x2BF\x2BE\x3\x2\x2\x2\x2C0\x2C2\x3\x2\x2\x2\x2C1\x2BA\x3"+
		"\x2\x2\x2\x2C1\x2BB\x3\x2\x2\x2\x2C2\x81\x3\x2\x2\x2\x2C3\x2C4\t\x4\x2"+
		"\x2\x2C4\x83\x3\x2\x2\x2\x2C5\x2C6\a-\x2\x2\x2C6\x2C8\x5\x8EH\x2\x2C7"+
		"\x2C9\x5\x86\x44\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x85"+
		"\x3\x2\x2\x2\x2CA\x2CE\a\x1F\x2\x2\x2CB\x2CF\x5@!\x2\x2CC\x2CF\x5\x8C"+
		"G\x2\x2CD\x2CF\x5\x88\x45\x2\x2CE\x2CB\x3\x2\x2\x2\x2CE\x2CC\x3\x2\x2"+
		"\x2\x2CE\x2CD\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1\a \x2\x2\x2D1"+
		"\x87\x3\x2\x2\x2\x2D2\x2D7\x5\x8A\x46\x2\x2D3\x2D4\a\x1D\x2\x2\x2D4\x2D6"+
		"\x5\x8A\x46\x2\x2D5\x2D3\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5\x3"+
		"\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x89\x3\x2\x2\x2\x2D9\x2D7\x3\x2\x2"+
		"\x2\x2DA\x2DB\x5\x90I\x2\x2DB\x2DE\a$\x2\x2\x2DC\x2DF\x5@!\x2\x2DD\x2DF"+
		"\x5\x8CG\x2\x2DE\x2DC\x3\x2\x2\x2\x2DE\x2DD\x3\x2\x2\x2\x2DF\x8B\x3\x2"+
		"\x2\x2\x2E0\x2E1\a\x30\x2\x2\x2E1\x2E6\x5@!\x2\x2E2\x2E3\a\x1D\x2\x2\x2E3"+
		"\x2E5\x5@!\x2\x2E4\x2E2\x3\x2\x2\x2\x2E5\x2E8\x3\x2\x2\x2\x2E6\x2E4\x3"+
		"\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E9\x3\x2\x2\x2\x2E8\x2E6\x3\x2"+
		"\x2\x2\x2E9\x2EA\a\x31\x2\x2\x2EA\x8D\x3\x2\x2\x2\x2EB\x2F0\x5\x90I\x2"+
		"\x2EC\x2ED\a+\x2\x2\x2ED\x2EF\x5\x90I\x2\x2EE\x2EC\x3\x2\x2\x2\x2EF\x2F2"+
		"\x3\x2\x2\x2\x2F0\x2EE\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x8F\x3\x2"+
		"\x2\x2\x2F2\x2F0\x3\x2\x2\x2\x2F3\x2F6\x5\x82\x42\x2\x2F4\x2F6\a\x34\x2"+
		"\x2\x2F5\x2F3\x3\x2\x2\x2\x2F5\x2F4\x3\x2\x2\x2\x2F6\x91\x3\x2\x2\x2\x2F7"+
		"\x2F8\t\x5\x2\x2\x2F8\x93\x3\x2\x2\x2\x2F9\x2FA\a\x1A\x2\x2\x2FA\x95\x3"+
		"\x2\x2\x2\x66\x97\x9C\xA5\xAC\xB6\xBC\xC4\xD2\xD8\xE0\xEA\xF2\xF6\xFE"+
		"\x106\x10B\x114\x11A\x11F\x122\x127\x12B\x12F\x132\x135\x138\x13D\x148"+
		"\x14C\x157\x162\x16F\x17A\x183\x186\x189\x18F\x197\x1A3\x1AA\x1AF\x1B6"+
		"\x1B9\x1BE\x1C2\x1D0\x1D5\x1D8\x1DD\x1E1\x1E5\x1E9\x1ED\x1EF\x1F5\x201"+
		"\x20A\x20E\x212\x219\x21D\x222\x228\x230\x235\x23A\x23C\x242\x246\x24C"+
		"\x250\x254\x256\x25F\x261\x269\x26B\x271\x279\x280\x284\x288\x28C\x291"+
		"\x295\x29C\x29F\x2A7\x2AB\x2AD\x2B5\x2BF\x2C1\x2C8\x2CE\x2D7\x2DE\x2E6"+
		"\x2F0\x2F5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
