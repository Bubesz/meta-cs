//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnnotatedAntlr4Parser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AnnotatedAntlr4Parser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, BEGIN_ARG_ACTION=5, 
		OPTIONS=6, TOKENS=7, IMPORT=8, FRAGMENT=9, LEXER=10, PARSER=11, GRAMMAR=12, 
		PROTECTED=13, PUBLIC=14, PRIVATE=15, RETURNS=16, LOCALS=17, THROWS=18, 
		CATCH=19, FINALLY=20, MODE=21, TRUE=22, FALSE=23, NULL=24, COLON=25, COLONCOLON=26, 
		COMMA=27, SEMI=28, LPAREN=29, RPAREN=30, RARROW=31, DRARROW=32, LT=33, 
		GT=34, ASSIGN=35, QUESTION=36, STAR=37, PLUS=38, PLUS_ASSIGN=39, OR=40, 
		DOLLAR=41, DOT=42, RANGE=43, AT=44, POUND=45, NOT=46, LBRACE=47, RBRACE=48, 
		LBRACKET=49, RBRACKET=50, ID=51, INTEGER_LITERAL=52, DECIMAL_LITERAL=53, 
		SCIENTIFIC_LITERAL=54, STRING_LITERAL=55, UNTERMINATED_STRING_LITERAL=56, 
		WS=57, ACTION=58, ERRCHAR=59, ARG_ACTION=60, UNTERMINATED_ARG_ACTION=61, 
		UNTERMINATED_CHAR_SET=62, DOC_COMMENT=63, BLOCK_COMMENT=64;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_annotatedId = 9, RULE_action = 10, 
		RULE_actionScopeName = 11, RULE_modeSpec = 12, RULE_rules = 13, RULE_ruleSpec = 14, 
		RULE_parserRuleSpec = 15, RULE_exceptionGroup = 16, RULE_exceptionHandler = 17, 
		RULE_finallyClause = 18, RULE_rulePrequel = 19, RULE_ruleReturns = 20, 
		RULE_throwsSpec = 21, RULE_localsSpec = 22, RULE_ruleAction = 23, RULE_ruleModifiers = 24, 
		RULE_ruleModifier = 25, RULE_ruleBlock = 26, RULE_ruleAltList = 27, RULE_labeledAlt = 28, 
		RULE_propertiesBlock = 29, RULE_lexerRule = 30, RULE_lexerRuleBlock = 31, 
		RULE_lexerAltList = 32, RULE_lexerAlt = 33, RULE_lexerElements = 34, RULE_lexerElement = 35, 
		RULE_labeledLexerElement = 36, RULE_lexerBlock = 37, RULE_lexerCommands = 38, 
		RULE_lexerCommand = 39, RULE_lexerCommandName = 40, RULE_lexerCommandExpr = 41, 
		RULE_altList = 42, RULE_alternative = 43, RULE_element = 44, RULE_labeledElement = 45, 
		RULE_ebnf = 46, RULE_blockSuffix = 47, RULE_ebnfSuffix = 48, RULE_lexerAtom = 49, 
		RULE_atom = 50, RULE_notSet = 51, RULE_blockSet = 52, RULE_setElement = 53, 
		RULE_block = 54, RULE_ruleref = 55, RULE_range = 56, RULE_terminal = 57, 
		RULE_elementOptions = 58, RULE_elementOption = 59, RULE_id = 60, RULE_annotation = 61, 
		RULE_annotationBody = 62, RULE_annotationAttributeList = 63, RULE_annotationAttribute = 64, 
		RULE_expressionList = 65, RULE_qualifiedName = 66, RULE_expression = 67, 
		RULE_literal = 68, RULE_identifier = 69, RULE_boolean = 70, RULE_null = 71;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "annotatedId", 
		"action", "actionScopeName", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", 
		"exceptionGroup", "exceptionHandler", "finallyClause", "rulePrequel", 
		"ruleReturns", "throwsSpec", "localsSpec", "ruleAction", "ruleModifiers", 
		"ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", "propertiesBlock", 
		"lexerRule", "lexerRuleBlock", "lexerAltList", "lexerAlt", "lexerElements", 
		"lexerElement", "labeledLexerElement", "lexerBlock", "lexerCommands", 
		"lexerCommand", "lexerCommandName", "lexerCommandExpr", "altList", "alternative", 
		"element", "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", "lexerAtom", 
		"atom", "notSet", "blockSet", "setElement", "block", "ruleref", "range", 
		"terminal", "elementOptions", "elementOption", "id", "annotation", "annotationBody", 
		"annotationAttributeList", "annotationAttribute", "expressionList", "qualifiedName", 
		"expression", "literal", "identifier", "boolean", "null"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'import'", "'fragment'", 
		"'lexer'", "'parser'", "'grammar'", "'protected'", "'public'", "'private'", 
		"'returns'", "'locals'", "'throws'", "'catch'", "'finally'", "'mode'", 
		"'true'", "'false'", "'null'", "':'", "'::'", "','", "';'", "'('", "')'", 
		"'->'", "'=>'", "'<'", "'>'", "'='", "'?'", null, "'+'", "'+='", "'|'", 
		"'$'", "'.'", "'..'", "'@'", "'#'", "'~'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "BEGIN_ARG_ACTION", 
		"OPTIONS", "TOKENS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", "GRAMMAR", 
		"PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", "CATCH", 
		"FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", "COMMA", 
		"SEMI", "LPAREN", "RPAREN", "RARROW", "DRARROW", "LT", "GT", "ASSIGN", 
		"QUESTION", "STAR", "PLUS", "PLUS_ASSIGN", "OR", "DOLLAR", "DOT", "RANGE", 
		"AT", "POUND", "NOT", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "ID", 
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "SCIENTIFIC_LITERAL", "STRING_LITERAL", 
		"UNTERMINATED_STRING_LITERAL", "WS", "ACTION", "ERRCHAR", "ARG_ACTION", 
		"UNTERMINATED_ARG_ACTION", "UNTERMINATED_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnnotatedAntlr4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnnotatedAntlr4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AnnotatedAntlr4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 144; Match(DOC_COMMENT);
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 147; annotation();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 153; grammarType();
			State = 154; id();
			State = 155; Match(SEMI);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 156; prequelConstruct();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 162; rules();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==DOLLAR) {
				{
				{
				State = 163; modeSpec();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 169; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(AnnotatedAntlr4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 171; Match(LEXER);
				State = 172; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 173; Match(PARSER);
				State = 174; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 175; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 182;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; tokensSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(AnnotatedAntlr4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(AnnotatedAntlr4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(AnnotatedAntlr4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(OPTIONS);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 185; option();
				State = 186; Match(SEMI);
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 193; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; id();
			State = 196; Match(ASSIGN);
			State = 197; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 210;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; id();
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 200; Match(DOT);
					State = 201; id();
					}
					}
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; Match(ACTION);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(AnnotatedAntlr4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(IMPORT);
			State = 213; delegateGrammar();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 214; Match(COMMA);
				State = 215; delegateGrammar();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 221; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 228;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; id();
				State = 224; Match(ASSIGN);
				State = 225; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(AnnotatedAntlr4Parser.TOKENS, 0); }
		public AnnotatedIdContext[] annotatedId() {
			return GetRuleContexts<AnnotatedIdContext>();
		}
		public AnnotatedIdContext annotatedId(int i) {
			return GetRuleContext<AnnotatedIdContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(TOKENS);
			State = 231; annotatedId();
			State = 236;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 232; Match(COMMA);
					State = 233; annotatedId();
					}
					} 
				}
				State = 238;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 240;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 239; Match(COMMA);
				}
			}

			State = 242; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedIdContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedIdContext annotatedId() {
		AnnotatedIdContext _localctx = new AnnotatedIdContext(Context, State);
		EnterRule(_localctx, 18, RULE_annotatedId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 244; annotation();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 250; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(AnnotatedAntlr4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(AT);
			State = 256;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 253; actionScopeName();
				State = 254; Match(COLONCOLON);
				}
				break;
			}
			State = 258; id();
			State = 259; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_actionScopeName);
		try {
			State = 264;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleContext[] lexerRule() {
			return GetRuleContexts<LexerRuleContext>();
		}
		public LexerRuleContext lexerRule(int i) {
			return GetRuleContext<LexerRuleContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 266; annotation();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 272; Match(MODE);
			State = 273; id();
			State = 274; Match(SEMI);
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 275; lexerRule();
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 26, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 281; ruleSpec();
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_ruleSpec);
		try {
			State = 289;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288; lexerRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 291; Match(DOC_COMMENT);
				}
			}

			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 294; annotation();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 301;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 300; ruleModifiers();
				}
			}

			State = 303; Match(RULE_REF);
			State = 305;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 304; Match(ARG_ACTION);
				}
			}

			State = 308;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 307; ruleReturns();
				}
			}

			State = 311;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 310; throwsSpec();
				}
			}

			State = 314;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 313; localsSpec();
				}
			}

			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 316; rulePrequel();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 322; Match(COLON);
			State = 323; ruleBlock();
			State = 324; Match(SEMI);
			State = 325; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 32, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 327; exceptionHandler();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 334;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 333; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(AnnotatedAntlr4Parser.CATCH, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 34, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(CATCH);
			State = 337; Match(ARG_ACTION);
			State = 338; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(AnnotatedAntlr4Parser.FINALLY, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(FINALLY);
			State = 341; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 38, RULE_rulePrequel);
		try {
			State = 345;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(AnnotatedAntlr4Parser.RETURNS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 40, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(RETURNS);
			State = 348; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(AnnotatedAntlr4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(THROWS);
			State = 351; id();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 352; Match(COMMA);
				State = 353; id();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(AnnotatedAntlr4Parser.LOCALS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 44, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(LOCALS);
			State = 360; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(AT);
			State = 363; id();
			State = 364; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 366; ruleModifier();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(AnnotatedAntlr4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AnnotatedAntlr4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(AnnotatedAntlr4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; labeledAlt();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 376; Match(OR);
				State = 377; labeledAlt();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(AnnotatedAntlr4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public PropertiesBlockContext propertiesBlock() {
			return GetRuleContext<PropertiesBlockContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 56, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; alternative();
			State = 392;
			_la = TokenStream.La(1);
			if (_la==POUND) {
				{
				State = 384; Match(POUND);
				State = 385; id();
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 386; annotation();
					}
					}
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 395;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 394; propertiesBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesBlockContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public PropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertiesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPropertiesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPropertiesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesBlockContext propertiesBlock() {
		PropertiesBlockContext _localctx = new PropertiesBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(RARROW);
			State = 398; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 60, RULE_lexerRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 400; Match(DOC_COMMENT);
				}
			}

			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 403; annotation();
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 410;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 409; Match(FRAGMENT);
				}
			}

			State = 412; Match(TOKEN_REF);
			State = 413; Match(COLON);
			State = 414; lexerRuleBlock();
			State = 415; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 64, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; lexerAlt();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 420; Match(OR);
				State = 421; lexerAlt();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerAlt);
		int _la;
		try {
			State = 432;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case LPAREN:
			case DOT:
			case NOT:
			case STRING_LITERAL:
			case ACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; lexerElements();
				State = 429;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 428; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 434; lexerElement();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerElement);
		int _la;
		try {
			State = 455;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439; labeledLexerElement();
				State = 441;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 440; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 443; lexerAtom();
				State = 445;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 444; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447; lexerBlock();
				State = 449;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 448; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 451; Match(ACTION);
				State = 453;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 452; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 72, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; id();
			State = 458;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 461;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 459; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 460; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(LPAREN);
			State = 464; lexerAltList();
			State = 465; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(RARROW);
			State = 468; lexerCommand();
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 469; Match(COMMA);
				State = 470; lexerCommand();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerCommand);
		try {
			State = 482;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; lexerCommandName();
				State = 477; Match(LPAREN);
				State = 478; lexerCommandExpr();
				State = 479; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerCommandName);
		try {
			State = 486;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 484; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommandExpr);
		try {
			State = 490;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488; id();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 84, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; alternative();
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 493; Match(OR);
				State = 494; alternative();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 500; elementOptions();
				}
			}

			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LPAREN) | (1L << DOLLAR) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0)) {
				{
				{
				State = 503; element();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_element);
		int _la;
		try {
			State = 536;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 509; annotation();
					}
					}
					State = 514;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 515; labeledElement();
				State = 518;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 516; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 520; annotation();
					}
					}
					State = 525;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 526; atom();
				State = 529;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 527; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 531; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 532; Match(ACTION);
				State = 534;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 533; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 90, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; id();
			State = 539;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 542;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 540; atom();
				}
				break;
			case LPAREN:
				{
				State = 541; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 92, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; block();
			State = 546;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 545; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 94, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(AnnotatedAntlr4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(AnnotatedAntlr4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(AnnotatedAntlr4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(AnnotatedAntlr4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 96, RULE_ebnfSuffix);
		int _la;
		try {
			State = 562;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550; Match(QUESTION);
				State = 552;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 551; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554; Match(STAR);
				State = 556;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 555; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 558; Match(PLUS);
				State = 560;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 559; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 98, RULE_lexerAtom);
		int _la;
		try {
			State = 573;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 566; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 567; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 568; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 569; Match(DOT);
				State = 571;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 570; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 100, RULE_atom);
		int _la;
		try {
			State = 583;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 577; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 578; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 579; Match(DOT);
				State = 581;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 580; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(AnnotatedAntlr4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 102, RULE_notSet);
		try {
			State = 589;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; Match(NOT);
				State = 586; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587; Match(NOT);
				State = 588; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 104, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(LPAREN);
			State = 592; setElement();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 593; Match(OR);
				State = 594; setElement();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 600; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 106, RULE_setElement);
		int _la;
		try {
			State = 612;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602; Match(TOKEN_REF);
				State = 604;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 603; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606; Match(STRING_LITERAL);
				State = 608;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 607; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 610; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 611; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(LPAREN);
			State = 625;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 616;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 615; optionsSpec();
					}
				}

				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 618; ruleAction();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 624; Match(COLON);
				}
			}

			State = 627; altList();
			State = 628; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 110, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(RULE_REF);
			State = 632;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 631; Match(ARG_ACTION);
				}
			}

			State = 635;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 634; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(AnnotatedAntlr4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(AnnotatedAntlr4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(STRING_LITERAL);
			State = 638; Match(RANGE);
			State = 639; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 114, RULE_terminal);
		int _la;
		try {
			State = 649;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 641; Match(TOKEN_REF);
				State = 643;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 642; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; Match(STRING_LITERAL);
				State = 647;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 646; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(AnnotatedAntlr4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(AnnotatedAntlr4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(LT);
			State = 652; elementOption();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 653; Match(COMMA);
				State = 654; elementOption();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 660; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementOption);
		try {
			State = 669;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; id();
				State = 664; Match(ASSIGN);
				State = 667;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 665; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 666; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 120, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(AnnotatedAntlr4Parser.DOLLAR, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(DOLLAR);
			State = 674; qualifiedName();
			State = 676;
			_la = TokenStream.La(1);
			if (_la==LPAREN) {
				{
				State = 675; annotationBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(LPAREN);
			State = 682;
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 679; expression();
				}
				break;
			case 2:
				{
				State = 680; expressionList();
				}
				break;
			case 3:
				{
				State = 681; annotationAttributeList();
				}
				break;
			}
			State = 684; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; annotationAttribute();
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 687; Match(COMMA);
				State = 688; annotationAttribute();
				}
				}
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotationAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; identifier();
			State = 695; Match(ASSIGN);
			State = 698;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case TRUE:
			case FALSE:
			case NULL:
			case ID:
			case INTEGER_LITERAL:
			case SCIENTIFIC_LITERAL:
			case STRING_LITERAL:
				{
				State = 696; expression();
				}
				break;
			case LPAREN:
				{
				State = 697; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; Match(LPAREN);
			State = 701; expression();
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 702; Match(COMMA);
				State = 703; expression();
				}
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 709; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; identifier();
			State = 716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 712; Match(DOT);
					State = 713; identifier();
					}
					} 
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_expression);
		try {
			State = 721;
			switch (TokenStream.La(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case INTEGER_LITERAL:
			case SCIENTIFIC_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719; literal();
				}
				break;
			case TOKEN_REF:
			case RULE_REF:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullContext @null() {
			return GetRuleContext<NullContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public ITerminalNode SCIENTIFIC_LITERAL() { return GetToken(AnnotatedAntlr4Parser.SCIENTIFIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_literal);
		try {
			State = 728;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723; @null();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724; boolean();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725; Match(INTEGER_LITERAL);
				}
				break;
			case SCIENTIFIC_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 726; Match(SCIENTIFIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 727; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ID() { return GetToken(AnnotatedAntlr4Parser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(AnnotatedAntlr4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AnnotatedAntlr4Parser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 140, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(AnnotatedAntlr4Parser.NULL, 0); }
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(Context, State);
		EnterRule(_localctx, 142, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x42\x2E3\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x3\x2\x5\x2\x94\n\x2\x3\x2\a\x2\x97"+
		"\n\x2\f\x2\xE\x2\x9A\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\xA0\n\x2\f\x2\xE"+
		"\x2\xA3\v\x2\x3\x2\x3\x2\a\x2\xA7\n\x2\f\x2\xE\x2\xAA\v\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xB3\n\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\xB9\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\xBF\n\x5\f\x5\xE\x5\xC2\v"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xCD\n\a\f\a"+
		"\xE\a\xD0\v\a\x3\a\x3\a\x3\a\x5\a\xD5\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xDB"+
		"\n\b\f\b\xE\b\xDE\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xE7\n\t"+
		"\x3\n\x3\n\x3\n\x3\n\a\n\xED\n\n\f\n\xE\n\xF0\v\n\x3\n\x5\n\xF3\n\n\x3"+
		"\n\x3\n\x3\v\a\v\xF8\n\v\f\v\xE\v\xFB\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\x5\f\x103\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\x10B\n\r\x3\xE\a\xE"+
		"\x10E\n\xE\f\xE\xE\xE\x111\v\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x117\n\xE"+
		"\f\xE\xE\xE\x11A\v\xE\x3\xF\a\xF\x11D\n\xF\f\xF\xE\xF\x120\v\xF\x3\x10"+
		"\x3\x10\x5\x10\x124\n\x10\x3\x11\x5\x11\x127\n\x11\x3\x11\a\x11\x12A\n"+
		"\x11\f\x11\xE\x11\x12D\v\x11\x3\x11\x5\x11\x130\n\x11\x3\x11\x3\x11\x5"+
		"\x11\x134\n\x11\x3\x11\x5\x11\x137\n\x11\x3\x11\x5\x11\x13A\n\x11\x3\x11"+
		"\x5\x11\x13D\n\x11\x3\x11\a\x11\x140\n\x11\f\x11\xE\x11\x143\v\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\a\x12\x14B\n\x12\f\x12\xE\x12"+
		"\x14E\v\x12\x3\x12\x5\x12\x151\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\x15C\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\a\x17\x165\n\x17\f\x17\xE\x17\x168\v\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x6\x1A\x172\n\x1A"+
		"\r\x1A\xE\x1A\x173\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a"+
		"\x1D\x17D\n\x1D\f\x1D\xE\x1D\x180\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a"+
		"\x1E\x186\n\x1E\f\x1E\xE\x1E\x189\v\x1E\x5\x1E\x18B\n\x1E\x3\x1E\x5\x1E"+
		"\x18E\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x5 \x194\n \x3 \a \x197\n \f \xE"+
		" \x19A\v \x3 \x5 \x19D\n \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\a"+
		"\"\x1A9\n\"\f\"\xE\"\x1AC\v\"\x3#\x3#\x5#\x1B0\n#\x3#\x5#\x1B3\n#\x3$"+
		"\x6$\x1B6\n$\r$\xE$\x1B7\x3%\x3%\x5%\x1BC\n%\x3%\x3%\x5%\x1C0\n%\x3%\x3"+
		"%\x5%\x1C4\n%\x3%\x3%\x5%\x1C8\n%\x5%\x1CA\n%\x3&\x3&\x3&\x3&\x5&\x1D0"+
		"\n&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\a(\x1DA\n(\f(\xE(\x1DD\v(\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x5)\x1E5\n)\x3*\x3*\x5*\x1E9\n*\x3+\x3+\x5+\x1ED"+
		"\n+\x3,\x3,\x3,\a,\x1F2\n,\f,\xE,\x1F5\v,\x3-\x5-\x1F8\n-\x3-\a-\x1FB"+
		"\n-\f-\xE-\x1FE\v-\x3.\a.\x201\n.\f.\xE.\x204\v.\x3.\x3.\x3.\x5.\x209"+
		"\n.\x3.\a.\x20C\n.\f.\xE.\x20F\v.\x3.\x3.\x3.\x5.\x214\n.\x3.\x3.\x3."+
		"\x5.\x219\n.\x5.\x21B\n.\x3/\x3/\x3/\x3/\x5/\x221\n/\x3\x30\x3\x30\x5"+
		"\x30\x225\n\x30\x3\x31\x3\x31\x3\x32\x3\x32\x5\x32\x22B\n\x32\x3\x32\x3"+
		"\x32\x5\x32\x22F\n\x32\x3\x32\x3\x32\x5\x32\x233\n\x32\x5\x32\x235\n\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x23E\n\x33\x5"+
		"\x33\x240\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x248"+
		"\n\x34\x5\x34\x24A\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x250\n\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x256\n\x36\f\x36\xE\x36\x259\v\x36"+
		"\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x25F\n\x37\x3\x37\x3\x37\x5\x37\x263"+
		"\n\x37\x3\x37\x3\x37\x5\x37\x267\n\x37\x3\x38\x3\x38\x5\x38\x26B\n\x38"+
		"\x3\x38\a\x38\x26E\n\x38\f\x38\xE\x38\x271\v\x38\x3\x38\x5\x38\x274\n"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x27B\n\x39\x3\x39\x5\x39"+
		"\x27E\n\x39\x3:\x3:\x3:\x3:\x3;\x3;\x5;\x286\n;\x3;\x3;\x5;\x28A\n;\x5"+
		";\x28C\n;\x3<\x3<\x3<\x3<\a<\x292\n<\f<\xE<\x295\v<\x3<\x3<\x3=\x3=\x3"+
		"=\x3=\x3=\x5=\x29E\n=\x5=\x2A0\n=\x3>\x3>\x3?\x3?\x3?\x5?\x2A7\n?\x3@"+
		"\x3@\x3@\x3@\x5@\x2AD\n@\x3@\x3@\x3\x41\x3\x41\x3\x41\a\x41\x2B4\n\x41"+
		"\f\x41\xE\x41\x2B7\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2BD\n\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x2C3\n\x43\f\x43\xE\x43\x2C6\v\x43"+
		"\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\a\x44\x2CD\n\x44\f\x44\xE\x44\x2D0"+
		"\v\x44\x3\x45\x3\x45\x5\x45\x2D4\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x5\x46\x2DB\n\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3I\x2\x2J\x2\x4\x6\b\n"+
		"\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>"+
		"@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88"+
		"\x8A\x8C\x8E\x90\x2\a\x4\x2\v\v\xF\x11\x4\x2%%))\x3\x2\x3\x4\x4\x2\x3"+
		"\x4\x35\x35\x3\x2\x18\x19\x313\x2\x93\x3\x2\x2\x2\x4\xB2\x3\x2\x2\x2\x6"+
		"\xB8\x3\x2\x2\x2\b\xBA\x3\x2\x2\x2\n\xC5\x3\x2\x2\x2\f\xD4\x3\x2\x2\x2"+
		"\xE\xD6\x3\x2\x2\x2\x10\xE6\x3\x2\x2\x2\x12\xE8\x3\x2\x2\x2\x14\xF9\x3"+
		"\x2\x2\x2\x16\xFE\x3\x2\x2\x2\x18\x10A\x3\x2\x2\x2\x1A\x10F\x3\x2\x2\x2"+
		"\x1C\x11E\x3\x2\x2\x2\x1E\x123\x3\x2\x2\x2 \x126\x3\x2\x2\x2\"\x14C\x3"+
		"\x2\x2\x2$\x152\x3\x2\x2\x2&\x156\x3\x2\x2\x2(\x15B\x3\x2\x2\x2*\x15D"+
		"\x3\x2\x2\x2,\x160\x3\x2\x2\x2.\x169\x3\x2\x2\x2\x30\x16C\x3\x2\x2\x2"+
		"\x32\x171\x3\x2\x2\x2\x34\x175\x3\x2\x2\x2\x36\x177\x3\x2\x2\x2\x38\x179"+
		"\x3\x2\x2\x2:\x181\x3\x2\x2\x2<\x18F\x3\x2\x2\x2>\x193\x3\x2\x2\x2@\x1A3"+
		"\x3\x2\x2\x2\x42\x1A5\x3\x2\x2\x2\x44\x1B2\x3\x2\x2\x2\x46\x1B5\x3\x2"+
		"\x2\x2H\x1C9\x3\x2\x2\x2J\x1CB\x3\x2\x2\x2L\x1D1\x3\x2\x2\x2N\x1D5\x3"+
		"\x2\x2\x2P\x1E4\x3\x2\x2\x2R\x1E8\x3\x2\x2\x2T\x1EC\x3\x2\x2\x2V\x1EE"+
		"\x3\x2\x2\x2X\x1F7\x3\x2\x2\x2Z\x21A\x3\x2\x2\x2\\\x21C\x3\x2\x2\x2^\x222"+
		"\x3\x2\x2\x2`\x226\x3\x2\x2\x2\x62\x234\x3\x2\x2\x2\x64\x23F\x3\x2\x2"+
		"\x2\x66\x249\x3\x2\x2\x2h\x24F\x3\x2\x2\x2j\x251\x3\x2\x2\x2l\x266\x3"+
		"\x2\x2\x2n\x268\x3\x2\x2\x2p\x278\x3\x2\x2\x2r\x27F\x3\x2\x2\x2t\x28B"+
		"\x3\x2\x2\x2v\x28D\x3\x2\x2\x2x\x29F\x3\x2\x2\x2z\x2A1\x3\x2\x2\x2|\x2A3"+
		"\x3\x2\x2\x2~\x2A8\x3\x2\x2\x2\x80\x2B0\x3\x2\x2\x2\x82\x2B8\x3\x2\x2"+
		"\x2\x84\x2BE\x3\x2\x2\x2\x86\x2C9\x3\x2\x2\x2\x88\x2D3\x3\x2\x2\x2\x8A"+
		"\x2DA\x3\x2\x2\x2\x8C\x2DC\x3\x2\x2\x2\x8E\x2DE\x3\x2\x2\x2\x90\x2E0\x3"+
		"\x2\x2\x2\x92\x94\a\x41\x2\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2"+
		"\x94\x98\x3\x2\x2\x2\x95\x97\x5|?\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2"+
		"\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2\x9A"+
		"\x98\x3\x2\x2\x2\x9B\x9C\x5\x4\x3\x2\x9C\x9D\x5z>\x2\x9D\xA1\a\x1E\x2"+
		"\x2\x9E\xA0\x5\x6\x4\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA1\x3\x2\x2"+
		"\x2\xA4\xA8\x5\x1C\xF\x2\xA5\xA7\x5\x1A\xE\x2\xA6\xA5\x3\x2\x2\x2\xA7"+
		"\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x3\x2"+
		"\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAC\a\x2\x2\x3\xAC\x3\x3\x2\x2\x2\xAD\xAE"+
		"\a\f\x2\x2\xAE\xB3\a\xE\x2\x2\xAF\xB0\a\r\x2\x2\xB0\xB3\a\xE\x2\x2\xB1"+
		"\xB3\a\xE\x2\x2\xB2\xAD\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2\xB2\xB1\x3\x2"+
		"\x2\x2\xB3\x5\x3\x2\x2\x2\xB4\xB9\x5\b\x5\x2\xB5\xB9\x5\xE\b\x2\xB6\xB9"+
		"\x5\x12\n\x2\xB7\xB9\x5\x16\f\x2\xB8\xB4\x3\x2\x2\x2\xB8\xB5\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\a\x3\x2\x2\x2\xBA\xC0"+
		"\a\b\x2\x2\xBB\xBC\x5\n\x6\x2\xBC\xBD\a\x1E\x2\x2\xBD\xBF\x3\x2\x2\x2"+
		"\xBE\xBB\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3"+
		"\x2\x2\x2\xC1\xC3\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC4\a\x32\x2\x2"+
		"\xC4\t\x3\x2\x2\x2\xC5\xC6\x5z>\x2\xC6\xC7\a%\x2\x2\xC7\xC8\x5\f\a\x2"+
		"\xC8\v\x3\x2\x2\x2\xC9\xCE\x5z>\x2\xCA\xCB\a,\x2\x2\xCB\xCD\x5z>\x2\xCC"+
		"\xCA\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2"+
		"\x2\x2\xCF\xD5\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD5\a\x39\x2\x2\xD2"+
		"\xD5\a<\x2\x2\xD3\xD5\a\x36\x2\x2\xD4\xC9\x3\x2\x2\x2\xD4\xD1\x3\x2\x2"+
		"\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD3\x3\x2\x2\x2\xD5\r\x3\x2\x2\x2\xD6\xD7"+
		"\a\n\x2\x2\xD7\xDC\x5\x10\t\x2\xD8\xD9\a\x1D\x2\x2\xD9\xDB\x5\x10\t\x2"+
		"\xDA\xD8\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3"+
		"\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE0\a\x1E\x2\x2"+
		"\xE0\xF\x3\x2\x2\x2\xE1\xE2\x5z>\x2\xE2\xE3\a%\x2\x2\xE3\xE4\x5z>\x2\xE4"+
		"\xE7\x3\x2\x2\x2\xE5\xE7\x5z>\x2\xE6\xE1\x3\x2\x2\x2\xE6\xE5\x3\x2\x2"+
		"\x2\xE7\x11\x3\x2\x2\x2\xE8\xE9\a\t\x2\x2\xE9\xEE\x5\x14\v\x2\xEA\xEB"+
		"\a\x1D\x2\x2\xEB\xED\x5\x14\v\x2\xEC\xEA\x3\x2\x2\x2\xED\xF0\x3\x2\x2"+
		"\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE"+
		"\x3\x2\x2\x2\xF1\xF3\a\x1D\x2\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2"+
		"\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\a\x32\x2\x2\xF5\x13\x3\x2\x2\x2\xF6\xF8"+
		"\x5|?\x2\xF7\xF6\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9"+
		"\xFA\x3\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\xFD\x5z>"+
		"\x2\xFD\x15\x3\x2\x2\x2\xFE\x102\a.\x2\x2\xFF\x100\x5\x18\r\x2\x100\x101"+
		"\a\x1C\x2\x2\x101\x103\x3\x2\x2\x2\x102\xFF\x3\x2\x2\x2\x102\x103\x3\x2"+
		"\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\x5z>\x2\x105\x106\a<\x2\x2\x106"+
		"\x17\x3\x2\x2\x2\x107\x10B\x5z>\x2\x108\x10B\a\f\x2\x2\x109\x10B\a\r\x2"+
		"\x2\x10A\x107\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x109\x3\x2\x2\x2"+
		"\x10B\x19\x3\x2\x2\x2\x10C\x10E\x5|?\x2\x10D\x10C\x3\x2\x2\x2\x10E\x111"+
		"\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x112\x3"+
		"\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a\x17\x2\x2\x113\x114\x5z>\x2"+
		"\x114\x118\a\x1E\x2\x2\x115\x117\x5> \x2\x116\x115\x3\x2\x2\x2\x117\x11A"+
		"\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x1B\x3\x2"+
		"\x2\x2\x11A\x118\x3\x2\x2\x2\x11B\x11D\x5\x1E\x10\x2\x11C\x11B\x3\x2\x2"+
		"\x2\x11D\x120\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2"+
		"\x11F\x1D\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x121\x124\x5 \x11\x2\x122"+
		"\x124\x5> \x2\x123\x121\x3\x2\x2\x2\x123\x122\x3\x2\x2\x2\x124\x1F\x3"+
		"\x2\x2\x2\x125\x127\a\x41\x2\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2"+
		"\x2\x2\x127\x12B\x3\x2\x2\x2\x128\x12A\x5|?\x2\x129\x128\x3\x2\x2\x2\x12A"+
		"\x12D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12F"+
		"\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E\x130\x5\x32\x1A\x2\x12F\x12E\x3"+
		"\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x133\a\x4\x2"+
		"\x2\x132\x134\a>\x2\x2\x133\x132\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134"+
		"\x136\x3\x2\x2\x2\x135\x137\x5*\x16\x2\x136\x135\x3\x2\x2\x2\x136\x137"+
		"\x3\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x13A\x5,\x17\x2\x139\x138\x3\x2"+
		"\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x13D\x5.\x18\x2"+
		"\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x141\x3\x2\x2\x2\x13E"+
		"\x140\x5(\x15\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F"+
		"\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x144\x3\x2\x2\x2\x143\x141\x3"+
		"\x2\x2\x2\x144\x145\a\x1B\x2\x2\x145\x146\x5\x36\x1C\x2\x146\x147\a\x1E"+
		"\x2\x2\x147\x148\x5\"\x12\x2\x148!\x3\x2\x2\x2\x149\x14B\x5$\x13\x2\x14A"+
		"\x149\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14D"+
		"\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x151\x5"+
		"&\x14\x2\x150\x14F\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151#\x3\x2\x2\x2"+
		"\x152\x153\a\x15\x2\x2\x153\x154\a>\x2\x2\x154\x155\a<\x2\x2\x155%\x3"+
		"\x2\x2\x2\x156\x157\a\x16\x2\x2\x157\x158\a<\x2\x2\x158\'\x3\x2\x2\x2"+
		"\x159\x15C\x5\b\x5\x2\x15A\x15C\x5\x30\x19\x2\x15B\x159\x3\x2\x2\x2\x15B"+
		"\x15A\x3\x2\x2\x2\x15C)\x3\x2\x2\x2\x15D\x15E\a\x12\x2\x2\x15E\x15F\a"+
		">\x2\x2\x15F+\x3\x2\x2\x2\x160\x161\a\x14\x2\x2\x161\x166\x5z>\x2\x162"+
		"\x163\a\x1D\x2\x2\x163\x165\x5z>\x2\x164\x162\x3\x2\x2\x2\x165\x168\x3"+
		"\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167-\x3\x2\x2\x2"+
		"\x168\x166\x3\x2\x2\x2\x169\x16A\a\x13\x2\x2\x16A\x16B\a>\x2\x2\x16B/"+
		"\x3\x2\x2\x2\x16C\x16D\a.\x2\x2\x16D\x16E\x5z>\x2\x16E\x16F\a<\x2\x2\x16F"+
		"\x31\x3\x2\x2\x2\x170\x172\x5\x34\x1B\x2\x171\x170\x3\x2\x2\x2\x172\x173"+
		"\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x33\x3\x2"+
		"\x2\x2\x175\x176\t\x2\x2\x2\x176\x35\x3\x2\x2\x2\x177\x178\x5\x38\x1D"+
		"\x2\x178\x37\x3\x2\x2\x2\x179\x17E\x5:\x1E\x2\x17A\x17B\a*\x2\x2\x17B"+
		"\x17D\x5:\x1E\x2\x17C\x17A\x3\x2\x2\x2\x17D\x180\x3\x2\x2\x2\x17E\x17C"+
		"\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x39\x3\x2\x2\x2\x180\x17E\x3\x2"+
		"\x2\x2\x181\x18A\x5X-\x2\x182\x183\a/\x2\x2\x183\x187\x5z>\x2\x184\x186"+
		"\x5|?\x2\x185\x184\x3\x2\x2\x2\x186\x189\x3\x2\x2\x2\x187\x185\x3\x2\x2"+
		"\x2\x187\x188\x3\x2\x2\x2\x188\x18B\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2"+
		"\x18A\x182\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C"+
		"\x18E\x5<\x1F\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E;\x3"+
		"\x2\x2\x2\x18F\x190\a!\x2\x2\x190\x191\a<\x2\x2\x191=\x3\x2\x2\x2\x192"+
		"\x194\a\x41\x2\x2\x193\x192\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x198"+
		"\x3\x2\x2\x2\x195\x197\x5|?\x2\x196\x195\x3\x2\x2\x2\x197\x19A\x3\x2\x2"+
		"\x2\x198\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19C\x3\x2\x2\x2"+
		"\x19A\x198\x3\x2\x2\x2\x19B\x19D\a\v\x2\x2\x19C\x19B\x3\x2\x2\x2\x19C"+
		"\x19D\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19F\a\x3\x2\x2\x19F\x1A0"+
		"\a\x1B\x2\x2\x1A0\x1A1\x5@!\x2\x1A1\x1A2\a\x1E\x2\x2\x1A2?\x3\x2\x2\x2"+
		"\x1A3\x1A4\x5\x42\"\x2\x1A4\x41\x3\x2\x2\x2\x1A5\x1AA\x5\x44#\x2\x1A6"+
		"\x1A7\a*\x2\x2\x1A7\x1A9\x5\x44#\x2\x1A8\x1A6\x3\x2\x2\x2\x1A9\x1AC\x3"+
		"\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x43\x3\x2\x2"+
		"\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1AF\x5\x46$\x2\x1AE\x1B0\x5N(\x2\x1AF"+
		"\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1\x1B3"+
		"\x3\x2\x2\x2\x1B2\x1AD\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3\x45\x3\x2"+
		"\x2\x2\x1B4\x1B6\x5H%\x2\x1B5\x1B4\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7"+
		"\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8G\x3\x2\x2\x2\x1B9\x1BB\x5"+
		"J&\x2\x1BA\x1BC\x5\x62\x32\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2"+
		"\x2\x1BC\x1CA\x3\x2\x2\x2\x1BD\x1BF\x5\x64\x33\x2\x1BE\x1C0\x5\x62\x32"+
		"\x2\x1BF\x1BE\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1CA\x3\x2\x2\x2"+
		"\x1C1\x1C3\x5L\'\x2\x1C2\x1C4\x5\x62\x32\x2\x1C3\x1C2\x3\x2\x2\x2\x1C3"+
		"\x1C4\x3\x2\x2\x2\x1C4\x1CA\x3\x2\x2\x2\x1C5\x1C7\a<\x2\x2\x1C6\x1C8\a"+
		"&\x2\x2\x1C7\x1C6\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1CA\x3\x2\x2"+
		"\x2\x1C9\x1B9\x3\x2\x2\x2\x1C9\x1BD\x3\x2\x2\x2\x1C9\x1C1\x3\x2\x2\x2"+
		"\x1C9\x1C5\x3\x2\x2\x2\x1CAI\x3\x2\x2\x2\x1CB\x1CC\x5z>\x2\x1CC\x1CF\t"+
		"\x3\x2\x2\x1CD\x1D0\x5\x64\x33\x2\x1CE\x1D0\x5n\x38\x2\x1CF\x1CD\x3\x2"+
		"\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0K\x3\x2\x2\x2\x1D1\x1D2\a\x1F\x2\x2\x1D2"+
		"\x1D3\x5\x42\"\x2\x1D3\x1D4\a \x2\x2\x1D4M\x3\x2\x2\x2\x1D5\x1D6\a!\x2"+
		"\x2\x1D6\x1DB\x5P)\x2\x1D7\x1D8\a\x1D\x2\x2\x1D8\x1DA\x5P)\x2\x1D9\x1D7"+
		"\x3\x2\x2\x2\x1DA\x1DD\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3"+
		"\x2\x2\x2\x1DCO\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x1DF\x5R*\x2\x1DF"+
		"\x1E0\a\x1F\x2\x2\x1E0\x1E1\x5T+\x2\x1E1\x1E2\a \x2\x2\x1E2\x1E5\x3\x2"+
		"\x2\x2\x1E3\x1E5\x5R*\x2\x1E4\x1DE\x3\x2\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5"+
		"Q\x3\x2\x2\x2\x1E6\x1E9\x5z>\x2\x1E7\x1E9\a\x17\x2\x2\x1E8\x1E6\x3\x2"+
		"\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E9S\x3\x2\x2\x2\x1EA\x1ED\x5z>\x2\x1EB"+
		"\x1ED\a\x36\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1EB\x3\x2\x2\x2\x1EDU\x3"+
		"\x2\x2\x2\x1EE\x1F3\x5X-\x2\x1EF\x1F0\a*\x2\x2\x1F0\x1F2\x5X-\x2\x1F1"+
		"\x1EF\x3\x2\x2\x2\x1F2\x1F5\x3\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4"+
		"\x3\x2\x2\x2\x1F4W\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F8\x5v<\x2"+
		"\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FC\x3\x2\x2\x2\x1F9"+
		"\x1FB\x5Z.\x2\x1FA\x1F9\x3\x2\x2\x2\x1FB\x1FE\x3\x2\x2\x2\x1FC\x1FA\x3"+
		"\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FDY\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2"+
		"\x1FF\x201\x5|?\x2\x200\x1FF\x3\x2\x2\x2\x201\x204\x3\x2\x2\x2\x202\x200"+
		"\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x205\x3\x2\x2\x2\x204\x202\x3"+
		"\x2\x2\x2\x205\x208\x5\\/\x2\x206\x209\x5\x62\x32\x2\x207\x209\x3\x2\x2"+
		"\x2\x208\x206\x3\x2\x2\x2\x208\x207\x3\x2\x2\x2\x209\x21B\x3\x2\x2\x2"+
		"\x20A\x20C\x5|?\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20B"+
		"\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x210\x3\x2\x2\x2\x20F\x20D\x3"+
		"\x2\x2\x2\x210\x213\x5\x66\x34\x2\x211\x214\x5\x62\x32\x2\x212\x214\x3"+
		"\x2\x2\x2\x213\x211\x3\x2\x2\x2\x213\x212\x3\x2\x2\x2\x214\x21B\x3\x2"+
		"\x2\x2\x215\x21B\x5^\x30\x2\x216\x218\a<\x2\x2\x217\x219\a&\x2\x2\x218"+
		"\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x3\x2\x2\x2\x21A\x202"+
		"\x3\x2\x2\x2\x21A\x20D\x3\x2\x2\x2\x21A\x215\x3\x2\x2\x2\x21A\x216\x3"+
		"\x2\x2\x2\x21B[\x3\x2\x2\x2\x21C\x21D\x5z>\x2\x21D\x220\t\x3\x2\x2\x21E"+
		"\x221\x5\x66\x34\x2\x21F\x221\x5n\x38\x2\x220\x21E\x3\x2\x2\x2\x220\x21F"+
		"\x3\x2\x2\x2\x221]\x3\x2\x2\x2\x222\x224\x5n\x38\x2\x223\x225\x5`\x31"+
		"\x2\x224\x223\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225_\x3\x2\x2\x2\x226"+
		"\x227\x5\x62\x32\x2\x227\x61\x3\x2\x2\x2\x228\x22A\a&\x2\x2\x229\x22B"+
		"\a&\x2\x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x235\x3\x2"+
		"\x2\x2\x22C\x22E\a\'\x2\x2\x22D\x22F\a&\x2\x2\x22E\x22D\x3\x2\x2\x2\x22E"+
		"\x22F\x3\x2\x2\x2\x22F\x235\x3\x2\x2\x2\x230\x232\a(\x2\x2\x231\x233\a"+
		"&\x2\x2\x232\x231\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x235\x3\x2\x2"+
		"\x2\x234\x228\x3\x2\x2\x2\x234\x22C\x3\x2\x2\x2\x234\x230\x3\x2\x2\x2"+
		"\x235\x63\x3\x2\x2\x2\x236\x240\x5r:\x2\x237\x240\x5t;\x2\x238\x240\a"+
		"\x4\x2\x2\x239\x240\x5h\x35\x2\x23A\x240\a\x5\x2\x2\x23B\x23D\a,\x2\x2"+
		"\x23C\x23E\x5v<\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x240"+
		"\x3\x2\x2\x2\x23F\x236\x3\x2\x2\x2\x23F\x237\x3\x2\x2\x2\x23F\x238\x3"+
		"\x2\x2\x2\x23F\x239\x3\x2\x2\x2\x23F\x23A\x3\x2\x2\x2\x23F\x23B\x3\x2"+
		"\x2\x2\x240\x65\x3\x2\x2\x2\x241\x24A\x5r:\x2\x242\x24A\x5t;\x2\x243\x24A"+
		"\x5p\x39\x2\x244\x24A\x5h\x35\x2\x245\x247\a,\x2\x2\x246\x248\x5v<\x2"+
		"\x247\x246\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x24A\x3\x2\x2\x2\x249"+
		"\x241\x3\x2\x2\x2\x249\x242\x3\x2\x2\x2\x249\x243\x3\x2\x2\x2\x249\x244"+
		"\x3\x2\x2\x2\x249\x245\x3\x2\x2\x2\x24Ag\x3\x2\x2\x2\x24B\x24C\a\x30\x2"+
		"\x2\x24C\x250\x5l\x37\x2\x24D\x24E\a\x30\x2\x2\x24E\x250\x5j\x36\x2\x24F"+
		"\x24B\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x250i\x3\x2\x2\x2\x251\x252\a"+
		"\x1F\x2\x2\x252\x257\x5l\x37\x2\x253\x254\a*\x2\x2\x254\x256\x5l\x37\x2"+
		"\x255\x253\x3\x2\x2\x2\x256\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257"+
		"\x258\x3\x2\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x25B"+
		"\a \x2\x2\x25Bk\x3\x2\x2\x2\x25C\x25E\a\x3\x2\x2\x25D\x25F\x5v<\x2\x25E"+
		"\x25D\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x267\x3\x2\x2\x2\x260\x262"+
		"\a\x39\x2\x2\x261\x263\x5v<\x2\x262\x261\x3\x2\x2\x2\x262\x263\x3\x2\x2"+
		"\x2\x263\x267\x3\x2\x2\x2\x264\x267\x5r:\x2\x265\x267\a\x5\x2\x2\x266"+
		"\x25C\x3\x2\x2\x2\x266\x260\x3\x2\x2\x2\x266\x264\x3\x2\x2\x2\x266\x265"+
		"\x3\x2\x2\x2\x267m\x3\x2\x2\x2\x268\x273\a\x1F\x2\x2\x269\x26B\x5\b\x5"+
		"\x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26F\x3\x2\x2\x2"+
		"\x26C\x26E\x5\x30\x19\x2\x26D\x26C\x3\x2\x2\x2\x26E\x271\x3\x2\x2\x2\x26F"+
		"\x26D\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x272\x3\x2\x2\x2\x271\x26F"+
		"\x3\x2\x2\x2\x272\x274\a\x1B\x2\x2\x273\x26A\x3\x2\x2\x2\x273\x274\x3"+
		"\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\x5V,\x2\x276\x277\a \x2\x2\x277"+
		"o\x3\x2\x2\x2\x278\x27A\a\x4\x2\x2\x279\x27B\a>\x2\x2\x27A\x279\x3\x2"+
		"\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27D\x3\x2\x2\x2\x27C\x27E\x5v<\x2\x27D"+
		"\x27C\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27Eq\x3\x2\x2\x2\x27F\x280\a"+
		"\x39\x2\x2\x280\x281\a-\x2\x2\x281\x282\a\x39\x2\x2\x282s\x3\x2\x2\x2"+
		"\x283\x285\a\x3\x2\x2\x284\x286\x5v<\x2\x285\x284\x3\x2\x2\x2\x285\x286"+
		"\x3\x2\x2\x2\x286\x28C\x3\x2\x2\x2\x287\x289\a\x39\x2\x2\x288\x28A\x5"+
		"v<\x2\x289\x288\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28C\x3\x2\x2\x2"+
		"\x28B\x283\x3\x2\x2\x2\x28B\x287\x3\x2\x2\x2\x28Cu\x3\x2\x2\x2\x28D\x28E"+
		"\a#\x2\x2\x28E\x293\x5x=\x2\x28F\x290\a\x1D\x2\x2\x290\x292\x5x=\x2\x291"+
		"\x28F\x3\x2\x2\x2\x292\x295\x3\x2\x2\x2\x293\x291\x3\x2\x2\x2\x293\x294"+
		"\x3\x2\x2\x2\x294\x296\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x296\x297\a$"+
		"\x2\x2\x297w\x3\x2\x2\x2\x298\x2A0\x5z>\x2\x299\x29A\x5z>\x2\x29A\x29D"+
		"\a%\x2\x2\x29B\x29E\x5z>\x2\x29C\x29E\a\x39\x2\x2\x29D\x29B\x3\x2\x2\x2"+
		"\x29D\x29C\x3\x2\x2\x2\x29E\x2A0\x3\x2\x2\x2\x29F\x298\x3\x2\x2\x2\x29F"+
		"\x299\x3\x2\x2\x2\x2A0y\x3\x2\x2\x2\x2A1\x2A2\t\x4\x2\x2\x2A2{\x3\x2\x2"+
		"\x2\x2A3\x2A4\a+\x2\x2\x2A4\x2A6\x5\x86\x44\x2\x2A5\x2A7\x5~@\x2\x2A6"+
		"\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7}\x3\x2\x2\x2\x2A8\x2AC\a"+
		"\x1F\x2\x2\x2A9\x2AD\x5\x88\x45\x2\x2AA\x2AD\x5\x84\x43\x2\x2AB\x2AD\x5"+
		"\x80\x41\x2\x2AC\x2A9\x3\x2\x2\x2\x2AC\x2AA\x3\x2\x2\x2\x2AC\x2AB\x3\x2"+
		"\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF\a \x2\x2\x2AF\x7F\x3\x2\x2\x2\x2B0"+
		"\x2B5\x5\x82\x42\x2\x2B1\x2B2\a\x1D\x2\x2\x2B2\x2B4\x5\x82\x42\x2\x2B3"+
		"\x2B1\x3\x2\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B3\x3\x2\x2\x2\x2B5\x2B6"+
		"\x3\x2\x2\x2\x2B6\x81\x3\x2\x2\x2\x2B7\x2B5\x3\x2\x2\x2\x2B8\x2B9\x5\x8C"+
		"G\x2\x2B9\x2BC\a%\x2\x2\x2BA\x2BD\x5\x88\x45\x2\x2BB\x2BD\x5\x84\x43\x2"+
		"\x2BC\x2BA\x3\x2\x2\x2\x2BC\x2BB\x3\x2\x2\x2\x2BD\x83\x3\x2\x2\x2\x2BE"+
		"\x2BF\a\x1F\x2\x2\x2BF\x2C4\x5\x88\x45\x2\x2C0\x2C1\a\x1D\x2\x2\x2C1\x2C3"+
		"\x5\x88\x45\x2\x2C2\x2C0\x3\x2\x2\x2\x2C3\x2C6\x3\x2\x2\x2\x2C4\x2C2\x3"+
		"\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C7\x3\x2\x2\x2\x2C6\x2C4\x3\x2"+
		"\x2\x2\x2C7\x2C8\a \x2\x2\x2C8\x85\x3\x2\x2\x2\x2C9\x2CE\x5\x8CG\x2\x2CA"+
		"\x2CB\a,\x2\x2\x2CB\x2CD\x5\x8CG\x2\x2CC\x2CA\x3\x2\x2\x2\x2CD\x2D0\x3"+
		"\x2\x2\x2\x2CE\x2CC\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x87\x3\x2\x2"+
		"\x2\x2D0\x2CE\x3\x2\x2\x2\x2D1\x2D4\x5\x8A\x46\x2\x2D2\x2D4\x5\x86\x44"+
		"\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x89\x3\x2\x2\x2\x2D5"+
		"\x2DB\x5\x90I\x2\x2D6\x2DB\x5\x8EH\x2\x2D7\x2DB\a\x36\x2\x2\x2D8\x2DB"+
		"\a\x38\x2\x2\x2D9\x2DB\a\x39\x2\x2\x2DA\x2D5\x3\x2\x2\x2\x2DA\x2D6\x3"+
		"\x2\x2\x2\x2DA\x2D7\x3\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DA\x2D9\x3\x2"+
		"\x2\x2\x2DB\x8B\x3\x2\x2\x2\x2DC\x2DD\t\x5\x2\x2\x2DD\x8D\x3\x2\x2\x2"+
		"\x2DE\x2DF\t\x6\x2\x2\x2DF\x8F\x3\x2\x2\x2\x2E0\x2E1\a\x1A\x2\x2\x2E1"+
		"\x91\x3\x2\x2\x2\x63\x93\x98\xA1\xA8\xB2\xB8\xC0\xCE\xD4\xDC\xE6\xEE\xF2"+
		"\xF9\x102\x10A\x10F\x118\x11E\x123\x126\x12B\x12F\x133\x136\x139\x13C"+
		"\x141\x14C\x150\x15B\x166\x173\x17E\x187\x18A\x18D\x193\x198\x19C\x1AA"+
		"\x1AF\x1B2\x1B7\x1BB\x1BF\x1C3\x1C7\x1C9\x1CF\x1DB\x1E4\x1E8\x1EC\x1F3"+
		"\x1F7\x1FC\x202\x208\x20D\x213\x218\x21A\x220\x224\x22A\x22E\x232\x234"+
		"\x23D\x23F\x247\x249\x24F\x257\x25E\x262\x266\x26A\x26F\x273\x27A\x27D"+
		"\x285\x289\x28B\x293\x29D\x29F\x2A6\x2AC\x2B5\x2BC\x2C4\x2CE\x2D3\x2DA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
