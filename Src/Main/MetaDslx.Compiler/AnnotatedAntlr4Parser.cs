//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnnotatedAntlr4Parser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class AnnotatedAntlr4Parser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, BEGIN_ARG_ACTION=5, 
		OPTIONS=6, TOKENS=7, IMPORT=8, FRAGMENT=9, LEXER=10, PARSER=11, GRAMMAR=12, 
		PROTECTED=13, PUBLIC=14, PRIVATE=15, RETURNS=16, LOCALS=17, THROWS=18, 
		CATCH=19, FINALLY=20, MODE=21, TRUE=22, FALSE=23, NULL=24, COLON=25, COLONCOLON=26, 
		COMMA=27, SEMI=28, LPAREN=29, RPAREN=30, RARROW=31, LT=32, GT=33, ASSIGN=34, 
		QUESTION=35, STAR=36, PLUS=37, PLUS_ASSIGN=38, OR=39, DOLLAR=40, DOT=41, 
		RANGE=42, AT=43, POUND=44, NOT=45, LBRACE=46, RBRACE=47, ID=48, INT=49, 
		STRING_LITERAL=50, UNTERMINATED_STRING_LITERAL=51, WS=52, ACTION=53, ERRCHAR=54, 
		ARG_ACTION=55, UNTERMINATED_ARG_ACTION=56, UNTERMINATED_CHAR_SET=57, DOC_COMMENT=58, 
		BLOCK_COMMENT=59;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_action = 9, RULE_actionScopeName = 10, 
		RULE_modeSpec = 11, RULE_rules = 12, RULE_ruleSpec = 13, RULE_parserRuleSpec = 14, 
		RULE_exceptionGroup = 15, RULE_exceptionHandler = 16, RULE_finallyClause = 17, 
		RULE_rulePrequel = 18, RULE_ruleReturns = 19, RULE_throwsSpec = 20, RULE_localsSpec = 21, 
		RULE_ruleAction = 22, RULE_ruleModifiers = 23, RULE_ruleModifier = 24, 
		RULE_ruleBlock = 25, RULE_ruleAltList = 26, RULE_labeledAlt = 27, RULE_lexerRule = 28, 
		RULE_lexerRuleBlock = 29, RULE_lexerAltList = 30, RULE_lexerAlt = 31, 
		RULE_lexerElements = 32, RULE_lexerElement = 33, RULE_labeledLexerElement = 34, 
		RULE_lexerBlock = 35, RULE_lexerCommands = 36, RULE_lexerCommand = 37, 
		RULE_lexerCommandName = 38, RULE_lexerCommandExpr = 39, RULE_altList = 40, 
		RULE_alternative = 41, RULE_annotatedElement = 42, RULE_element = 43, 
		RULE_labeledElement = 44, RULE_ebnf = 45, RULE_blockSuffix = 46, RULE_ebnfSuffix = 47, 
		RULE_lexerAtom = 48, RULE_atom = 49, RULE_notSet = 50, RULE_blockSet = 51, 
		RULE_setElement = 52, RULE_block = 53, RULE_ruleref = 54, RULE_range = 55, 
		RULE_terminal = 56, RULE_elementOptions = 57, RULE_elementOption = 58, 
		RULE_id = 59, RULE_annotation = 60, RULE_annotationBody = 61, RULE_annotationAttributeList = 62, 
		RULE_annotationAttribute = 63, RULE_annotationValue = 64, RULE_qualifiedName = 65, 
		RULE_identifier = 66, RULE_boolean = 67, RULE_null = 68;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "action", 
		"actionScopeName", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", 
		"exceptionGroup", "exceptionHandler", "finallyClause", "rulePrequel", 
		"ruleReturns", "throwsSpec", "localsSpec", "ruleAction", "ruleModifiers", 
		"ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", "lexerRule", 
		"lexerRuleBlock", "lexerAltList", "lexerAlt", "lexerElements", "lexerElement", 
		"labeledLexerElement", "lexerBlock", "lexerCommands", "lexerCommand", 
		"lexerCommandName", "lexerCommandExpr", "altList", "alternative", "annotatedElement", 
		"element", "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", "lexerAtom", 
		"atom", "notSet", "blockSet", "setElement", "block", "ruleref", "range", 
		"terminal", "elementOptions", "elementOption", "id", "annotation", "annotationBody", 
		"annotationAttributeList", "annotationAttribute", "annotationValue", "qualifiedName", 
		"identifier", "boolean", "null"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'import'", "'fragment'", 
		"'lexer'", "'parser'", "'grammar'", "'protected'", "'public'", "'private'", 
		"'returns'", "'locals'", "'throws'", "'catch'", "'finally'", "'mode'", 
		"'true'", "'false'", "'null'", "':'", "'::'", "','", "';'", "'('", "')'", 
		"'->'", "'<'", "'>'", "'='", "'?'", null, "'+'", "'+='", "'|'", "'$'", 
		"'.'", "'..'", "'@'", "'#'", "'~'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "BEGIN_ARG_ACTION", 
		"OPTIONS", "TOKENS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", "GRAMMAR", 
		"PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", "CATCH", 
		"FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", "COMMA", 
		"SEMI", "LPAREN", "RPAREN", "RARROW", "LT", "GT", "ASSIGN", "QUESTION", 
		"STAR", "PLUS", "PLUS_ASSIGN", "OR", "DOLLAR", "DOT", "RANGE", "AT", "POUND", 
		"NOT", "LBRACE", "RBRACE", "ID", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"WS", "ACTION", "ERRCHAR", "ARG_ACTION", "UNTERMINATED_ARG_ACTION", "UNTERMINATED_CHAR_SET", 
		"DOC_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnnotatedAntlr4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnnotatedAntlr4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AnnotatedAntlr4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 138; Match(DOC_COMMENT);
				}
			}

			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 141; annotation();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 147; grammarType();
			State = 148; id();
			State = 149; Match(SEMI);
			State = 153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 150; prequelConstruct();
					}
					} 
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 156; rules();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==AT) {
				{
				{
				State = 157; modeSpec();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 163; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(AnnotatedAntlr4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 165; Match(LEXER);
				State = 166; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 167; Match(PARSER);
				State = 168; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 169; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 176;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; tokensSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(AnnotatedAntlr4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(AnnotatedAntlr4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(AnnotatedAntlr4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(OPTIONS);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 179; option();
				State = 180; Match(SEMI);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 187; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; id();
			State = 190; Match(ASSIGN);
			State = 191; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode INT() { return GetToken(AnnotatedAntlr4Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 204;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; id();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 194; Match(DOT);
					State = 195; id();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 202; Match(ACTION);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 203; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(AnnotatedAntlr4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(IMPORT);
			State = 207; delegateGrammar();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 208; Match(COMMA);
				State = 209; delegateGrammar();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 215; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 222;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; id();
				State = 218; Match(ASSIGN);
				State = 219; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(AnnotatedAntlr4Parser.TOKENS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(TOKENS);
			State = 225; id();
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 226; Match(COMMA);
					State = 227; id();
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 234;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 233; Match(COMMA);
				}
			}

			State = 236; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(AnnotatedAntlr4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 18, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(AT);
			State = 242;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 239; actionScopeName();
				State = 240; Match(COLONCOLON);
				}
				break;
			}
			State = 244; id();
			State = 245; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_actionScopeName);
		try {
			State = 250;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleContext[] lexerRule() {
			return GetRuleContexts<LexerRuleContext>();
		}
		public LexerRuleContext lexerRule(int i) {
			return GetRuleContext<LexerRuleContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 252; annotation();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 258; Match(MODE);
			State = 259; id();
			State = 260; Match(SEMI);
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 261; lexerRule();
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 24, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 267; ruleSpec();
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_ruleSpec);
		try {
			State = 275;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; lexerRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 277; Match(DOC_COMMENT);
				}
			}

			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 280; annotation();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 287;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 286; ruleModifiers();
				}
			}

			State = 289; Match(RULE_REF);
			State = 291;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 290; Match(ARG_ACTION);
				}
			}

			State = 294;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 293; ruleReturns();
				}
			}

			State = 297;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 296; throwsSpec();
				}
			}

			State = 300;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 299; localsSpec();
				}
			}

			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 302; rulePrequel();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 308; Match(COLON);
			State = 309; ruleBlock();
			State = 310; Match(SEMI);
			State = 311; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 313; exceptionHandler();
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 320;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 319; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(AnnotatedAntlr4Parser.CATCH, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 32, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(CATCH);
			State = 323; Match(ARG_ACTION);
			State = 324; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(AnnotatedAntlr4Parser.FINALLY, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(FINALLY);
			State = 327; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 36, RULE_rulePrequel);
		try {
			State = 331;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(AnnotatedAntlr4Parser.RETURNS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 38, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(RETURNS);
			State = 334; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(AnnotatedAntlr4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 40, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(THROWS);
			State = 337; id();
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 338; Match(COMMA);
				State = 339; id();
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(AnnotatedAntlr4Parser.LOCALS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(LOCALS);
			State = 346; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 44, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(AT);
			State = 349; id();
			State = 350; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 352; ruleModifier();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(AnnotatedAntlr4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AnnotatedAntlr4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(AnnotatedAntlr4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; labeledAlt();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 362; Match(OR);
				State = 363; labeledAlt();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(AnnotatedAntlr4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 54, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; alternative();
			State = 378;
			_la = TokenStream.La(1);
			if (_la==AT || _la==POUND) {
				{
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 370; annotation();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 376; Match(POUND);
				State = 377; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 56, RULE_lexerRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 380; Match(DOC_COMMENT);
				}
			}

			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 383; annotation();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 390;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 389; Match(FRAGMENT);
				}
			}

			State = 392; Match(TOKEN_REF);
			State = 393; Match(COLON);
			State = 394; lexerRuleBlock();
			State = 395; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 60, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; lexerAlt();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 400; Match(OR);
				State = 401; lexerAlt();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 62, RULE_lexerAlt);
		int _la;
		try {
			State = 412;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case LPAREN:
			case DOT:
			case NOT:
			case STRING_LITERAL:
			case ACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407; lexerElements();
				State = 409;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 408; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 64, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 414; lexerElement();
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerElement);
		int _la;
		try {
			State = 435;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419; labeledLexerElement();
				State = 421;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 420; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; lexerAtom();
				State = 425;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 424; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; lexerBlock();
				State = 429;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 428; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431; Match(ACTION);
				State = 433;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 432; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 68, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; id();
			State = 438;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 441;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 439; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 440; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(LPAREN);
			State = 444; lexerAltList();
			State = 445; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(RARROW);
			State = 448; lexerCommand();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 449; Match(COMMA);
				State = 450; lexerCommand();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerCommand);
		try {
			State = 462;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456; lexerCommandName();
				State = 457; Match(LPAREN);
				State = 458; lexerCommandExpr();
				State = 459; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerCommandName);
		try {
			State = 466;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INT() { return GetToken(AnnotatedAntlr4Parser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerCommandExpr);
		try {
			State = 470;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; id();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 469; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 80, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; alternative();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 473; Match(OR);
				State = 474; alternative();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AnnotatedElementContext[] annotatedElement() {
			return GetRuleContexts<AnnotatedElementContext>();
		}
		public AnnotatedElementContext annotatedElement(int i) {
			return GetRuleContext<AnnotatedElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 82, RULE_alternative);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 480; elementOptions();
				}
			}

			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 483; annotatedElement();
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedElementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedElementContext annotatedElement() {
		AnnotatedElementContext _localctx = new AnnotatedElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_annotatedElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AT) {
				{
				{
				State = 489; annotation();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 495; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 86, RULE_element);
		int _la;
		try {
			State = 512;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497; labeledElement();
				State = 500;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 498; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case AT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502; atom();
				State = 505;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 503; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case AT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 508; Match(ACTION);
				State = 510;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 509; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; id();
			State = 515;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 518;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 516; atom();
				}
				break;
			case LPAREN:
				{
				State = 517; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 90, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; block();
			State = 522;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 521; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 92, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(AnnotatedAntlr4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(AnnotatedAntlr4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(AnnotatedAntlr4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(AnnotatedAntlr4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 94, RULE_ebnfSuffix);
		int _la;
		try {
			State = 538;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; Match(QUESTION);
				State = 528;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 527; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; Match(STAR);
				State = 532;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 531; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 534; Match(PLUS);
				State = 536;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 535; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 96, RULE_lexerAtom);
		int _la;
		try {
			State = 549;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 543; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 544; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 545; Match(DOT);
				State = 547;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 546; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 98, RULE_atom);
		int _la;
		try {
			State = 559;
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 553; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 554; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 555; Match(DOT);
				State = 557;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 556; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(AnnotatedAntlr4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 100, RULE_notSet);
		try {
			State = 565;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; Match(NOT);
				State = 562; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563; Match(NOT);
				State = 564; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 102, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(LPAREN);
			State = 568; setElement();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 569; Match(OR);
				State = 570; setElement();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 576; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 104, RULE_setElement);
		int _la;
		try {
			State = 588;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578; Match(TOKEN_REF);
				State = 580;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 579; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582; Match(STRING_LITERAL);
				State = 584;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 583; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 586; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 587; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 106, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(LPAREN);
			State = 601;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 592;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 591; optionsSpec();
					}
				}

				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 594; ruleAction();
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 600; Match(COLON);
				}
				break;
			}
			State = 603; altList();
			State = 604; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 108, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(RULE_REF);
			State = 608;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 607; Match(ARG_ACTION);
				}
			}

			State = 611;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 610; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(AnnotatedAntlr4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(AnnotatedAntlr4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 110, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; Match(STRING_LITERAL);
			State = 614; Match(RANGE);
			State = 615; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 112, RULE_terminal);
		int _la;
		try {
			State = 625;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; Match(TOKEN_REF);
				State = 619;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 618; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621; Match(STRING_LITERAL);
				State = 623;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 622; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(AnnotatedAntlr4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(AnnotatedAntlr4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 114, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; Match(LT);
			State = 628; elementOption();
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 629; Match(COMMA);
				State = 630; elementOption();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 636; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementOption);
		try {
			State = 645;
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 638; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 639; id();
				State = 640; Match(ASSIGN);
				State = 643;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 641; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 642; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 118, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; Match(AT);
			State = 650; qualifiedName();
			State = 652;
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 651; annotationBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; Match(LPAREN);
			State = 656;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << ID))) != 0)) {
				{
				State = 655; annotationAttributeList();
				}
			}

			State = 658; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; annotationAttribute();
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 661; Match(COMMA);
				State = 662; annotationAttribute();
				}
				}
				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public AnnotationValueContext annotationValue() {
			return GetRuleContext<AnnotationValueContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotationAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668; identifier();
			State = 671;
			_la = TokenStream.La(1);
			if (_la==ASSIGN) {
				{
				State = 669; Match(ASSIGN);
				State = 670; annotationValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationValueContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NullContext @null() {
			return GetRuleContext<NullContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode INT() { return GetToken(AnnotatedAntlr4Parser.INT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public AnnotationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationValueContext annotationValue() {
		AnnotationValueContext _localctx = new AnnotationValueContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotationValue);
		try {
			State = 678;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; qualifiedName();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674; @null();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 675; boolean();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 676; Match(INT);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 677; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; identifier();
			State = 685;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 681; Match(DOT);
					State = 682; identifier();
					}
					} 
				}
				State = 687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ID() { return GetToken(AnnotatedAntlr4Parser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_identifier);
		try {
			State = 690;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688; id();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(AnnotatedAntlr4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AnnotatedAntlr4Parser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 134, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(AnnotatedAntlr4Parser.NULL, 0); }
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(Context, State);
		EnterRule(_localctx, 136, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3=\x2BB\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x3\x2\x5\x2\x8E\n\x2\x3\x2\a\x2\x91\n\x2\f\x2\xE\x2\x94"+
		"\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x9A\n\x2\f\x2\xE\x2\x9D\v\x2\x3\x2"+
		"\x3\x2\a\x2\xA1\n\x2\f\x2\xE\x2\xA4\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\xAD\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xB3\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\a\x5\xB9\n\x5\f\x5\xE\x5\xBC\v\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xC7\n\a\f\a\xE\a\xCA\v\a\x3\a"+
		"\x3\a\x3\a\x5\a\xCF\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xD5\n\b\f\b\xE\b\xD8\v"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xE1\n\t\x3\n\x3\n\x3\n\x3\n"+
		"\a\n\xE7\n\n\f\n\xE\n\xEA\v\n\x3\n\x5\n\xED\n\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\v\x5\v\xF5\n\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\xFD\n\f\x3\r\a"+
		"\r\x100\n\r\f\r\xE\r\x103\v\r\x3\r\x3\r\x3\r\x3\r\a\r\x109\n\r\f\r\xE"+
		"\r\x10C\v\r\x3\xE\a\xE\x10F\n\xE\f\xE\xE\xE\x112\v\xE\x3\xF\x3\xF\x5\xF"+
		"\x116\n\xF\x3\x10\x5\x10\x119\n\x10\x3\x10\a\x10\x11C\n\x10\f\x10\xE\x10"+
		"\x11F\v\x10\x3\x10\x5\x10\x122\n\x10\x3\x10\x3\x10\x5\x10\x126\n\x10\x3"+
		"\x10\x5\x10\x129\n\x10\x3\x10\x5\x10\x12C\n\x10\x3\x10\x5\x10\x12F\n\x10"+
		"\x3\x10\a\x10\x132\n\x10\f\x10\xE\x10\x135\v\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x11\a\x11\x13D\n\x11\f\x11\xE\x11\x140\v\x11\x3\x11"+
		"\x5\x11\x143\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x5\x14\x14E\n\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\a\x16\x157\n\x16\f\x16\xE\x16\x15A\v\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x6\x19\x164\n\x19\r\x19\xE\x19\x165"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x16F\n\x1C\f\x1C"+
		"\xE\x1C\x172\v\x1C\x3\x1D\x3\x1D\a\x1D\x176\n\x1D\f\x1D\xE\x1D\x179\v"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x17D\n\x1D\x3\x1E\x5\x1E\x180\n\x1E\x3\x1E\a"+
		"\x1E\x183\n\x1E\f\x1E\xE\x1E\x186\v\x1E\x3\x1E\x5\x1E\x189\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \a \x195\n \f \xE"+
		" \x198\v \x3!\x3!\x5!\x19C\n!\x3!\x5!\x19F\n!\x3\"\x6\"\x1A2\n\"\r\"\xE"+
		"\"\x1A3\x3#\x3#\x5#\x1A8\n#\x3#\x3#\x5#\x1AC\n#\x3#\x3#\x5#\x1B0\n#\x3"+
		"#\x3#\x5#\x1B4\n#\x5#\x1B6\n#\x3$\x3$\x3$\x3$\x5$\x1BC\n$\x3%\x3%\x3%"+
		"\x3%\x3&\x3&\x3&\x3&\a&\x1C6\n&\f&\xE&\x1C9\v&\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x5\'\x1D1\n\'\x3(\x3(\x5(\x1D5\n(\x3)\x3)\x5)\x1D9\n)\x3*\x3*"+
		"\x3*\a*\x1DE\n*\f*\xE*\x1E1\v*\x3+\x5+\x1E4\n+\x3+\a+\x1E7\n+\f+\xE+\x1EA"+
		"\v+\x3,\a,\x1ED\n,\f,\xE,\x1F0\v,\x3,\x3,\x3-\x3-\x3-\x5-\x1F7\n-\x3-"+
		"\x3-\x3-\x5-\x1FC\n-\x3-\x3-\x3-\x5-\x201\n-\x5-\x203\n-\x3.\x3.\x3.\x3"+
		".\x5.\x209\n.\x3/\x3/\x5/\x20D\n/\x3\x30\x3\x30\x3\x31\x3\x31\x5\x31\x213"+
		"\n\x31\x3\x31\x3\x31\x5\x31\x217\n\x31\x3\x31\x3\x31\x5\x31\x21B\n\x31"+
		"\x5\x31\x21D\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x226\n\x32\x5\x32\x228\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x5\x33\x230\n\x33\x5\x33\x232\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5"+
		"\x34\x238\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x23E\n\x35\f\x35\xE"+
		"\x35\x241\v\x35\x3\x35\x3\x35\x3\x36\x3\x36\x5\x36\x247\n\x36\x3\x36\x3"+
		"\x36\x5\x36\x24B\n\x36\x3\x36\x3\x36\x5\x36\x24F\n\x36\x3\x37\x3\x37\x5"+
		"\x37\x253\n\x37\x3\x37\a\x37\x256\n\x37\f\x37\xE\x37\x259\v\x37\x3\x37"+
		"\x5\x37\x25C\n\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x263\n\x38"+
		"\x3\x38\x5\x38\x266\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x5:\x26E"+
		"\n:\x3:\x3:\x5:\x272\n:\x5:\x274\n:\x3;\x3;\x3;\x3;\a;\x27A\n;\f;\xE;"+
		"\x27D\v;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x5<\x286\n<\x5<\x288\n<\x3=\x3=\x3"+
		">\x3>\x3>\x5>\x28F\n>\x3?\x3?\x5?\x293\n?\x3?\x3?\x3@\x3@\x3@\a@\x29A"+
		"\n@\f@\xE@\x29D\v@\x3\x41\x3\x41\x3\x41\x5\x41\x2A2\n\x41\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x2A9\n\x42\x3\x43\x3\x43\x3\x43\a\x43\x2AE"+
		"\n\x43\f\x43\xE\x43\x2B1\v\x43\x3\x44\x3\x44\x5\x44\x2B5\n\x44\x3\x45"+
		"\x3\x45\x3\x46\x3\x46\x3\x46\x2\x2G\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16"+
		"\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTV"+
		"XZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x2\x6\x4\x2\v\v"+
		"\xF\x11\x4\x2$$((\x3\x2\x3\x4\x3\x2\x18\x19\x2E9\x2\x8D\x3\x2\x2\x2\x4"+
		"\xAC\x3\x2\x2\x2\x6\xB2\x3\x2\x2\x2\b\xB4\x3\x2\x2\x2\n\xBF\x3\x2\x2\x2"+
		"\f\xCE\x3\x2\x2\x2\xE\xD0\x3\x2\x2\x2\x10\xE0\x3\x2\x2\x2\x12\xE2\x3\x2"+
		"\x2\x2\x14\xF0\x3\x2\x2\x2\x16\xFC\x3\x2\x2\x2\x18\x101\x3\x2\x2\x2\x1A"+
		"\x110\x3\x2\x2\x2\x1C\x115\x3\x2\x2\x2\x1E\x118\x3\x2\x2\x2 \x13E\x3\x2"+
		"\x2\x2\"\x144\x3\x2\x2\x2$\x148\x3\x2\x2\x2&\x14D\x3\x2\x2\x2(\x14F\x3"+
		"\x2\x2\x2*\x152\x3\x2\x2\x2,\x15B\x3\x2\x2\x2.\x15E\x3\x2\x2\x2\x30\x163"+
		"\x3\x2\x2\x2\x32\x167\x3\x2\x2\x2\x34\x169\x3\x2\x2\x2\x36\x16B\x3\x2"+
		"\x2\x2\x38\x173\x3\x2\x2\x2:\x17F\x3\x2\x2\x2<\x18F\x3\x2\x2\x2>\x191"+
		"\x3\x2\x2\x2@\x19E\x3\x2\x2\x2\x42\x1A1\x3\x2\x2\x2\x44\x1B5\x3\x2\x2"+
		"\x2\x46\x1B7\x3\x2\x2\x2H\x1BD\x3\x2\x2\x2J\x1C1\x3\x2\x2\x2L\x1D0\x3"+
		"\x2\x2\x2N\x1D4\x3\x2\x2\x2P\x1D8\x3\x2\x2\x2R\x1DA\x3\x2\x2\x2T\x1E3"+
		"\x3\x2\x2\x2V\x1EE\x3\x2\x2\x2X\x202\x3\x2\x2\x2Z\x204\x3\x2\x2\x2\\\x20A"+
		"\x3\x2\x2\x2^\x20E\x3\x2\x2\x2`\x21C\x3\x2\x2\x2\x62\x227\x3\x2\x2\x2"+
		"\x64\x231\x3\x2\x2\x2\x66\x237\x3\x2\x2\x2h\x239\x3\x2\x2\x2j\x24E\x3"+
		"\x2\x2\x2l\x250\x3\x2\x2\x2n\x260\x3\x2\x2\x2p\x267\x3\x2\x2\x2r\x273"+
		"\x3\x2\x2\x2t\x275\x3\x2\x2\x2v\x287\x3\x2\x2\x2x\x289\x3\x2\x2\x2z\x28B"+
		"\x3\x2\x2\x2|\x290\x3\x2\x2\x2~\x296\x3\x2\x2\x2\x80\x29E\x3\x2\x2\x2"+
		"\x82\x2A8\x3\x2\x2\x2\x84\x2AA\x3\x2\x2\x2\x86\x2B4\x3\x2\x2\x2\x88\x2B6"+
		"\x3\x2\x2\x2\x8A\x2B8\x3\x2\x2\x2\x8C\x8E\a<\x2\x2\x8D\x8C\x3\x2\x2\x2"+
		"\x8D\x8E\x3\x2\x2\x2\x8E\x92\x3\x2\x2\x2\x8F\x91\x5z>\x2\x90\x8F\x3\x2"+
		"\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93"+
		"\x95\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x96\x5\x4\x3\x2\x96\x97\x5x="+
		"\x2\x97\x9B\a\x1E\x2\x2\x98\x9A\x5\x6\x4\x2\x99\x98\x3\x2\x2\x2\x9A\x9D"+
		"\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3\x2\x2"+
		"\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA2\x5\x1A\xE\x2\x9F\xA1\x5\x18\r\x2\xA0\x9F"+
		"\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2"+
		"\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA6\a\x2\x2\x3\xA6\x3"+
		"\x3\x2\x2\x2\xA7\xA8\a\f\x2\x2\xA8\xAD\a\xE\x2\x2\xA9\xAA\a\r\x2\x2\xAA"+
		"\xAD\a\xE\x2\x2\xAB\xAD\a\xE\x2\x2\xAC\xA7\x3\x2\x2\x2\xAC\xA9\x3\x2\x2"+
		"\x2\xAC\xAB\x3\x2\x2\x2\xAD\x5\x3\x2\x2\x2\xAE\xB3\x5\b\x5\x2\xAF\xB3"+
		"\x5\xE\b\x2\xB0\xB3\x5\x12\n\x2\xB1\xB3\x5\x14\v\x2\xB2\xAE\x3\x2\x2\x2"+
		"\xB2\xAF\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\a\x3"+
		"\x2\x2\x2\xB4\xBA\a\b\x2\x2\xB5\xB6\x5\n\x6\x2\xB6\xB7\a\x1E\x2\x2\xB7"+
		"\xB9\x3\x2\x2\x2\xB8\xB5\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2"+
		"\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBD\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD"+
		"\xBE\a\x31\x2\x2\xBE\t\x3\x2\x2\x2\xBF\xC0\x5x=\x2\xC0\xC1\a$\x2\x2\xC1"+
		"\xC2\x5\f\a\x2\xC2\v\x3\x2\x2\x2\xC3\xC8\x5x=\x2\xC4\xC5\a+\x2\x2\xC5"+
		"\xC7\x5x=\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCF\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCF"+
		"\a\x34\x2\x2\xCC\xCF\a\x37\x2\x2\xCD\xCF\a\x33\x2\x2\xCE\xC3\x3\x2\x2"+
		"\x2\xCE\xCB\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF\r"+
		"\x3\x2\x2\x2\xD0\xD1\a\n\x2\x2\xD1\xD6\x5\x10\t\x2\xD2\xD3\a\x1D\x2\x2"+
		"\xD3\xD5\x5\x10\t\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3"+
		"\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2"+
		"\xD9\xDA\a\x1E\x2\x2\xDA\xF\x3\x2\x2\x2\xDB\xDC\x5x=\x2\xDC\xDD\a$\x2"+
		"\x2\xDD\xDE\x5x=\x2\xDE\xE1\x3\x2\x2\x2\xDF\xE1\x5x=\x2\xE0\xDB\x3\x2"+
		"\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1\x11\x3\x2\x2\x2\xE2\xE3\a\t\x2\x2\xE3\xE8"+
		"\x5x=\x2\xE4\xE5\a\x1D\x2\x2\xE5\xE7\x5x=\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEA"+
		"\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEC\x3\x2\x2"+
		"\x2\xEA\xE8\x3\x2\x2\x2\xEB\xED\a\x1D\x2\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED"+
		"\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\a\x31\x2\x2\xEF\x13\x3\x2\x2"+
		"\x2\xF0\xF4\a-\x2\x2\xF1\xF2\x5\x16\f\x2\xF2\xF3\a\x1C\x2\x2\xF3\xF5\x3"+
		"\x2\x2\x2\xF4\xF1\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2"+
		"\xF6\xF7\x5x=\x2\xF7\xF8\a\x37\x2\x2\xF8\x15\x3\x2\x2\x2\xF9\xFD\x5x="+
		"\x2\xFA\xFD\a\f\x2\x2\xFB\xFD\a\r\x2\x2\xFC\xF9\x3\x2\x2\x2\xFC\xFA\x3"+
		"\x2\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD\x17\x3\x2\x2\x2\xFE\x100\x5z>\x2\xFF"+
		"\xFE\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102\x104\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x105\a\x17"+
		"\x2\x2\x105\x106\x5x=\x2\x106\x10A\a\x1E\x2\x2\x107\x109\x5:\x1E\x2\x108"+
		"\x107\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B"+
		"\x3\x2\x2\x2\x10B\x19\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10F\x5\x1C"+
		"\xF\x2\x10E\x10D\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2"+
		"\x2\x110\x111\x3\x2\x2\x2\x111\x1B\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113"+
		"\x116\x5\x1E\x10\x2\x114\x116\x5:\x1E\x2\x115\x113\x3\x2\x2\x2\x115\x114"+
		"\x3\x2\x2\x2\x116\x1D\x3\x2\x2\x2\x117\x119\a<\x2\x2\x118\x117\x3\x2\x2"+
		"\x2\x118\x119\x3\x2\x2\x2\x119\x11D\x3\x2\x2\x2\x11A\x11C\x5z>\x2\x11B"+
		"\x11A\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E"+
		"\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x122\x5"+
		"\x30\x19\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\x3\x2"+
		"\x2\x2\x123\x125\a\x4\x2\x2\x124\x126\a\x39\x2\x2\x125\x124\x3\x2\x2\x2"+
		"\x125\x126\x3\x2\x2\x2\x126\x128\x3\x2\x2\x2\x127\x129\x5(\x15\x2\x128"+
		"\x127\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x12C"+
		"\x5*\x16\x2\x12B\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12E\x3\x2"+
		"\x2\x2\x12D\x12F\x5,\x17\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2"+
		"\x12F\x133\x3\x2\x2\x2\x130\x132\x5&\x14\x2\x131\x130\x3\x2\x2\x2\x132"+
		"\x135\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x136"+
		"\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x136\x137\a\x1B\x2\x2\x137\x138\x5"+
		"\x34\x1B\x2\x138\x139\a\x1E\x2\x2\x139\x13A\x5 \x11\x2\x13A\x1F\x3\x2"+
		"\x2\x2\x13B\x13D\x5\"\x12\x2\x13C\x13B\x3\x2\x2\x2\x13D\x140\x3\x2\x2"+
		"\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2"+
		"\x140\x13E\x3\x2\x2\x2\x141\x143\x5$\x13\x2\x142\x141\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143!\x3\x2\x2\x2\x144\x145\a\x15\x2\x2\x145\x146\a"+
		"\x39\x2\x2\x146\x147\a\x37\x2\x2\x147#\x3\x2\x2\x2\x148\x149\a\x16\x2"+
		"\x2\x149\x14A\a\x37\x2\x2\x14A%\x3\x2\x2\x2\x14B\x14E\x5\b\x5\x2\x14C"+
		"\x14E\x5.\x18\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14C\x3\x2\x2\x2\x14E\'\x3"+
		"\x2\x2\x2\x14F\x150\a\x12\x2\x2\x150\x151\a\x39\x2\x2\x151)\x3\x2\x2\x2"+
		"\x152\x153\a\x14\x2\x2\x153\x158\x5x=\x2\x154\x155\a\x1D\x2\x2\x155\x157"+
		"\x5x=\x2\x156\x154\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2"+
		"\x2\x158\x159\x3\x2\x2\x2\x159+\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B"+
		"\x15C\a\x13\x2\x2\x15C\x15D\a\x39\x2\x2\x15D-\x3\x2\x2\x2\x15E\x15F\a"+
		"-\x2\x2\x15F\x160\x5x=\x2\x160\x161\a\x37\x2\x2\x161/\x3\x2\x2\x2\x162"+
		"\x164\x5\x32\x1A\x2\x163\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x163"+
		"\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x31\x3\x2\x2\x2\x167\x168\t\x2"+
		"\x2\x2\x168\x33\x3\x2\x2\x2\x169\x16A\x5\x36\x1C\x2\x16A\x35\x3\x2\x2"+
		"\x2\x16B\x170\x5\x38\x1D\x2\x16C\x16D\a)\x2\x2\x16D\x16F\x5\x38\x1D\x2"+
		"\x16E\x16C\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170"+
		"\x171\x3\x2\x2\x2\x171\x37\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x17C"+
		"\x5T+\x2\x174\x176\x5z>\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2"+
		"\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17A\x3\x2\x2\x2\x179"+
		"\x177\x3\x2\x2\x2\x17A\x17B\a.\x2\x2\x17B\x17D\x5x=\x2\x17C\x177\x3\x2"+
		"\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x39\x3\x2\x2\x2\x17E\x180\a<\x2\x2\x17F"+
		"\x17E\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x184\x3\x2\x2\x2\x181\x183"+
		"\x5z>\x2\x182\x181\x3\x2\x2\x2\x183\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2"+
		"\x2\x184\x185\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2"+
		"\x187\x189\a\v\x2\x2\x188\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189"+
		"\x18A\x3\x2\x2\x2\x18A\x18B\a\x3\x2\x2\x18B\x18C\a\x1B\x2\x2\x18C\x18D"+
		"\x5<\x1F\x2\x18D\x18E\a\x1E\x2\x2\x18E;\x3\x2\x2\x2\x18F\x190\x5> \x2"+
		"\x190=\x3\x2\x2\x2\x191\x196\x5@!\x2\x192\x193\a)\x2\x2\x193\x195\x5@"+
		"!\x2\x194\x192\x3\x2\x2\x2\x195\x198\x3\x2\x2\x2\x196\x194\x3\x2\x2\x2"+
		"\x196\x197\x3\x2\x2\x2\x197?\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x199\x19B"+
		"\x5\x42\"\x2\x19A\x19C\x5J&\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2"+
		"\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19F\x3\x2\x2\x2\x19E\x199\x3\x2\x2\x2"+
		"\x19E\x19D\x3\x2\x2\x2\x19F\x41\x3\x2\x2\x2\x1A0\x1A2\x5\x44#\x2\x1A1"+
		"\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4"+
		"\x3\x2\x2\x2\x1A4\x43\x3\x2\x2\x2\x1A5\x1A7\x5\x46$\x2\x1A6\x1A8\x5`\x31"+
		"\x2\x1A7\x1A6\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1B6\x3\x2\x2\x2"+
		"\x1A9\x1AB\x5\x62\x32\x2\x1AA\x1AC\x5`\x31\x2\x1AB\x1AA\x3\x2\x2\x2\x1AB"+
		"\x1AC\x3\x2\x2\x2\x1AC\x1B6\x3\x2\x2\x2\x1AD\x1AF\x5H%\x2\x1AE\x1B0\x5"+
		"`\x31\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B6\x3\x2\x2"+
		"\x2\x1B1\x1B3\a\x37\x2\x2\x1B2\x1B4\a%\x2\x2\x1B3\x1B2\x3\x2\x2\x2\x1B3"+
		"\x1B4\x3\x2\x2\x2\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1A5\x3\x2\x2\x2\x1B5\x1A9"+
		"\x3\x2\x2\x2\x1B5\x1AD\x3\x2\x2\x2\x1B5\x1B1\x3\x2\x2\x2\x1B6\x45\x3\x2"+
		"\x2\x2\x1B7\x1B8\x5x=\x2\x1B8\x1BB\t\x3\x2\x2\x1B9\x1BC\x5\x62\x32\x2"+
		"\x1BA\x1BC\x5l\x37\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB\x1BA\x3\x2\x2\x2\x1BC"+
		"G\x3\x2\x2\x2\x1BD\x1BE\a\x1F\x2\x2\x1BE\x1BF\x5> \x2\x1BF\x1C0\a \x2"+
		"\x2\x1C0I\x3\x2\x2\x2\x1C1\x1C2\a!\x2\x2\x1C2\x1C7\x5L\'\x2\x1C3\x1C4"+
		"\a\x1D\x2\x2\x1C4\x1C6\x5L\'\x2\x1C5\x1C3\x3\x2\x2\x2\x1C6\x1C9\x3\x2"+
		"\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8K\x3\x2\x2\x2\x1C9"+
		"\x1C7\x3\x2\x2\x2\x1CA\x1CB\x5N(\x2\x1CB\x1CC\a\x1F\x2\x2\x1CC\x1CD\x5"+
		"P)\x2\x1CD\x1CE\a \x2\x2\x1CE\x1D1\x3\x2\x2\x2\x1CF\x1D1\x5N(\x2\x1D0"+
		"\x1CA\x3\x2\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1M\x3\x2\x2\x2\x1D2\x1D5\x5"+
		"x=\x2\x1D3\x1D5\a\x17\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D3\x3\x2\x2\x2"+
		"\x1D5O\x3\x2\x2\x2\x1D6\x1D9\x5x=\x2\x1D7\x1D9\a\x33\x2\x2\x1D8\x1D6\x3"+
		"\x2\x2\x2\x1D8\x1D7\x3\x2\x2\x2\x1D9Q\x3\x2\x2\x2\x1DA\x1DF\x5T+\x2\x1DB"+
		"\x1DC\a)\x2\x2\x1DC\x1DE\x5T+\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x1E1\x3\x2"+
		"\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0S\x3\x2\x2\x2\x1E1"+
		"\x1DF\x3\x2\x2\x2\x1E2\x1E4\x5t;\x2\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3"+
		"\x2\x2\x2\x1E4\x1E8\x3\x2\x2\x2\x1E5\x1E7\x5V,\x2\x1E6\x1E5\x3\x2\x2\x2"+
		"\x1E7\x1EA\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9"+
		"U\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EB\x1ED\x5z>\x2\x1EC\x1EB\x3\x2"+
		"\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2"+
		"\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F2\x5X-\x2\x1F2"+
		"W\x3\x2\x2\x2\x1F3\x1F6\x5Z.\x2\x1F4\x1F7\x5`\x31\x2\x1F5\x1F7\x3\x2\x2"+
		"\x2\x1F6\x1F4\x3\x2\x2\x2\x1F6\x1F5\x3\x2\x2\x2\x1F7\x203\x3\x2\x2\x2"+
		"\x1F8\x1FB\x5\x64\x33\x2\x1F9\x1FC\x5`\x31\x2\x1FA\x1FC\x3\x2\x2\x2\x1FB"+
		"\x1F9\x3\x2\x2\x2\x1FB\x1FA\x3\x2\x2\x2\x1FC\x203\x3\x2\x2\x2\x1FD\x203"+
		"\x5\\/\x2\x1FE\x200\a\x37\x2\x2\x1FF\x201\a%\x2\x2\x200\x1FF\x3\x2\x2"+
		"\x2\x200\x201\x3\x2\x2\x2\x201\x203\x3\x2\x2\x2\x202\x1F3\x3\x2\x2\x2"+
		"\x202\x1F8\x3\x2\x2\x2\x202\x1FD\x3\x2\x2\x2\x202\x1FE\x3\x2\x2\x2\x203"+
		"Y\x3\x2\x2\x2\x204\x205\x5x=\x2\x205\x208\t\x3\x2\x2\x206\x209\x5\x64"+
		"\x33\x2\x207\x209\x5l\x37\x2\x208\x206\x3\x2\x2\x2\x208\x207\x3\x2\x2"+
		"\x2\x209[\x3\x2\x2\x2\x20A\x20C\x5l\x37\x2\x20B\x20D\x5^\x30\x2\x20C\x20B"+
		"\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D]\x3\x2\x2\x2\x20E\x20F\x5`\x31"+
		"\x2\x20F_\x3\x2\x2\x2\x210\x212\a%\x2\x2\x211\x213\a%\x2\x2\x212\x211"+
		"\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x21D\x3\x2\x2\x2\x214\x216\a&"+
		"\x2\x2\x215\x217\a%\x2\x2\x216\x215\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2"+
		"\x217\x21D\x3\x2\x2\x2\x218\x21A\a\'\x2\x2\x219\x21B\a%\x2\x2\x21A\x219"+
		"\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21D\x3\x2\x2\x2\x21C\x210\x3"+
		"\x2\x2\x2\x21C\x214\x3\x2\x2\x2\x21C\x218\x3\x2\x2\x2\x21D\x61\x3\x2\x2"+
		"\x2\x21E\x228\x5p\x39\x2\x21F\x228\x5r:\x2\x220\x228\a\x4\x2\x2\x221\x228"+
		"\x5\x66\x34\x2\x222\x228\a\x5\x2\x2\x223\x225\a+\x2\x2\x224\x226\x5t;"+
		"\x2\x225\x224\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228\x3\x2\x2\x2"+
		"\x227\x21E\x3\x2\x2\x2\x227\x21F\x3\x2\x2\x2\x227\x220\x3\x2\x2\x2\x227"+
		"\x221\x3\x2\x2\x2\x227\x222\x3\x2\x2\x2\x227\x223\x3\x2\x2\x2\x228\x63"+
		"\x3\x2\x2\x2\x229\x232\x5p\x39\x2\x22A\x232\x5r:\x2\x22B\x232\x5n\x38"+
		"\x2\x22C\x232\x5\x66\x34\x2\x22D\x22F\a+\x2\x2\x22E\x230\x5t;\x2\x22F"+
		"\x22E\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x232\x3\x2\x2\x2\x231\x229"+
		"\x3\x2\x2\x2\x231\x22A\x3\x2\x2\x2\x231\x22B\x3\x2\x2\x2\x231\x22C\x3"+
		"\x2\x2\x2\x231\x22D\x3\x2\x2\x2\x232\x65\x3\x2\x2\x2\x233\x234\a/\x2\x2"+
		"\x234\x238\x5j\x36\x2\x235\x236\a/\x2\x2\x236\x238\x5h\x35\x2\x237\x233"+
		"\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238g\x3\x2\x2\x2\x239\x23A\a\x1F\x2"+
		"\x2\x23A\x23F\x5j\x36\x2\x23B\x23C\a)\x2\x2\x23C\x23E\x5j\x36\x2\x23D"+
		"\x23B\x3\x2\x2\x2\x23E\x241\x3\x2\x2\x2\x23F\x23D\x3\x2\x2\x2\x23F\x240"+
		"\x3\x2\x2\x2\x240\x242\x3\x2\x2\x2\x241\x23F\x3\x2\x2\x2\x242\x243\a "+
		"\x2\x2\x243i\x3\x2\x2\x2\x244\x246\a\x3\x2\x2\x245\x247\x5t;\x2\x246\x245"+
		"\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x24F\x3\x2\x2\x2\x248\x24A\a\x34"+
		"\x2\x2\x249\x24B\x5t;\x2\x24A\x249\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B"+
		"\x24F\x3\x2\x2\x2\x24C\x24F\x5p\x39\x2\x24D\x24F\a\x5\x2\x2\x24E\x244"+
		"\x3\x2\x2\x2\x24E\x248\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24D\x3"+
		"\x2\x2\x2\x24Fk\x3\x2\x2\x2\x250\x25B\a\x1F\x2\x2\x251\x253\x5\b\x5\x2"+
		"\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x257\x3\x2\x2\x2\x254"+
		"\x256\x5.\x18\x2\x255\x254\x3\x2\x2\x2\x256\x259\x3\x2\x2\x2\x257\x255"+
		"\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x257\x3"+
		"\x2\x2\x2\x25A\x25C\a\x1B\x2\x2\x25B\x252\x3\x2\x2\x2\x25B\x25C\x3\x2"+
		"\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E\x5R*\x2\x25E\x25F\a \x2\x2\x25F"+
		"m\x3\x2\x2\x2\x260\x262\a\x4\x2\x2\x261\x263\a\x39\x2\x2\x262\x261\x3"+
		"\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x265\x3\x2\x2\x2\x264\x266\x5t;\x2"+
		"\x265\x264\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266o\x3\x2\x2\x2\x267\x268"+
		"\a\x34\x2\x2\x268\x269\a,\x2\x2\x269\x26A\a\x34\x2\x2\x26Aq\x3\x2\x2\x2"+
		"\x26B\x26D\a\x3\x2\x2\x26C\x26E\x5t;\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E"+
		"\x3\x2\x2\x2\x26E\x274\x3\x2\x2\x2\x26F\x271\a\x34\x2\x2\x270\x272\x5"+
		"t;\x2\x271\x270\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x274\x3\x2\x2\x2"+
		"\x273\x26B\x3\x2\x2\x2\x273\x26F\x3\x2\x2\x2\x274s\x3\x2\x2\x2\x275\x276"+
		"\a\"\x2\x2\x276\x27B\x5v<\x2\x277\x278\a\x1D\x2\x2\x278\x27A\x5v<\x2\x279"+
		"\x277\x3\x2\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27B\x27C"+
		"\x3\x2\x2\x2\x27C\x27E\x3\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27E\x27F\a#"+
		"\x2\x2\x27Fu\x3\x2\x2\x2\x280\x288\x5x=\x2\x281\x282\x5x=\x2\x282\x285"+
		"\a$\x2\x2\x283\x286\x5x=\x2\x284\x286\a\x34\x2\x2\x285\x283\x3\x2\x2\x2"+
		"\x285\x284\x3\x2\x2\x2\x286\x288\x3\x2\x2\x2\x287\x280\x3\x2\x2\x2\x287"+
		"\x281\x3\x2\x2\x2\x288w\x3\x2\x2\x2\x289\x28A\t\x4\x2\x2\x28Ay\x3\x2\x2"+
		"\x2\x28B\x28C\a-\x2\x2\x28C\x28E\x5\x84\x43\x2\x28D\x28F\x5|?\x2\x28E"+
		"\x28D\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F{\x3\x2\x2\x2\x290\x292\a"+
		"\x1F\x2\x2\x291\x293\x5~@\x2\x292\x291\x3\x2\x2\x2\x292\x293\x3\x2\x2"+
		"\x2\x293\x294\x3\x2\x2\x2\x294\x295\a \x2\x2\x295}\x3\x2\x2\x2\x296\x29B"+
		"\x5\x80\x41\x2\x297\x298\a\x1D\x2\x2\x298\x29A\x5\x80\x41\x2\x299\x297"+
		"\x3\x2\x2\x2\x29A\x29D\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29B\x29C\x3"+
		"\x2\x2\x2\x29C\x7F\x3\x2\x2\x2\x29D\x29B\x3\x2\x2\x2\x29E\x2A1\x5\x86"+
		"\x44\x2\x29F\x2A0\a$\x2\x2\x2A0\x2A2\x5\x82\x42\x2\x2A1\x29F\x3\x2\x2"+
		"\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x81\x3\x2\x2\x2\x2A3\x2A9\x5\x84\x43\x2"+
		"\x2A4\x2A9\x5\x8A\x46\x2\x2A5\x2A9\x5\x88\x45\x2\x2A6\x2A9\a\x33\x2\x2"+
		"\x2A7\x2A9\a\x34\x2\x2\x2A8\x2A3\x3\x2\x2\x2\x2A8\x2A4\x3\x2\x2\x2\x2A8"+
		"\x2A5\x3\x2\x2\x2\x2A8\x2A6\x3\x2\x2\x2\x2A8\x2A7\x3\x2\x2\x2\x2A9\x83"+
		"\x3\x2\x2\x2\x2AA\x2AF\x5\x86\x44\x2\x2AB\x2AC\a+\x2\x2\x2AC\x2AE\x5\x86"+
		"\x44\x2\x2AD\x2AB\x3\x2\x2\x2\x2AE\x2B1\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2"+
		"\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x85\x3\x2\x2\x2\x2B1\x2AF\x3\x2\x2\x2\x2B2"+
		"\x2B5\x5x=\x2\x2B3\x2B5\a\x32\x2\x2\x2B4\x2B2\x3\x2\x2\x2\x2B4\x2B3\x3"+
		"\x2\x2\x2\x2B5\x87\x3\x2\x2\x2\x2B6\x2B7\t\x5\x2\x2\x2B7\x89\x3\x2\x2"+
		"\x2\x2B8\x2B9\a\x1A\x2\x2\x2B9\x8B\x3\x2\x2\x2_\x8D\x92\x9B\xA2\xAC\xB2"+
		"\xBA\xC8\xCE\xD6\xE0\xE8\xEC\xF4\xFC\x101\x10A\x110\x115\x118\x11D\x121"+
		"\x125\x128\x12B\x12E\x133\x13E\x142\x14D\x158\x165\x170\x177\x17C\x17F"+
		"\x184\x188\x196\x19B\x19E\x1A3\x1A7\x1AB\x1AF\x1B3\x1B5\x1BB\x1C7\x1D0"+
		"\x1D4\x1D8\x1DF\x1E3\x1E8\x1EE\x1F6\x1FB\x200\x202\x208\x20C\x212\x216"+
		"\x21A\x21C\x225\x227\x22F\x231\x237\x23F\x246\x24A\x24E\x252\x257\x25B"+
		"\x262\x265\x26D\x271\x273\x27B\x285\x287\x28E\x292\x29B\x2A1\x2A8\x2AF"+
		"\x2B4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
