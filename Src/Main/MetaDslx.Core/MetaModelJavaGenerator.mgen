namespace MetaDslx.Core;
generator MetaModelJavaGenerator for IEnumerable<ModelObject>;

template Generate()
	[loop(Instances->mm:typeof(MetaModel))]
[GenerateMetamodel(mm)]
	[end loop]
end template

template GenerateMetamodel(MetaModel model)
[GenerateMetaModelDescriptor(model)]
[GenerateMetaModelInstance(model)]
[loop(model->Namespace->Declarations->enm:typeof(MetaEnum))]
[GenerateEnum(enm)]
[end loop]
[loop(model->Namespace->Declarations->cls:typeof(MetaClass))]
[GenerateInterface(cls)]
[GenerateInterfaceImpl(model, cls)]
[end loop]
[GenerateFactory(model)]
[GenerateImplementationProvider(model)]
[GenerateImplementationBase(model)]
end template

template GenerateAnnotations(MetaAnnotatedElement elem)
[loop(elem->annot:Annotations)]
@[annot.Name]
[end loop]
end template

template GenerateEnum(MetaEnum enm)
package [enm.Namespace.JavaName()];
^
[GenerateAnnotations(enm)]
public enum [enm.JavaName()] {
    [loop(enm->value:EnumLiterals; string delim = ""; delim = ",")]
[delim]
    [value.Name]\
	[end loop]
;
[loop(enm->op:Operations)]
^
    public [op.ReturnType.JavaFullPublicName()] [op.Name.ToCamelCase()]([GetEnumImplParameters(enm, op)]) {
        [GetReturn(op)][enm.Model.Name]ImplementationProvider.implementation().[op.Parent.JavaName()]_[op.Name.ToCamelCase()]([GetEnumImplCallParameterNames(op)]);
    }
[end loop]
}
^
end template

function string GetAncestors(MetaClass cls)
	string result = "";
	loop(cls->super:SuperClasses; string delim = " extends "; delim = ", ")
		result += delim+super.JavaFullName();
	end loop
	return result;
end function

template GenerateInterface(MetaClass cls)
package [cls.Namespace.JavaName()];
^
[GenerateAnnotations(cls)]
public interface [cls.JavaName()][GetAncestors(cls)]
{
    [loop(cls->prop:Properties)]
    [GenerateProperty(prop)]
	[end loop]
^
    [loop(cls->op:Operations)]
    [GenerateOperation(op)]
	[end loop]
}
^
end template

template GenerateProperty(MetaProperty prop)
[prop.Type.JavaFullPublicName()] [("get"+prop.Name).SafeJavaName()]();
	[if((prop.Kind == MetaPropertyKind.Normal || prop.Kind == MetaPropertyKind.Containment) && !(prop.Type is MetaCollectionType))]
void [("set"+prop.Name).SafeJavaName()]([prop.Type.JavaFullPublicName()] value);
	[end if]
end template

function string GetParameters(MetaOperation op, bool defaultValues)
	string result = "";
	loop(op->param:Parameters; string delim = ""; delim = ", ")
		result += delim+param.Type.JavaFullPublicName()+" "+param.Name;
	end loop
	return result;
end function

function string GetImplParameters(MetaClass cls, MetaOperation op)
	string result = cls.JavaFullName()+" _this";
	string delim = ", ";
	loop(op->param:Parameters)
		result += delim+param.Type.JavaFullPublicName()+" "+param.Name;
	end loop
	return result;
end function

function string GetImplParameters(MetaEnum enm, MetaOperation op)
	string result = enm.JavaFullName()+" _this";
	string delim = ", ";
	loop(op->param:Parameters)
		result += delim+param.Type.JavaFullPublicName()+" "+param.Name;
	end loop
	return result;
end function

function string GetEnumImplParameters(MetaEnum enm, MetaOperation op)
	string result = enm.JavaFullName()+" _this";
	string delim = ", ";
	loop(op->param:Parameters)
		result += delim+param.Type.JavaFullPublicName()+" "+param.Name;
	end loop
	return result;
end function

function string GetEnumImplCallParameterNames(MetaOperation op)
	string result = "_this";
	string delim = ", ";
	loop(op->param:Parameters)
		result += delim+param.Name;
	end loop
	return result;
end function

function string GetImplCallParameterNames(MetaOperation op)
	string result = "this";
	string delim = ", ";
	loop(op->param:Parameters)
		result += delim+param.Name;
	end loop
	return result;
end function

template GenerateOperation(MetaOperation op)
[op.ReturnType.JavaFullPublicName()] [op.Name.ToCamelCase()]([GetParameters(op, true)]);
end template

template GenerateInterfaceImpl(MetaModel model, MetaClass cls)
package [cls.Namespace.JavaName()];
^
class [cls.JavaImplName()] extends metadslx.core.ModelObject implements [cls.JavaFullName()] {
    static {
        [cls.Model.JavaFullDescriptorName()].staticInit();
    }
^
	@Override
    public metadslx.core.MetaModel mMetaModel() {
        return [cls.Model.JavaFullInstanceName()]; 
    }
^
	@Override
    public metadslx.core.MetaClass mMetaClass() {
        return [cls.JavaFullInstanceName()]; 
    }
^
    [GenerateConstructorImpl(model, cls)]
	[HashSet<string> propMethodNames = new HashSet<string>()]
    [loop(cls->prop:GetAllProperties())]
    [GeneratePropertyImpl(model, cls, prop, propMethodNames)]
	[end loop]
	[HashSet<string> methodNames = new HashSet<string>()]
    [loop(cls->op:GetAllOperations())]
    [GenerateOperationImpl(model, op, methodNames)]
	[end loop]
}
^
end template

template GeneratePropertyDeclaration(MetaModel model, MetaClass cls, MetaProperty prop)
[if(prop.Class == cls)]
[GenerateAnnotations(prop)]
[if(prop.Kind == MetaPropertyKind.Containment)]
@metadslx.core.Containment
[end if]
[if(prop.Kind != MetaPropertyKind.Normal && prop.Kind != MetaPropertyKind.Containment)]
@metadslx.core.Readonly
[end if]
[loop(p:prop.OppositeProperties)]
@metadslx.core.Opposite(declaringType=[p.Class.JavaFullDescriptorName()].class, propertyName="[p.Name]")
[end if]
[loop(p:prop.SubsettedProperties)]
	[if(cls.GetAllSuperClasses(false).Contains(p.Class))]
@metadslx.core.Subsets(declaringType=[p.Class.JavaFullDescriptorName()].class, propertyName="[p.Name]")
	[else]
// ERROR: subsetted property '[p.JavaFullDescriptorName()]' must be a property of an ancestor class
	[end if]
[end if]
[loop(p:prop.RedefinedProperties)]
	[if(cls.GetAllSuperClasses(false).Contains(p.Class))]
@metadslx.core.Redefines(declaringType=[p.Class.JavaFullDescriptorName()].class, propertyName="[p.Name]")
	[else]
// ERROR: redefined property '[p.JavaFullDescriptorName()]' must be a property of an ancestor class
	[end if]
[end if]
[if (prop.Type is MetaCollectionType)]
public static final ModelProperty [prop.Name]Property =
    metadslx.core.ModelProperty.register("[prop.Name]", [prop.Type.JavaNonGenericFullName()].class, [((MetaCollectionType)prop.Type).InnerType.JavaNonGenericFullName()].class, [prop.Class.JavaFullName()].class, [prop.Class.Model.JavaFullName()]Descriptor.[prop.Class.JavaName()].class, metadslx.core.Lazy.create(() -> [prop.Class.Model.JavaFullName()]Instance.[prop.Class.JavaName()]_[prop.Name]Property, true));
[else]
public static final ModelProperty [prop.Name]Property =
    metadslx.core.ModelProperty.register("[prop.Name]", [prop.Type.JavaFullPublicName()].class, null, [prop.Class.JavaFullName()].class, [prop.Class.Model.JavaFullName()]Descriptor.[prop.Class.JavaName()].class, metadslx.core.Lazy.create(() -> [prop.Class.Model.JavaFullName()]Instance.[prop.Class.JavaName()]_[prop.Name]Property, true));
[end if]
[end if]
^
end template

template GeneratePropertyImpl(MetaModel model, MetaClass cls, MetaProperty prop, HashSet<string> generated)
[if (generated.Add("get"+prop.Name))]
^
public [prop.Type.JavaFullPublicName()] [("get"+prop.Name).SafeJavaName()]() {
    Object result = this.mGet([prop.JavaFullDescriptorName()]); 
    if (result != null) return ([prop.Type.JavaFullPublicName()])result;
    else return ([prop.Type.JavaFullPublicName()])[prop.Type.JavaDefaultValue()];
}
[end if]
[if((prop.Kind == MetaPropertyKind.Normal || prop.Kind == MetaPropertyKind.Containment) && !(prop.Type is MetaCollectionType))]
[if (generated.Add("set"+prop.Name))]
^
public void [("set"+prop.Name).SafeJavaName()]([prop.Type.JavaFullPublicName()] value) {
    this.mSet([prop.JavaFullDescriptorName()], value);
}
[end if]
[end if]
end template

function string GetCollectionConstructorParams(MetaProperty prop)
	MetaCollectionType mct = prop.Type as MetaCollectionType;
	if(mct != null && mct.InnerType is MetaClass)
		return "this, " + prop.JavaFullDescriptorName();
	else
		return "";
	end if
end function


template GenerateExpression(MetaExpression expr)
[switch (expr)]
[type as MetaBracketExpression:]([GenerateExpression(expr.Expression)])\
[type as MetaThisExpression:](([((MetaType)ModelCompilerContext.Current.ResolutionProvider.GetCurrentTypeScopeOf((ModelObject)expr)).JavaName()])this)\
[type as MetaNullExpression:]null\
[type as MetaTypeAsExpression:]metadslx.core.ModelUtils.as([expr.TypeReference.JavaName()].class,[GenerateExpression(expr.Expression)])\
[type as MetaTypeCastExpression:]([expr.TypeReference.JavaName()])[GenerateExpression(expr.Expression)]\
[type as MetaTypeCheckExpression:][GenerateExpression(expr.Expression)] instanceof [expr.TypeReference.JavaName()]\
[type as MetaTypeOfExpression:][GenerateTypeOf(expr)]\
[type as MetaConditionalExpression:][GenerateExpression(expr.Condition)] ? [GenerateExpression(expr.Then)] : [GenerateExpression(expr.Else)]\
[type as MetaConstantExpression:][GetJavaValue(expr.Value)]\
[type as MetaIdentifierExpression:][GenerateIdentifierExpression(expr)]\
[type as MetaMemberAccessExpression:][GenerateExpression(expr.Expression)].get[expr.Name]()\
[type as MetaFunctionCallExpression:][GenerateFunctionCall(expr)]\
[type as MetaIndexerExpression:][GenerateIndexerCall(expr)]\
[type as MetaOperatorExpression:][GenerateOperator(expr)]\
[type as MetaNewExpression:][expr.TypeReference.JavaFullFactoryMethodName()]([GenerateNewPropertyInitializers(expr)])\
[type as MetaNewCollectionExpression:]new java.util.ArrayList<metadslx.core.Lazy<Object>>() { [GenerateNewCollectionValues(expr)] }\
[default:]***unknown expression type***
[end switch]
end template

template GenerateIdentifierExpression(MetaIdentifierExpression expr)
[if (expr.Definition is MetaProperty)]
(([((MetaType)ModelCompilerContext.Current.ResolutionProvider.GetCurrentTypeScopeOf((ModelObject)expr)).JavaName()])this).get[expr.Name]()\
[else]
[expr.Name]\
[end if]
end template

function bool SameFunction(MetaGlobalFunction mfunc1, MetaGlobalFunction mfunc2)
	return mfunc1.Name == mfunc2.Name && ModelCompilerContext.Current.TypeProvider.Equals((ModelObject)mfunc1.Type, (ModelObject)mfunc2.Type);
end function

template GenerateFunctionCall(MetaFunctionCallExpression call)
[if (call.Definition is MetaGlobalFunction && SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.TypeOf))][GenerateTypeOf(call.Arguments[0])]\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.GetValueType))]ModelCompilerContext.current().getTypeProvider().getTypeOf([GenerateCallArguments(call, "")])\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.GetReturnType))]ModelCompilerContext.current().getTypeProvider().getReturnTypeOf([GenerateCallArguments(call, "(ModelObject)")])\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.CurrentType))]ModelCompilerContext.current().getResolutionProvider().getCurrentTypeScopeOf([GenerateCallArguments(call, "(ModelObject)")])\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.TypeCheck))]ModelCompilerContext.current().getTypeProvider().typeCheck([GenerateCallArguments(call, "(ModelObject)")])\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Balance))]ModelCompilerContext.current().getTypeProvider().balance([GenerateCallArguments(call, "(ModelObject)")])\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Resolve1))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { ModelCompilerContext.current().getResolutionProvider().getCurrentScope(this) }), ResolveKind.NameOrType, [GenerateExpression(call.Arguments[0])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Resolve2))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { (ModelObject)[GenerateExpression(call.Arguments[0])] }), ResolveKind.NameOrType, [GenerateExpression(call.Arguments[1])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.ResolveType1))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { ModelCompilerContext.current().getResolutionProvider().getCurrentScope(this) }), ResolveKind.Type, [GenerateExpression(call.Arguments[0])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.ResolveType2))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { (ModelObject)[GenerateExpression(call.Arguments[0])] }), ResolveKind.Type, [GenerateExpression(call.Arguments[1])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.ResolveName1))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { ModelCompilerContext.current().getResolutionProvider().getCurrentScope(this) }), ResolveKind.Name, [GenerateExpression(call.Arguments[0])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.ResolveName2))]ModelCompilerContext.current().getResolutionProvider().resolve(java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { (ModelObject)[GenerateExpression(call.Arguments[0])] }), ResolveKind.Name, [GenerateExpression(call.Arguments[1])], new ResolutionInfo(), ResolveFlags.All)\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Bind1))]ModelCompilerContext.current().getBindingProvider().bind(this, java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { (ModelObject)[GenerateExpression(call.Arguments[0])] }), new BindingInfo())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Bind2))]ModelCompilerContext.current().getBindingProvider().bind(this, [GenerateExpression(call.Arguments[0])], new BindingInfo())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Bind3))]ModelCompilerContext.current().getBindingProvider().bind((ModelObject)[GenerateExpression(call.Arguments[0])], java.util.Arrays.asList(new metadslx.core.ModelObject["[]"] { (ModelObject)[GenerateExpression(call.Arguments[1])] }), new BindingInfo())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.Bind4))]ModelCompilerContext.current().getBindingProvider().bind((ModelObject)[GenerateExpression(call.Arguments[0])], [GenerateExpression(call.Arguments[1])], new BindingInfo())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.SelectOfType1))]java.util.Arrays.asList(new Object["[]"] { [GenerateExpression(call.Arguments[0])] }).stream().filter(e -> ModelCompilerContext.current().getTypeProvider().getTypeOf(e) instanceof [GetTypeName(call.Arguments[1])]).collect(java.util.stream.Collectors.toList())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.SelectOfType2))]([GenerateExpression(call.Arguments[0])]).stream().filter(e -> ModelCompilerContext.current().getTypeProvider().getTypeOf(e) instanceof [GetTypeName(call.Arguments[1])]).collect(java.util.stream.Collectors.toList())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.SelectOfName1))]java.util.Arrays.asList(new Object["[]"] { [GenerateExpression(call.Arguments[0])] }).stream().filter(e -> ModelCompilerContext.current().getNameProvider().getNameOf((ModelObject)e) == [GenerateExpression(call.Arguments[1])]).collect(java.util.stream.Collectors.toList())\
[else if (SameFunction((MetaGlobalFunction)call.Definition, MetaInstance.SelectOfName2))]([GenerateExpression(call.Arguments[0])]).stream().filter(e -> ModelCompilerContext.current().getNameProvider().getNameOf((ModelObject)e) == [GenerateExpression(call.Arguments[1])]).collect(java.util.stream.Collectors.toList())\
[else][GenerateExpression(call.Expression)]([GenerateCallArguments(call, "")])\
[end if]
end template

template GenerateIndexerCall(MetaIndexerExpression call)
[GenerateExpression(call.Expression)]["["][GenerateCallArguments(call, "")]["]"]\
end template

template GenerateTypeOf(object expr)
[switch(expr)]
[type as MetaPrimitiveType:]
	[switch(expr.Name)]
	[case "*none*":]MetaInstance.None\
	[case "*error*":]MetaInstance.Error\
	[case "*any*":]MetaInstance.Any\
	[case "object":]MetaInstance.Object\
	[case "string":]MetaInstance.String\
	[case "int":]MetaInstance.Int\
	[case "long":]MetaInstance.Long\
	[case "float":]MetaInstance.Float\
	[case "double":]MetaInstance.Double\
	[case "byte":]MetaInstance.Byte\
	[case "bool":]MetaInstance.Bool\
	[case "void":]MetaInstance.Void\
	[case "ModelObject":]MetaInstance.ModelObject\
	[case "ModelObjectList":]MetaInstance.ModelObjectList\
	[end switch]
[type as MetaTypeOfExpression:][GenerateTypeOf(expr.TypeReference)]\
[type as MetaClass:][expr.JavaFullDescriptorName()].getMetaClass()\
[type as MetaCollectionType:][expr.JavaFullName()]\
[default:]***error***\
[end switch]
end template

template GenerateCallArguments(MetaBoundExpression call, string prefix)
[loop(call->arg:Arguments; string delim = ""; delim = ", ")]
[delim][prefix][GenerateExpression(arg)]\
[end loop]
end template

template GenerateOperator(MetaOperatorExpression expr)
[switch (expr)]
[type as MetaUnaryExpression:]
	[if (expr is MetaPostIncrementAssignExpression || expr is MetaPostDecrementAssignExpression)]
[GenerateExpression(expr.Expression)][GetJavaOperator(expr)]\
	[else]
[GetJavaOperator(expr)][GenerateExpression(expr.Expression)]\
	[end if]
[type as MetaBinaryExpression:]
[GenerateExpression(expr.Left)][GetJavaOperator(expr)][GenerateExpression(expr.Right)]\
[end switch]
end template

template GenerateNewPropertyInitializers(MetaNewExpression expr)
[if (hasloop(expr->pi:PropertyInitializers))]
java.util.Arrays.asList(new metadslx.core.ModelPropertyInitializer["[]"] {\
[loop(expr->pi:PropertyInitializers; string delim = ""; delim = ", ")]
[delim]new metadslx.core.ModelPropertyInitializer([pi.Property.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [GenerateExpression(pi.Value)], true))\
[end loop]
})\
[end if]
end template

template GenerateNewCollectionValues(MetaNewCollectionExpression expr)
[loop(expr->v:Values; string delim = ""; delim = ", \n")]
[delim][GenerateExpression(v)]\
[end loop]
end template

function string GetJavaValue(object value)
	if (value == null) return "null";
	else if (value is bool && ((bool)value) == true) return "true";
	else if (value is bool && ((bool)value) == false) return "false";
	else if (value is string) return "\""+value.ToString()+"\"";
	else if (value is MetaExpression) return GenerateExpression((MetaExpression)value);
	else return value.ToString();
	end if
end function

function string GetJavaIdentifier(object value)
	if (value == null) 
		return null;
	end if
	if (value is MetaConstantExpression && ((MetaConstantExpression)value).Value != null)
		return ((MetaConstantExpression)value).Value.ToString();
	else if (value is string) 
		return value.ToString();
	else
		return null;
	end if
end function

function string GetJavaOperator(MetaOperatorExpression expr)
	switch(expr)
		type as MetaUnaryPlusExpression: return "+";
		type as MetaNegateExpression: return "-";
		type as MetaOnesComplementExpression: return "~";
		type as MetaNotExpression: return "!";
		type as MetaPostIncrementAssignExpression: return "++";
		type as MetaPostDecrementAssignExpression: return "--";
		type as MetaPreIncrementAssignExpression: return "++";
		type as MetaPreDecrementAssignExpression: return "--";
		type as MetaMultiplyExpression: return "*";
		type as MetaDivideExpression: return "/";
		type as MetaModuloExpression: return "%";
		type as MetaAddExpression: return "+";
		type as MetaSubtractExpression: return "-";
		type as MetaLeftShiftExpression: return "<<";
		type as MetaRightShiftExpression: return ">>";
		type as MetaLessThanExpression: return "<";
		type as MetaLessThanOrEqualExpression: return "<=";
		type as MetaGreaterThanExpression: return ">";
		type as MetaGreaterThanOrEqualExpression: return ">=";
		type as MetaEqualExpression: return "==";
		type as MetaNotEqualExpression: return "!=";
		type as MetaAndExpression: return "&";
		type as MetaOrExpression: return "|";
		type as MetaExclusiveOrExpression: return "^";
		type as MetaAndAlsoExpression: return "&&";
		type as MetaOrElseExpression: return "||";
		type as MetaNullCoalescingExpression: return "??";
		type as MetaMultiplyAssignExpression: return "*=";
		type as MetaDivideAssignExpression: return "/=";
		type as MetaModuloAssignExpression: return "%=";
		type as MetaAddAssignExpression: return "+=";
		type as MetaSubtractAssignExpression: return "-=";
		type as MetaLeftShiftAssignExpression: return "<<=";
		type as MetaRightShiftAssignExpression: return ">>=";
		type as MetaAndAssignExpression: return "&=";
		type as MetaExclusiveOrAssignExpression: return "^=";
		type as MetaOrAssignExpression: return "|=";
		default: return "";
	end switch
end function

function string GetTypeName(MetaExpression expr)
	if (expr is MetaTypeOfExpression) return ((MetaTypeOfExpression)expr).TypeReference.JavaFullName();
	else return null;
	end if
end function

function MetaSynthetizedPropertyInitializer GetSynthetizedInitializerFor(MetaClass cls, MetaProperty prop)
	MetaSynthetizedPropertyInitializer lastInit = null;
	loop(cls->sup:GetAllSuperClasses(true)->Constructor->Initializers->init:typeof(MetaSynthetizedPropertyInitializer))
		if (init.Property == prop)
			lastInit = init;
		end if
	end loop
	return lastInit;
end function

template GenerateConstructorImpl(MetaModel model, MetaClass cls)
public [cls.JavaImplName()]() {
	[loop(cls->prop:GetAllProperties())]
		[MetaSynthetizedPropertyInitializer synInit = GetSynthetizedInitializerFor(cls, prop)]
		[if (synInit != null)]
			[if (prop.Kind != MetaPropertyKind.Derived)]
				[if (ModelCompilerContext.Current.TypeProvider.GetTypeOf(synInit.Value) is MetaCollectionType)]
    this.mLazySet([prop.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [GenerateExpression(synInit.Value)], true));
				[else]
    this.mLazySet([prop.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [GenerateExpression(synInit.Value)], true));
				[end if]
			[else]
    this.mDerivedSet([prop.JavaFullDescriptorName()], () -> [GenerateExpression(synInit.Value)]);
			[end if]
		[else]
			[if(prop.Type is MetaCollectionType)]
				[if (prop.Kind == MetaPropertyKind.Normal || prop.Kind == MetaPropertyKind.Containment)]
    this.mSet([prop.JavaFullDescriptorName()], new [prop.Type.JavaName()]([GetCollectionConstructorParams(prop)]));
				[else if (prop.Kind == MetaPropertyKind.Lazy)]
    this.mLazySet([prop.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [prop.Class.Model.JavaFullImplementationName()].[prop.Class.JavaName()]_[prop.Name](this), true));
				[else if (prop.Kind == MetaPropertyKind.Derived)]
    this.mDerivedSet([prop.JavaFullDescriptorName()], () -> [prop.Class.Model.JavaFullImplementationName()].[prop.Class.JavaName()]_[prop.Name](this));
				[else if (prop.Kind == MetaPropertyKind.Readonly)]
    // Init [prop.JavaFullDescriptorName()] in [prop.Class.Model.JavaFullImplementationName()].[cls.JavaName()]_[cls.JavaName()]
				[end if]
			[else]
				[if(prop.Kind == MetaPropertyKind.Lazy)]
    this.mLazySet([prop.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [model.JavaFullImplementationName()].[prop.Class.JavaName()]_[prop.Name](this), true));
				[else if (prop.Kind == MetaPropertyKind.Derived)]
    this.mDerivedSet([prop.JavaFullDescriptorName()], () -> [model.JavaFullImplementationName()].[prop.Class.JavaName()]_[prop.Name](this));
				[else if (prop.Kind == MetaPropertyKind.Readonly)]
    // Init [prop.JavaFullDescriptorName()] in [model.JavaFullImplementationName()].[cls.JavaName()]_[cls.JavaName()]
				[end if]
			[end if]
		[end if]
	[end loop]
	[loop(cls->sup:GetAllSuperClasses(true)->Constructor->Initializers->init:typeof(MetaInheritedPropertyInitializer))]
		[if (init.Object != null && init.Property != null)]
    this.mLazySetChild([init.Object.JavaFullDescriptorName()], [init.Property.JavaFullDescriptorName()], metadslx.core.Lazy.create(() -> [GenerateExpression(init.Value)], true));
		[end if]
	[end loop]
    [cls.Model.JavaFullImplementationName()].[cls.JavaName()](this);
    [loop(cls->prop:GetAllProperties())]
		[if (prop.Kind == MetaPropertyKind.Readonly)]
    if (!this.mIsSet([prop.JavaFullDescriptorName()])) throw new ModelException("Readonly property [model.JavaName()].[prop.Class.JavaName()].[prop.Name]Property was not set in [cls.JavaName()]_[cls.JavaName()]().");
		[end if]
	[end loop]
    this.mMakeDefault();
}
end template

function string GetReturn(MetaOperation op)
    if (op.ReturnType.JavaName() == "void") 
		return "";
	else 
		return "return ";
	end if
end function

template GenerateOperationImpl(MetaModel model, MetaOperation op, HashSet<string> generated)
[if (generated.Add(op.Name))]
^
public [op.ReturnType.JavaFullPublicName()] [op.Name.ToCamelCase()]([GetParameters(op, false)]) {
    [GetReturn(op)][model.JavaFullImplementationName()].[op.Parent.JavaName()]_[op.Name.ToCamelCase()]([GetImplCallParameterNames(op)]);
}
[end if]
end template

function string GetSuperClasses(MetaClass cls)
	string result = "";
    loop(cls->sup:SuperClasses; string delim = ""; delim = ", ")
		result += delim+sup.JavaFullName();
	end loop
	return result;
end function

function string GetAllSuperClasses(MetaClass cls)
	string result = "";
    loop(cls->sup:GetAllSuperClasses(false); string delim = ""; delim = ", ")
		result += delim+sup.JavaFullName();
	end loop
	return result;
end function

template GenerateMetaModelDescriptor(MetaModel model)
package [model.Namespace.JavaName()];
^
public final class [model.JavaDescriptorName()] {
    static {
    [loop(model->Namespace->Declarations->cls:typeof(MetaClass))]
        [cls.JavaName()].staticInit();
    [end loop]
    }
^
    static void staticInit() {}
^
	public static final String Uri = "[model.Uri]";
^
    [loop(model->Namespace->Declarations->cls:typeof(MetaClass))]
    [GenerateMetaModelClass(cls)]
    [end loop]
}
^
end template


template GenerateMetaModelClass(MetaClass cls)
^
public static final class [cls.JavaName()] {
    static void staticInit() {}
^
    static {
        [cls.Model.JavaFullDescriptorName()].staticInit();
    }
^
    public static metadslx.core.MetaClass getMetaClass() {
        return [cls.JavaFullInstanceName()]; 
    }
^
    [loop(cls->prop:Properties)]
    [GeneratePropertyDeclaration(cls.Model, cls, prop)]
    [end loop]
}
end template


template GenerateModelConstant(MetaModel model, MetaConstant mconst)
public static final [mconst.Type.JavaFullName()] [mconst.Name];
end template

template GenerateModelFunction(MetaModel model, MetaGlobalFunction mfunc)
public static final [MetaInstance.MetaGlobalFunction.JavaFullName()] [mfunc.Name];
end template

template GenerateModelConstantImpl(MetaModel model, MetaConstant mconst, Dictionary<ModelObject, string> mobjToTmp)
[mconst.Name] = [GenerateExpression(mconst.Value)];
end template

template GenerateModelFunctionImpl(MetaModel model, MetaGlobalFunction mfunc, Dictionary<ModelObject, string> mobjToTmp)
[RegisterModelObject((ModelObject)mfunc, mobjToTmp, mfunc.Name)] = [MetaInstance.MetaGlobalFunction.JavaFullFactoryMethodName()]();
end template


template GenerateMetaModelInstance(MetaModel model)
[Dictionary<ModelObject, string> mobjToTmp = new Dictionary<ModelObject, string>()]
package [model.Namespace.JavaName()];
^
public final class [model.JavaInstancesName()] {
    private static metadslx.core.Model model;
^
    public static metadslx.core.Model model() {
        return [model.Name]Instance.model;
    }
^
    public static final metadslx.core.MetaModel Meta;
^
    [loop(model->Namespace->Declarations->c:typeof(MetaConstant))]
    [GenerateModelConstant(model, c)]
    [end loop]
^
	[GenerateModelObjectInstanceDeclaration(((ModelObject)model).GetRootNamespace(), mobjToTmp)]
^
    static {
		[model.JavaDescriptorName()].staticInit();
		[model.JavaInstancesName()].model = new metadslx.core.Model();
   		try (metadslx.core.ModelContextScope _scope = new metadslx.core.ModelContextScope([model.JavaInstancesName()].model)) {
		    [loop(model->Namespace->Declarations->c:typeof(MetaConstant))]
            [GenerateModelConstantImpl(model, c, mobjToTmp)]
			[end loop]
^
			[GenerateModelObjectInstance(((ModelObject)model).GetRootNamespace(), mobjToTmp)]
^
			initializeInstances();
^
            for (ModelObject mo: metadslx.core.ModelContext.current().instances()) {
                mo.mEvalLazyValues();
            }
		}
    }
^
	private static void initializeInstances() {
		[GenerateModelObjectInstanceInitializer(((ModelObject)model).GetRootNamespace(), mobjToTmp)]
	}
}
end template

function string RegisterModelObject(ModelObject mobj, Dictionary<ModelObject, string> mobjToTmp, string name)
	if (!mobjToTmp.ContainsKey(mobj))
		string tmpName = name;
		mobjToTmp.Add(mobj, tmpName);
		return tmpName;
	else
		return mobjToTmp[mobj];
	end if
end function

function bool HasBuiltInName(ModelObject mobj)
	MetaAnnotatedElement mannot = mobj as MetaAnnotatedElement;
	if (mannot != null && !(mobj is MetaConstant))
		loop(mannot->a:Annotations->p:Properties where a.Name == "BuiltInName" && p.Name == "Name")
			return true;
		end loop
	end if
	MetaDeclaration mdecl = mobj as MetaDeclaration;
	if (mdecl != null && !(mdecl is MetaOperation) && !(mdecl is MetaConstant))
		return true;
	end if
	return false;
end function

function string GetInstanceName(ModelObject mobj)
	MetaAnnotatedElement mannot = mobj as MetaAnnotatedElement;
	if (mannot != null && !(mobj is MetaConstant))
		loop(mannot->a:Annotations->p:Properties where a.Name == "BuiltInName" && p.Name == "Name")
			return GetJavaIdentifier(p.Value);
		end loop
	end if
	MetaDeclaration mdecl = mobj as MetaDeclaration;
	if (mdecl != null && !(mdecl is MetaOperation) && !(mobj is MetaConstant))
		return mdecl.JavaInstanceName();
	end if
	MetaProperty mprop = mobj as MetaProperty;
	if (mprop != null)
		return mprop.JavaInstanceName();
	end if
	return null;
end function

function string RegisterModelObject(ModelObject mobj, Dictionary<ModelObject, string> mobjToTmp)
	if (!mobjToTmp.ContainsKey(mobj))
		string name = GetInstanceName(mobj);
		if (name == null)
			name = "tmp"+NextCounter();
		end if
		mobjToTmp.Add(mobj, name);
		return name;
	else
		return null;
	end if
end function

template GenerateModelObjectInstanceDeclaration(ModelObject mobj, Dictionary<ModelObject, string> mobjToTmp)
[if (mobj != null && mobj.MMetaClass != null)]
	[if (!Instances.Contains(mobj))]
	[else]
		[if (true/*HasBuiltInName(mobj)*/)]
			[string tmpName = RegisterModelObject(mobj, mobjToTmp)]
			[if (tmpName != null)]
				[if (tmpName.StartsWith("tmp"))]
private static final metadslx.core.[mobj.MMetaClass.JavaName()] [tmpName];
				[else]
public static final metadslx.core.[mobj.MMetaClass.JavaName()] [tmpName];
				[end if]
			[end if]
		[end if]
		[loop(mobj->prop:MGetAllProperties())]
			[if (prop.MetaProperty != null && prop.MetaProperty.Kind != MetaPropertyKind.Derived)]
				[object propValue = mobj.MGet(prop)]
[GenerateModelObjectPropertyValueDeclaration(mobj, prop, propValue, mobjToTmp)]
			[end if]
		[end loop]
		[loop(mobj->child:MChildren)]
[GenerateModelObjectInstanceDeclaration(child, mobjToTmp)]
		[end loop]
	[end if]
[end if]
end template

template GenerateModelObjectInstance(ModelObject mobj, Dictionary<ModelObject, string> mobjToTmp)
[if (mobj != null && mobj.MMetaClass != null)]
	[if (!Instances.Contains(mobj))]
		[string metaClassName = mobj.MMetaClass.Name]
		[if (mobj is MetaDeclaration || mobj is MetaProperty)]
			[if (mobj is MetaProperty)]
[string tmpName = RegisterModelObject(mobj, mobjToTmp, ((MetaProperty)mobj).JavaInstanceName())]
			[else]
[string tmpName = RegisterModelObject(mobj, mobjToTmp, ((MetaDeclaration)mobj).JavaInstanceName())]
			[end if]
		[else]
// OMITTED: [metaClassName]
		[end if]
	[else]
		[string tmpName = null]
		[if (mobjToTmp.ContainsKey(mobj))]
			[tmpName = mobjToTmp[mobj]]
		[else]
			[tmpName = RegisterModelObject(mobj, mobjToTmp)]
metadslx.core.[mobj.MMetaClass.JavaName()] \
		[end if]
		[if (tmpName != null)]
			[if (tmpName.StartsWith("tmp"))]
[tmpName] = metadslx.core.MetaFactory.instance().create[mobj.MMetaClass.JavaName()]();
			[else]
[tmpName] = metadslx.core.MetaFactory.instance().create[mobj.MMetaClass.JavaName()]();
			[end if]
			[if (mobj is MetaModel)]
Meta = [tmpName];
			[end if]
			[loop(mobj->prop:MGetAllProperties())]
				[if (prop.MetaProperty != null && prop.MetaProperty.Kind != MetaPropertyKind.Derived)]
					[object propValue = mobj.MGet(prop)]
[GenerateModelObjectPropertyValueInstance(mobj, prop, propValue, mobjToTmp)]
				[end if]
			[end loop]
			[loop(mobj->child:MChildren)]
[GenerateModelObjectInstance(child, mobjToTmp)]
			[end loop]
		[end if]
	[end if]
[end if]
end template

template GenerateModelObjectInstanceInitializer(ModelObject mobj, Dictionary<ModelObject, string> mobjToTmp)
[if (mobj != null && mobj.MMetaClass != null)]
	[if (!Instances.Contains(mobj))]
	[else]
		[loop(mobj->prop:MGetAllProperties())]
			[if (prop.MetaProperty != null && prop.MetaProperty.Kind != MetaPropertyKind.Derived)]
				[object propValue = mobj.MGet(prop)]
[GenerateModelObjectPropertyValue(mobj, prop, propValue, mobjToTmp)]
			[end if]
		[end loop]
		[loop(mobj->child:MChildren)]
[GenerateModelObjectInstanceInitializer(child, mobjToTmp)]
		[end loop]
	[end if]
[end if]
end template

template GenerateModelObjectPropertyValue(ModelObject mobj, ModelProperty prop, object value, Dictionary<ModelObject, string> mobjToTmp)
[string tmpName = mobjToTmp[mobj]]
[string propDeclName = prop.JavaFullDeclaredName()]
[if (!prop.IsCollection)]
((metadslx.core.ModelObject)[tmpName]).mUnSet([propDeclName]);
[end if]
[ModelObject moValue = value as ModelObject]
[if (value == null)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> null, true));
[else if (value is string)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> "[value]", true));
[else if (value is bool)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [value.ToString().ToLower()], true));
[else if (value.GetType().IsPrimitive)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [value.ToString()], true));
[else if (MetaBuiltInTypes.Types.Contains(value))]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [GenerateTypeOf(value)], true));
[else if (value is MetaPrimitiveType)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [GenerateTypeOf(value)], true));
[else if (value is Enum)]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [value.JavaEnumValueOf()], true));
[else if (moValue != null)]
	[if (mobjToTmp.ContainsKey(moValue))]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [mobjToTmp[moValue]], true));
	[else]
[GenerateModelObjectInstanceInitializer(moValue, mobjToTmp)]
		[if (mobjToTmp.ContainsKey(moValue))]
			[string tmpValueName = mobjToTmp[moValue]]
((metadslx.core.ModelObject)[tmpName]).mLazyAdd([propDeclName], metadslx.core.Lazy.create(() -> [tmpValueName], true));
		[else]
// NOT FOUND: [moValue]
		[end if]
	[end if]
[else]
	[IEnumerable<object> mc = (value as ModelCollection) as IEnumerable<object>]
	[if (mc != null)]
		[loop(cvalue:mc)]
[GenerateModelObjectPropertyValue(mobj, prop, cvalue, mobjToTmp)]
		[end loop]
	[else]
// [propDeclName] = [value.GetType()]
	[end if]
[end if]
end template

template GenerateModelObjectPropertyValueDeclaration(ModelObject mobj, ModelProperty prop, object value, Dictionary<ModelObject, string> mobjToTmp)
[string tmpName = mobjToTmp[mobj]]
[string propDeclName = prop.JavaFullDeclaredName()]
[ModelObject moValue = value as ModelObject]
[if (value == null)]
[else if (value is string)]
[else if (value is bool)]
[else if (value.GetType().IsPrimitive)]
[else if (MetaBuiltInTypes.Types.Contains(value))]
[else if (value is MetaPrimitiveType)]
[else if (value is Enum)]
[else if (moValue != null)]
	[if (mobjToTmp.ContainsKey(moValue))]
	[else]
[GenerateModelObjectInstanceDeclaration(moValue, mobjToTmp)]
	[end if]
[else]
	[IEnumerable<object> mc = (value as ModelCollection) as IEnumerable<object>]
	[if (mc != null)]
		[loop(cvalue:mc)]
[GenerateModelObjectPropertyValueDeclaration(mobj, prop, cvalue, mobjToTmp)]
		[end loop]
	[end if]
[end if]
end template

template GenerateModelObjectPropertyValueInstance(ModelObject mobj, ModelProperty prop, object value, Dictionary<ModelObject, string> mobjToTmp)
[string tmpName = mobjToTmp[mobj]]
[string propDeclName = prop.JavaFullDeclaredName()]
[ModelObject moValue = value as ModelObject]
[if (value == null)]
[else if (value is string)]
[else if (value is bool)]
[else if (value.GetType().IsPrimitive)]
[else if (MetaBuiltInTypes.Types.Contains(value))]
[else if (value is MetaPrimitiveType)]
[else if (value is Enum)]
[else if (moValue != null)]
	[if (mobjToTmp.ContainsKey(moValue))]
	[else]
[GenerateModelObjectInstance(moValue, mobjToTmp)]
	[end if]
[else]
	[IEnumerable<object> mc = (value as ModelCollection) as IEnumerable<object>]
	[if (mc != null)]
		[loop(cvalue:mc)]
[GenerateModelObjectPropertyValueInstance(mobj, prop, cvalue, mobjToTmp)]
		[end loop]
	[end if]
[end if]
end template
template GenerateClassMetaInstance(MetaClass cls)
[cls.JavaName()] = metadslx.core.MetaFactory.instance().createMetaClass();
end template

template GenerateClassMetaInstanceInitializer(MetaClass cls)
[cls.JavaName()].setName("[cls.JavaName()]");
[if (cls.IsAbstract)]
[cls.JavaName()].setIsAbstract(true);
[end if]
[loop(cls->sup:SuperClasses)]
[cls.JavaName()].getSuperClasses().add([sup.JavaFullInstanceName()]);
[end loop]
end template


template GenerateImplementationProvider(MetaModel model)
package [model.Namespace.JavaName()];
^
final class [model.Name]ImplementationProvider {
    // If there is a compile error at this line, create a new class called [model.Name]Implementation
	// which is a subclass of [model.Name]ImplementationBase:
    private static [model.Name]Implementation implementation = new [model.Name]Implementation();
^
    public static [model.Name]Implementation implementation() {
        return [model.Name]ImplementationProvider.implementation;
    }
}
end template

template GenerateImplementationBase(MetaModel model)
package [model.Namespace.JavaName()];
^
/**
 * Base class for implementing the behavior of the model elements.
 * This class has to be be overriden in [model.Name]Implementation to provide custom
 * implementation for the constructors, operations and property values.
 */
abstract class [model.Name]ImplementationBase {
	[loop(model->Namespace->Declarations->cls:typeof(MetaClass))]
    /**
	 * Implements the constructor: [cls.JavaName()]()
	[if (hasloop(cls->sup:SuperClasses))]
	 * Direct superclasses: [GetSuperClasses(cls)]
	 * All superclasses: [GetAllSuperClasses(cls)]
	[end if]
	[if (hasloop(cls->prop:GetAllProperties() where prop.Kind == MetaPropertyKind.Readonly))]
     * Initializes the following readonly properties:
	[end if]
    [loop(cls->prop:GetAllProperties())]
	[if (prop.Kind == MetaPropertyKind.Readonly)]
     *    [prop.Class.Name].[prop.Name]
	[end if]
	[end loop]
    */
    public void [cls.JavaName()]([cls.JavaName()] _this) {
		[loop(cls->sup:SuperClasses)]
        this.[sup.JavaName()](_this);
		[end loop]
    }
    [loop(cls->prop:Properties)]
		[MetaSynthetizedPropertyInitializer synInit = GetSynthetizedInitializerFor(cls, prop)]
		[if (synInit == null)]
			[if (prop.Kind == MetaPropertyKind.Derived)]
^
    /**
     * Returns the value of the derived property: [cls.JavaName()].[prop.Name]
     */
    public [prop.Type.JavaFullPublicName()] [cls.JavaName()]_[prop.Name]([cls.JavaName()] _this) {
        throw new UnsupportedOperationException();
    }
			[else if (prop.Kind == MetaPropertyKind.Lazy)]
^
    /**
     * Returns the value of the lazy property: [cls.JavaName()].[prop.Name]
     */
    public [prop.Type.JavaFullPublicName()] [cls.JavaName()]_[prop.Name]([cls.JavaName()] _this) {
        throw new UnsupportedOperationException();
    }
			[end if]
		[end if]
	[end loop]
    [loop(cls->op:Operations)]
^
    /**
     * Implements the operation: [cls.JavaName()].[op.Name]()
     */
    public [op.ReturnType.JavaFullPublicName()] [cls.JavaName()]_[op.Name.ToCamelCase()]([GetImplParameters(cls, op)]) {
        throw new UnsupportedOperationException();
    }
	[end loop]
^
	[end loop]
	[loop(model->Namespace->Declarations->enm:typeof(MetaEnum))]
    [loop(enm->op:Operations)]
^
    /**
     * Implements the operation: [enm.JavaName()].[op.Name]
     */
    public [op.ReturnType.JavaFullPublicName()] [enm.JavaName()]_[op.Name.ToCamelCase()]([GetImplParameters(enm, op)]) {
        throw new UnsupportedOperationException();
    }
	[end loop]
^
	[end loop]
}
^
end template

template GenerateFactory(MetaModel model)
package [model.Namespace.JavaName()];
^
/**
 * Factory class for creating instances of model elements.
 */
public class [model.JavaFactoryName()] extends ModelFactory {
    private static [model.JavaFactoryName()] instance = new [model.JavaFactoryName()]();
^
	private [model.JavaFactoryName()]()
	{
	}
^
    /**
     * The singleton instance of the factory.
     */
    public static [model.JavaFactoryName()] instance() {
        return [model.JavaFactoryName()].instance;
    }
	[loop(model->Namespace->Declarations->cls:typeof(MetaClass))]
		[if (!cls.IsAbstract)]
^
    /**
     * Creates a new instance of [cls.JavaName()].
     */
    public [cls.JavaName()] create[cls.JavaName()]() {
		return this.create[cls.JavaName()](null);
	}

    /**
     * Creates a new instance of [cls.JavaName()].
     */
    public [cls.JavaName()] create[cls.JavaName()](Iterable<ModelPropertyInitializer> initializers) {
		[cls.JavaName()] result = new [cls.JavaFullName()]Impl();
		if (initializers != null) {
			this.init((ModelObject)result, initializers);
		}
		return result;
	}
		[end if]
	[end loop]
}
^
end template

